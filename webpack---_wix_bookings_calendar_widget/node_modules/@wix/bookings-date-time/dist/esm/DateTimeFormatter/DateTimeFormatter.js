import {
    __assign
} from "tslib";
import {
    rfcToShiftedDate
} from "../DateAndTimeAdapters/dateTimeAdapter";
var DateTimeFormatter = /** @class */ (function() {
    function DateTimeFormatter(regionalLocale, timezone) {
        this.regionalLocale = regionalLocale;
        this.timezone = timezone;
    }
    DateTimeFormatter.prototype.format = function(rfcDateTime, formatOptions) {
        var date = this.timezone ? new Date(rfcDateTime) : rfcToShiftedDate(rfcDateTime);
        var dateTimeFormat = new Intl.DateTimeFormat(this.regionalLocale, __assign(__assign({}, formatOptions), {
            timeZone: this.timezone
        }));
        return dateTimeFormat.format(date);
    };;
    /**
     * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
     * @returns {string} Wednesday, 2 June
     */
    DateTimeFormatter.prototype.formatDayOfMonth = function(rfcDateTime) {
        var formatOptions = {
            day: 'numeric',
            weekday: 'long',
            month: 'long',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    // TimePicker header
    /**
     * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
     * @returns {string} 13:30
     */
    DateTimeFormatter.prototype.formatTime = function(rfcDateTime) {
        var formatOptions = {
            hour: 'numeric',
            minute: 'numeric',
        };
        return this.format(rfcDateTime, formatOptions).toLowerCase();
    };;
    // RescheduleDialog, TimePicker timeslot
    // RescheduleToast - need to integrate
    /**
     * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
     * @returns {string} 2 June 2021
     */
    DateTimeFormatter.prototype.formatDate = function(rfcDateTime) {
        var formatOptions = {
            day: 'numeric',
            year: 'numeric',
            month: 'long',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    /**
     * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
     * @returns {string} 18 Jun
     */
    DateTimeFormatter.prototype.formatShortDate = function(rfcDateTime) {
        var formatOptions = {
            month: 'short',
            day: 'numeric',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    // RescheduleDialog, RescheduleToast
    /**
     * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
     * @returns {string}  2 June 2021, 13:30
     */
    DateTimeFormatter.prototype.formatDateAndTime = function(rfcDateTime) {
        var formatOptions = {
            day: 'numeric',
            year: 'numeric',
            month: 'long',
            hour: 'numeric',
            minute: 'numeric',
        };
        return this.format(rfcDateTime, formatOptions).replace('AM', 'am').replace('PM', 'pm');
    };;
    // Booking Details
    /**
     * @param {string} rfcDateTime - example 2020-09-04T00:00:00.000+03:00
     * @returns {string} 4
     */
    DateTimeFormatter.prototype.formatDay = function(rfcDateTime) {
        var formatOptions = {
            day: 'numeric',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    /**
     * @param {string} rfcDateTime - example 2020-09-04T00:00:00.000+03:00
     * @returns {string} Fri
     */
    DateTimeFormatter.prototype.formatShortWeekday = function(rfcDateTime) {
        var formatOptions = {
            weekday: 'short',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    /**
     * @param {string} rfcDateTime - example 2020-09-04T00:00:00.000+03:00
     * @returns {string} Friday
     */
    DateTimeFormatter.prototype.formatWeekday = function(rfcDateTime) {
        var formatOptions = {
            weekday: 'long',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    /**
     * @param {string} rfcDateTime - example 2020-09-04T00:00:00.000+03:00
     * @returns {string} September
     */
    DateTimeFormatter.prototype.formatMonth = function(rfcDateTime) {
        var formatOptions = {
            month: 'long',
        };
        return this.format(rfcDateTime, formatOptions);
    };;
    return DateTimeFormatter;
}());
export default DateTimeFormatter;
//# sourceMappingURL=DateTimeFormatter.js.map