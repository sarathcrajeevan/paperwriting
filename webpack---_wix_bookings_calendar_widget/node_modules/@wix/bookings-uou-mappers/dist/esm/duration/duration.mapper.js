import {
    __assign
} from "tslib";
import {
    ServiceType
} from '@wix/bookings-uou-types/dist/src';
var DurationMapper = /** @class */ (function() {
    function DurationMapper(regionalSettingsLocale, options, formatter) {
        this.regionalSettingsLocale = regionalSettingsLocale;
        this.options = options;
        this.formatter = formatter;
        this.isDateInCurrentYear = function(date) {
            var now = new Date();
            return now.getFullYear() === date.getFullYear();
        };
        this.isDateInThePast = function(date) {
            var now = new Date();
            return date.getTime() < now.getTime();
        };
    }
    DurationMapper.prototype.courseText = function(_a) {
        var startDateAsUTC = _a.startDateAsUTC,
            viewTimezone = _a.viewTimezone,
            isFormatTimezoneDateByBOConfigurationOnClientSide = _a.isFormatTimezoneDateByBOConfigurationOnClientSide;
        if (startDateAsUTC) {
            var startDate = new Date(startDateAsUTC);
            var dateFormat = this.isDateInCurrentYear(startDate) ?
                __assign({
                    month: 'short',
                    day: 'numeric'
                }, (isFormatTimezoneDateByBOConfigurationOnClientSide ?
                    {
                        timeZone: viewTimezone
                    } :
                    {})) : __assign({
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }, (isFormatTimezoneDateByBOConfigurationOnClientSide ?
                    {
                        timeZone: viewTimezone
                    } :
                    {}));
            var formattedDate = new Intl.DateTimeFormat(this.regionalSettingsLocale, dateFormat).format(startDate);
            return this.isDateInThePast(startDate) ?
                this.formatter(this.options.coursePassedText, {
                    date: formattedDate,
                    interpolation: {
                        escapeValue: false
                    },
                }) :
                this.formatter(this.options.courseInFutureText, {
                    date: formattedDate,
                    interpolation: {
                        escapeValue: false
                    },
                });
        }
        return '';
    };
    DurationMapper.prototype.formatDurationFromMinutes = function(_a) {
        var durationInMinutes = _a.durationInMinutes,
            hourUnit = _a.hourUnit,
            minuteUnit = _a.minuteUnit;
        var hours = Math.floor(durationInMinutes / 60);
        var minutes = durationInMinutes % 60;
        var hourText = this.formattedHours(hours, hourUnit);
        var minuteText = this.formatter(minuteUnit, {
            minutes: minutes
        });
        return hours ? hourText + (minutes ? " " + minuteText : '') : minuteText;
    };
    DurationMapper.prototype.formattedHours = function(hours, hourUnit) {
        var hourText = this.formatter(hourUnit, {
            hours: hours
        });
        var hoursAriaLabelFormatterKey = 'duration.units.aria-hours';
        var isHourTextForAriaLabel = hourUnit === hoursAriaLabelFormatterKey;
        return hours === 1 && isHourTextForAriaLabel ?
            hourText.slice(0, -1) :
            hourText;
    };
    DurationMapper.prototype.durationTextFromMinutes = function(durationInMinutes) {
        var hourUnit = this.options.hourUnit;
        var minuteUnit = this.options.minuteUnit;
        return this.formatDurationFromMinutes({
            durationInMinutes: durationInMinutes,
            hourUnit: hourUnit,
            minuteUnit: minuteUnit,
        });
    };
    DurationMapper.prototype.durationAriaLabelFromMinutes = function(durationInMinutes) {
        var hourUnit = this.options.hourAriaUnit;
        var minuteUnit = this.options.minuteAriaUnit;
        return this.formatDurationFromMinutes({
            durationInMinutes: durationInMinutes,
            hourUnit: hourUnit,
            minuteUnit: minuteUnit,
        });
    };
    DurationMapper.prototype.durationText = function(_a) {
        var serviceType = _a.serviceType,
            isDurationVaries = _a.isDurationVaries,
            durationInMinutes = _a.durationInMinutes,
            startDateAsUTC = _a.startDateAsUTC,
            durationAria = _a.durationAria,
            viewTimezone = _a.viewTimezone,
            _b = _a.isFormatTimezoneDateByBOConfigurationOnClientSide,
            isFormatTimezoneDateByBOConfigurationOnClientSide = _b === void 0 ? false : _b;
        if (serviceType === ServiceType.COURSE) {
            return this.courseText({
                startDateAsUTC: startDateAsUTC,
                viewTimezone: viewTimezone,
                isFormatTimezoneDateByBOConfigurationOnClientSide: isFormatTimezoneDateByBOConfigurationOnClientSide,
            });
        }
        if (isDurationVaries) {
            return this.formatter(this.options.durationVaries);
        }
        if (durationInMinutes) {
            if (durationAria) {
                return this.durationAriaLabelFromMinutes(durationInMinutes);
            }
            return this.durationTextFromMinutes(durationInMinutes);
        }
        return '';
    };
    return DurationMapper;
}());
export {
    DurationMapper
};
//# sourceMappingURL=duration.mapper.js.map