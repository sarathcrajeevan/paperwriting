var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = {
    endpoint: 'wixboost-users'
};
var init = function(webOrMobileLogger) {
    return function(userConfig) {
        if (userConfig === void 0) {
            userConfig = {};
        }
        var defaults = userConfig.defaults,
            restOfConfig = __rest(userConfig, ["defaults"]);
        var config = __assign(__assign({}, defaultConfig), restOfConfig);
        var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
        var logger = getLogger(factoryInstance);
        return defaults ? logger.util.updateDefaults(defaults) : logger;
    };
};
export var initCustomLogger = function(factoryInstance) {
    return getLogger(factoryInstance);
};
var getLogger = function(biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function() {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function(defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function(logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({
                src: 16
            });
        this.bi = biLoggerClientFactoryInstance.logger({
            endpoint: 'wixboost-users'
        });
    };
    /**
     * @typedef {Object} bookingsManageParticipantsPageHoverParticipantParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {string} contactId - {contact_id}
     * @property {GUID} biToken - msid
     * @property {string} serviceId - {service_id}
     * @property {GUID} sessionId - --
     * @property {string} type - class/course/appointment
     * @property {string} waiverStatus - undefined, signed, not_signed
     **/
    /**
     * Name: bookings > manage participants page > hover participant. Evid: 617.
     * Event description: hover in BO manage participants page.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * contactId - Type: string. Desc: {contact_id}
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: {service_id}
     *
     * sessionId - Type: guid. Desc: --
     *
     * type - Type: string. Desc: class/course/appointment
     *
     * waiverStatus - Type: string. Desc: undefined, signed, not_signed
     * @param {bookingsManageParticipantsPageHoverParticipantParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsManageParticipantsPageHoverParticipant = function(params) {
        return this.bi.log(__assign({
            evid: 617
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistorySendEmailParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} tabName - {info, history,payments}
     **/
    /**
     * Name: bookings > Client History >  send email. Evid: 213.
     * Event description: send email to the customer http://prntscr.com/d54okn.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * tabName - Type: string. Desc: {info, history,payments}
     * @param {bookingsClientHistorySendEmailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistorySendEmail = function(params) {
        return this.bi.log(__assign({
            evid: 213
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryTabOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} tabName - {info, history,payments}
     **/
    /**
     * Name: bookings > Client History >  tab opened. Evid: 215.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * tabName - Type: string. Desc: {info, history,payments}
     * @param {bookingsClientHistoryTabOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryTabOpened = function(params) {
        return this.bi.log(__assign({
            evid: 215
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsAddToSessionClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isEmptyState - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {service_list,service_form}
     * @property {string} selection - {calendar_page, schedule_session}
     * @property {string} serviceId - service_id
     **/
    /**
     * Name: Bookings > Schedule Modal > Click to schedule sessions. Evid: 245.
     * Event description: In the schedule modal - click to schedule sessions.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isEmptyState - Type: bool.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {service_list,service_form}
     *
     * selection - Type: string. Desc: {calendar_page, schedule_session}
     *
     * serviceId - Type: string. Desc: service_id
     * @param {bookingsClubsGroupSessionsAddToSessionClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsAddToSessionClicked = function(params) {
        return this.bi.log(__assign({
            evid: 245
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsParticipantViewContactClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business id
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings> group sessions -> participant -> view contact clicked. Evid: 268.
     * Event description: When user clicks on "view contact" after clicking on a participant.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business id
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsParticipantViewContactClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsParticipantViewContactClicked = function(params) {
        return this.bi.log(__assign({
            evid: 268
        }, params));
    };
    /**
     * @typedef {Object} bookingsCancelServiceFormEditingParams
     * @property {boolean} accept_bookings_after_start - advanced settings // FALSE if toggle is off
     * @property {boolean} accept_online_bookings - advanced settings // FALSE if this a "no book flow"
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - business id
     * @property {string} cancelType - {service_form_cancel_button, leave_without_saving}
     * @property {boolean} duration_empty - custom duration, True = error raised
     * @property {string} form_source - default/form_id
     * @property {boolean} galleryImageChanged - True = gallery photo changed (add/replace/reorder)
     * @property {boolean} galleryImageEmpty - True = no gallery image(s)
     * @property {boolean} headerImageChanged - True = header photo changed (add/replace/reorder)
     * @property {boolean} headerImageEmpty - True = no header image
     * @property {number} image_in_gallery_count - number of images in gallery
     * @property {boolean} isFirstDraft - If the first draft of a non saved service
     * @property {boolean} isTimeBuffer - True = using time buffer
     * @property {boolean} is_visible - True = display on site
     * @property {string} location_choice - {business, client, custom}
     * @property {string} locationGuidList - list of business locations
     * @property {GUID} biToken - -
     * @property {number} numLocations - number of business locations the service is provided at
     * @property {string} paymentType - {online, in person, online and in person, deposit}
     * @property {boolean} photo_changed - main photo changed (add/replace/reorder)
     * @property {boolean} photo_empty - True = no image
     * @property {string} planType - {connection_intent, connect_success}
     * @property {boolean} price_empty - True = error raised
     * @property {string} price_selection - {fixed, varies, no charge}
     * @property {string} request_type - bookings approval {auto_approve, manually_approve}
     * @property {string} save_type - {create_new, save_changes}
     * @property {boolean} service_description_empty - False = short description empty
     * @property {string} service_id - service id
     * @property {boolean} service_name_empty - True = error raised
     * @property {boolean} staffFilled - True = error raised
     * @property {string} type - {single, multi}
     * @property {string} videoInfo - Null=not installed. for auto-save: "connection_intent"; If installed + regular save - "enabled" / "disabled"
     **/
    /**
     * Name: Bookings > Cancel service form editing. Evid: 461.
     * Event description: when a cancel is clicked by the user on the service form or the user leaves without saving.
    
     * accept_bookings_after_start - Type: bool. Desc: advanced settings // FALSE if toggle is off
     *
     * accept_online_bookings - Type: bool. Desc: advanced settings // FALSE if this a "no book flow"
     *
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: business id
     *
     * cancelType - Type: string. Desc: {service_form_cancel_button, leave_without_saving}
     *
     * duration_empty - Type: bool. Desc: custom duration, True = error raised
     *
     * form_source - Type: string. Desc: default/form_id
     *
     * galleryImageChanged - Type: bool. Desc: True = gallery photo changed (add/replace/reorder)
     *
     * galleryImageEmpty - Type: bool. Desc: True = no gallery image(s)
     *
     * headerImageChanged - Type: bool. Desc: True = header photo changed (add/replace/reorder)
     *
     * headerImageEmpty - Type: bool. Desc: True = no header image
     *
     * image_in_gallery_count - Type: numeric. Desc: number of images in gallery
     *
     * isFirstDraft - Type: bool. Desc: If the first draft of a non saved service
     *
     * isTimeBuffer - Type: bool. Desc: True = using time buffer
     *
     * is_visible - Type: bool. Desc: True = display on site
     *
     * location_choice - Type: string. Desc: {business, client, custom}
     *
     * locationGuidList - Type: string. Desc: list of business locations
     *
     * biToken - Type: guid. Desc: -
     *
     * numLocations - Type: numeric. Desc: number of business locations the service is provided at
     *
     * paymentType - Type: string. Desc: {online, in person, online and in person, deposit}
     *
     * photo_changed - Type: bool. Desc: main photo changed (add/replace/reorder)
     *
     * photo_empty - Type: bool. Desc: True = no image
     *
     * planType - Type: string. Desc: {connection_intent, connect_success}
     *
     * price_empty - Type: bool. Desc: True = error raised
     *
     * price_selection - Type: string. Desc: {fixed, varies, no charge}
     *
     * request_type - Type: string. Desc: bookings approval {auto_approve, manually_approve}
     *
     * save_type - Type: string. Desc: {create_new, save_changes}
     *
     * service_description_empty - Type: bool. Desc: False = short description empty
     *
     * service_id - Type: string. Desc: service id
     *
     * service_name_empty - Type: bool. Desc: True = error raised
     *
     * staffFilled - Type: bool. Desc: True = error raised
     *
     * type - Type: string. Desc: {single, multi}
     *
     * videoInfo - Type: string. Desc: Null=not installed. for auto-save: "connection_intent"; If installed + regular save - "enabled" / "disabled"
     * @param {bookingsCancelServiceFormEditingParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCancelServiceFormEditing = function(params) {
        return this.bi.log(__assign({
            evid: 461
        }, params));
    };
    /**
     * @typedef {Object} bookingsPricingPlanLoadParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {boolean} isEmptyState - Bookings service section empty state
     * @property {GUID} biToken - msid
     * @property {string} referralInfo - service_list_model = 'service_list_model',  paid_plans_bo = null or 'paid_plans_bo'
     **/
    /**
     * Name: Bookings > pricing plan load. Evid: 282.
    
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * isEmptyState - Type: bool. Desc: Bookings service section empty state
     *
     * biToken - Type: guid. Desc: msid
     *
     * referralInfo - Type: string. Desc: service_list_model = 'service_list_model',  paid_plans_bo = null or 'paid_plans_bo'
     * @param {bookingsPricingPlanLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPricingPlanLoad = function(params) {
        return this.bi.log(__assign({
            evid: 282
        }, params));
    };
    /**
     * @typedef {Object} bookingsRecurringSessionModalClickActionParams
     * @property {string} actionName - edit/cancel
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > recurring session modal > click action. Evid: 453.
     * Event description: user clicked edit/cancel from recurring sessions modal.
    
     * actionName - Type: string. Desc: edit/cancel
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsRecurringSessionModalClickActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRecurringSessionModalClickAction = function(params) {
        return this.bi.log(__assign({
            evid: 453
        }, params));
    };
    /**
     * @typedef {Object} bookingsTestsExposureEventParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {boolean} is_eligible - true/false
     * @property {GUID} biToken - -
     * @property {string} post_reg - postreg_category
     * @property {string} testName - test name
     * @property {string} triggerName - exposure point name
     * @property {GUID} uuid - uuid if it's user test, else null
     **/
    /**
     * Name: Bookings --> tests' exposure event. Evid: 333.
     * Event description: test exposure event for bookings tests.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * is_eligible - Type: bool. Desc: true/false
     *
     * biToken - Type: guid. Desc: -
     *
     * post_reg - Type: string. Desc: postreg_category
     *
     * testName - Type: string. Desc: test name
     *
     * triggerName - Type: string. Desc: exposure point name
     *
     * uuid - Type: guid. Desc: uuid if it's user test, else null
     * @param {bookingsTestsExposureEventParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsTestsExposureEvent = function(params) {
        return this.bi.log(__assign({
            evid: 333
        }, params));
    };
    /**
     * @typedef {Object} bookingsFilterCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} selection - {individual,group,personal,none}
     **/
    /**
     * Name: bookings > filter_calendar. Evid: 155.
     * Event description: NEED TO DELETE - 164 instead.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {individual,group,personal,none}
     * @param {bookingsFilterCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsFilterCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 155
        }, params));
    };
    /**
     * @typedef {Object} bookingsClickOnCalendarSettingsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} buttonMode - "extended", "collapsed"
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Click on calendar settings. Evid: 328.
     * Event description: entry point to the work hours from the calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * buttonMode - Type: string. Desc: "extended", "collapsed"
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsClickOnCalendarSettingsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClickOnCalendarSettings = function(params) {
        return this.bi.log(__assign({
            evid: 328
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormEditSeoPanelParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {boolean} success - null
     * @property {string} type - service type
     **/
    /**
     * Name: bookings > service form > open SEO panel. Evid: 446.
     * Event description: click on edit SEO settings from service form.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * success - Type: bool.
     *
     * type - Type: string. Desc: service type
     * @param {bookingsServiceFormEditSeoPanelParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormEditSeoPanel = function(params) {
        return this.bi.log(__assign({
            evid: 446
        }, params));
    };
    /**
     * @typedef {Object} bookingsCancellationEmailToggleParams
     * @property {string} action - {ON,OFF}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - bookings instance_id
     * @property {GUID} msid - msid
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > cancellation_email_toggle. Evid: 483.
     * Event description: turn on\off cancellation email toggle.
    
     * action - Type: string. Desc: {ON,OFF}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: bookings instance_id
     *
     * msid - Type: guid. Desc: msid
     *
     * biToken - Type: guid.
     * @param {bookingsCancellationEmailToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCancellationEmailToggle = function(params) {
        return this.bi.log(__assign({
            evid: 483
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetAddServiceClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} pagetype - {private/group/any}
     **/
    /**
     * Name: bookings > app_set.add_service.clicked. Evid: 165.
     * Event description: app settings --> + tab --> add group \ private service.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * pagetype - Type: string. Desc: {private/group/any}
     * @param {bookingsAppSetAddServiceClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetAddServiceClicked = function(params) {
        return this.bi.log(__assign({
            evid: 165
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffBeforeYouDeletePopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings > staff > before_you_delete_popup. Evid: 184.
     * Event description: opens when the user wants to delete an assigned staff- before you delete first reassign....
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsStaffBeforeYouDeletePopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffBeforeYouDeletePopup = function(params) {
        return this.bi.log(__assign({
            evid: 184
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetImageSelectionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - NOT RELEVANT
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services_list,calendar,booking_info,confirmation,thank_you}
     * @property {string} selection - {square,round,non}
     * @property {string} pagetype - {private/group}  NULL for widget
     **/
    /**
     * Name: Bookings > app_set.image_selection. Evid: 126.
     * Event description: image_selection - app settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: NOT RELEVANT
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you}
     *
     * selection - Type: string. Desc: {square,round,non}
     *
     * pagetype - Type: string. Desc: {private/group}  NULL for widget
     * @param {bookingsAppSetImageSelectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetImageSelection = function(params) {
        return this.bi.log(__assign({
            evid: 126
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgFindYourBusinessTypeInSearchBoxIntentParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg > find your business.type in search box intent. Evid: 432.
     * Event description: type in search box intent on RWG find your business screen.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgFindYourBusinessTypeInSearchBoxIntentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgFindYourBusinessTypeInSearchBoxIntent = function(params) {
        return this.bi.log(__assign({
            evid: 432
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetTabMenuClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isEmptyState - T/F
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - NULL for widget
     * @property {string} referralInfo - {NULL=app settings, widget, widget_footer, widget_sidebar}
     * @property {string} selection - {manage,layout,design,text,support,upgrade,services}
     * @property {string} pagetype - {private/group}, NULL for widget, service_page
     **/
    /**
     * Name: bookings > app_set.tab_menu_click. Evid: 112.
     * Event description: tab_menu_click- - app settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isEmptyState - Type: bool. Desc: T/F
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: NULL for widget
     *
     * referralInfo - Type: string. Desc: {NULL=app settings, widget, widget_footer, widget_sidebar}
     *
     * selection - Type: string. Desc: {manage,layout,design,text,support,upgrade,services}
     *
     * pagetype - Type: string. Desc: {private/group}, NULL for widget, service_page
     * @param {bookingsAppSetTabMenuClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetTabMenuClick = function(params) {
        return this.bi.log(__assign({
            evid: 112
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddServiceChooseTypeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} location - {service list, empty state}
     * @property {GUID} biToken - msid
     * @property {string} type - group\private\course
     **/
    /**
     * Name: bookings > add service >choose type. Evid: 418.
     * Event description: http://prntscr.com/g3syaf.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * location - Type: string. Desc: {service list, empty state}
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: group\private\course
     * @param {bookingsAddServiceChooseTypeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddServiceChooseType = function(params) {
        return this.bi.log(__assign({
            evid: 418
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormConnectPaymentEntryPointParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} entryPoint - modal_in_service_form
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > service form > connect payment entry point. Evid: 398.
     * Event description: user clicks save and cont from connect payment modal in service form.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * entryPoint - Type: string. Desc: modal_in_service_form
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsServiceFormConnectPaymentEntryPointParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormConnectPaymentEntryPoint = function(params) {
        return this.bi.log(__assign({
            evid: 398
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarAppointmentBeforeServicePopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > calendar>appointment before service popup. Evid: 188.
     * Event description: when  the "first create service" popup is opened- the user wants to book an appointment manually in the calendar before he created a service.
    http://prntscr.com/bp1izg.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsCalendarAppointmentBeforeServicePopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarAppointmentBeforeServicePopup = function(params) {
        return this.bi.log(__assign({
            evid: 188
        }, params));
    };
    /**
     * @typedef {Object} bookingsContactPanelFilterParams
     * @property {string} bookingsPlatform - new_bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} filter_name - payment_status,attendance
     * @property {GUID} biToken - msid
     * @property {string} selection - All. values separated by commas
     **/
    /**
     * Name: bookings > contact panel>filter. Evid: 378.
     * Event description: sent when a user uses filters in contact panel
    https://zpl.io/aNJ4Jr9.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * filter_name - Type: string. Desc: payment_status,attendance
     *
     * biToken - Type: guid. Desc: msid
     *
     * selection - Type: string. Desc: All. values separated by commas
     * @param {bookingsContactPanelFilterParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsContactPanelFilter = function(params) {
        return this.bi.log(__assign({
            evid: 378
        }, params));
    };
    /**
     * @typedef {Object} bookingsSyncCalendarLinkToResourceSuccessParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} linkedResourceId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     **/
    /**
     * Name: bookings > sync calendar > link_to_resource.success. Evid: 612.
     * Event description: link to a resource before sync request.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * linkedResourceId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     * @param {bookingsSyncCalendarLinkToResourceSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSyncCalendarLinkToResourceSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 612
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsMeTabCheckInToSessionClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs> me tab -> check in to session clicked. Evid: 253.
     * Event description: When user click on checkin button in the session screen.
    me tab -> click on session -> click on check in.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsMeTabCheckInToSessionClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsMeTabCheckInToSessionClicked = function(params) {
        return this.bi.log(__assign({
            evid: 253
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveAppointmentParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} clientNameFilled - T=filled
     * @property {boolean} email_checked - T\F
     * @property {boolean} emailFilled - T=filled
     * @property {string} end_date_type - null or 'exists'
     * @property {string} errorReason - if null- success
     * @property {string} linkCreationStatus - {null/generated/exists}
     * @property {boolean} locationFilled - true if business location was filled
     * @property {GUID} locationGuid - location id - if chose business location
     * @property {GUID} biToken - null
     * @property {boolean} note_added - T\F
     * @property {boolean} notifyChecked - TRUE if the user wishes to notify participants. Only when editing a session
     * @property {string} origin - place where action started
     * @property {boolean} paymentRequest - T if payment requested
     * @property {string} paymentType - {paid_plan} or null
     * @property {boolean} phoneFilled - T=filled
     * @property {string} repeatUnit - null or if class: {never, weekly, every 2 weeks, every 3 weeks, every 4 weeks}
     * @property {string} save_type - {create_appt, save_changes, create_and_add_more}
     * @property {string} serviceId - service_id
     * @property {boolean} staffFilled - T= selected
     * @property {boolean} success - T=appointment created
     * @property {boolean} titleFilled - T/F
     * @property {string} type - { appointment, group session, appointment_pending_approval,course_session,individualSession, one_app_blockSession, blockSession, course interval, group interval, appointment_pending_approval}
     **/
    /**
     * Name: bookings > save calendar instance. Evid: 138.
     * Event description: Sent when saving a session - also available from the app (browser name).
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * clientNameFilled - Type: bool. Desc: T=filled
     *
     * email_checked - Type: bool. Desc: T\F
     *
     * emailFilled - Type: bool. Desc: T=filled
     *
     * end_date_type - Type: string. Desc: null or 'exists'
     *
     * errorReason - Type: string. Desc: if null- success
     *
     * linkCreationStatus - Type: string. Desc: {null/generated/exists}
     *
     * locationFilled - Type: bool. Desc: true if business location was filled
     *
     * locationGuid - Type: guid. Desc: location id - if chose business location
     *
     * biToken - Type: guid.
     *
     * note_added - Type: bool. Desc: T\F
     *
     * notifyChecked - Type: bool. Desc: TRUE if the user wishes to notify participants. Only when editing a session
     *
     * origin - Type: string. Desc: place where action started
     *
     * paymentRequest - Type: bool. Desc: T if payment requested
     *
     * paymentType - Type: string. Desc: {paid_plan} or null
     *
     * phoneFilled - Type: bool. Desc: T=filled
     *
     * repeatUnit - Type: string. Desc: null or if class: {never, weekly, every 2 weeks, every 3 weeks, every 4 weeks}
     *
     * save_type - Type: string. Desc: {create_appt, save_changes, create_and_add_more}
     *
     * serviceId - Type: string. Desc: service_id
     *
     * staffFilled - Type: bool. Desc: T= selected
     *
     * success - Type: bool. Desc: T=appointment created
     *
     * titleFilled - Type: bool. Desc: T/F
     *
     * type - Type: string. Desc: { appointment, group session, appointment_pending_approval,course_session,individualSession, one_app_blockSession, blockSession, course interval, group interval, appointment_pending_approval}
     * @param {bookingsSaveAppointmentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveAppointment = function(params) {
        return this.bi.log(__assign({
            evid: 138
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppPerformanceTrackerWidgetSettingsSaveParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {number} defaultGoal - default weekly goal
     * @property {GUID} biToken - []
     * @property {boolean} removeSection - true if removed
     * @property {string} saveType - add/edit
     * @property {string} sectionLocationTab - home/other tab
     * @property {string} sectionTitle - the title he chose
     * @property {boolean} showHealthActivity - t/f
     * @property {string} showSectionTitleToggle - true/false
     * @property {boolean} showTotalSessions - true / false
     **/
    /**
     * Name: Bookings > OneApp > performance tracker widget settings > save. Evid: 493.
     * Event description: click save setting of performance tracker  widget.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * defaultGoal - Type: numeric. Desc: default weekly goal
     *
     * biToken - Type: guid. Desc: []
     *
     * removeSection - Type: bool. Desc: true if removed
     *
     * saveType - Type: string. Desc: add/edit
     *
     * sectionLocationTab - Type: string. Desc: home/other tab
     *
     * sectionTitle - Type: string. Desc: the title he chose
     *
     * showHealthActivity - Type: bool. Desc: t/f
     *
     * showSectionTitleToggle - Type: string. Desc: true/false
     *
     * showTotalSessions - Type: bool. Desc: true / false
     * @param {bookingsOneAppPerformanceTrackerWidgetSettingsSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppPerformanceTrackerWidgetSettingsSave = function(params) {
        return this.bi.log(__assign({
            evid: 493
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryPersonalInfoEditParams
     * @property {boolean} acquisitionChannelChanged - T=changed, F= not
     * @property {boolean} birthdayChanged - T=changed, F= not
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} cityChanged - T=changed, F= not
     * @property {boolean} emailChanged - T=changed, F= not
     * @property {boolean} firstNameChanged - T=changed, F= not
     * @property {boolean} lastNameChanged - T=changed, F= not
     * @property {GUID} biToken - null
     * @property {boolean} noteChanged - T=changed, F= not
     * @property {boolean} phoneChanged - T=changed, F= not
     * @property {string} section - {info, acquisition}
     * @property {boolean} zipChanged - T=changed, F= not
     **/
    /**
     * Name: bookings > Client History >  Personal Info < edit. Evid: 210.
     * Event description: sent when personal info (Client History) is changed successfully.
    
     * acquisitionChannelChanged - Type: bool. Desc: T=changed, F= not
     *
     * birthdayChanged - Type: bool. Desc: T=changed, F= not
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * cityChanged - Type: bool. Desc: T=changed, F= not
     *
     * emailChanged - Type: bool. Desc: T=changed, F= not
     *
     * firstNameChanged - Type: bool. Desc: T=changed, F= not
     *
     * lastNameChanged - Type: bool. Desc: T=changed, F= not
     *
     * biToken - Type: guid.
     *
     * noteChanged - Type: bool. Desc: T=changed, F= not
     *
     * phoneChanged - Type: bool. Desc: T=changed, F= not
     *
     * section - Type: string. Desc: {info, acquisition}
     *
     * zipChanged - Type: bool. Desc: T=changed, F= not
     * @param {bookingsClientHistoryPersonalInfoEditParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryPersonalInfoEdit = function(params) {
        return this.bi.log(__assign({
            evid: 210
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffGoToRolesPermissionsParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - null
     **/
    /**
     * Name: bookings > staff > grant permissions.click. Evid: 364.
     * Event description: grant permissions cta on Booking Staff Member paga.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid.
     * @param {bookingsStaffGoToRolesPermissionsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffGoToRolesPermissions = function(params) {
        return this.bi.log(__assign({
            evid: 364
        }, params));
    };
    /**
     * @typedef {Object} bookingsManageLocationModalClickOnCtaParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} location_choice - {business, client, custom}
     * @property {string} locationGuidList - list of the business location ids where the service is available
     * @property {GUID} biToken - []
     * @property {number} numLocations - the length of businessLocationsList
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: bookings > manage location modal - click on cta. Evid: 480.
     * Event description: Multilocation - sent when the user clicks on a cta in the 'Manage Locations' modal..
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * location_choice - Type: string. Desc: {business, client, custom}
     *
     * locationGuidList - Type: string. Desc: list of the business location ids where the service is available
     *
     * biToken - Type: guid. Desc: []
     *
     * numLocations - Type: numeric. Desc: the length of businessLocationsList
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsManageLocationModalClickOnCtaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsManageLocationModalClickOnCta = function(params) {
        return this.bi.log(__assign({
            evid: 480
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsBookingsGroupSessionsNewParticipantClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>Bookings group sessions -> New participant clicked. Evid: 248.
     * Event description: When user clicks on a contact to add as a participant in the contacts list.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsBookingsGroupSessionsNewParticipantClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsBookingsGroupSessionsNewParticipantClicked = function(params) {
        return this.bi.log(__assign({
            evid: 248
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarClearAllFiltersClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > calendar > clear all filters click. Evid: 423.
     * Event description: user clicks clear all filters in calendar.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsCalendarClearAllFiltersClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarClearAllFiltersClick = function(params) {
        return this.bi.log(__assign({
            evid: 423
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetLayoutTabChangePositionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} selection - {private first/ groups first}
     * @property {string} tabFrom - -
     * @property {string} tabTo - -
     **/
    /**
     * Name: bookings > app_set.navigation_cta.click. Evid: 168.
     * Event description: back click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {private first/ groups first}
     *
     * tabFrom - Type: string. Desc: -
     *
     * tabTo - Type: string. Desc: -
     * @param {bookingsAppSetLayoutTabChangePositionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetLayoutTabChangePosition = function(params) {
        return this.bi.log(__assign({
            evid: 168
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffRenameStaffSaveParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} type - service type
     **/
    /**
     * Name: bookings > staff > rename staff save. Evid: 426.
     * Event description: user renamed staff from schedule.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * type - Type: string. Desc: service type
     * @param {bookingsStaffRenameStaffSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffRenameStaffSave = function(params) {
        return this.bi.log(__assign({
            evid: 426
        }, params));
    };
    /**
     * @typedef {Object} bookingsBackOfficeOpenClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} buttonType - null
     * @property {GUID} msid - null
     * @property {GUID} biToken - null
     * @property {string} origin - {editor,myaccount,ADI...}
     **/
    /**
     * Name: Bookings > back_office_loaded. Evid: 238.
     * Event description: back office loaded. (BizManager Only - every time bookings page is loaded).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * buttonType - Type: string.
     *
     * msid - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: {editor,myaccount,ADI...}
     * @param {bookingsBackOfficeOpenClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBackOfficeOpenClick = function(params) {
        return this.bi.log(__assign({
            evid: 238
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgEditCllckParams
     * @property {string} bookingsPlatform - new_bookings_platform
     * @property {GUID} businessId - instance_id
     * @property {boolean} isValid - is valid for RWG {T/F}
     * @property {string} itemName - {name value}
     * @property {GUID} biToken - msid
     * @property {string} serviceId - service_id in case editing a service
     * @property {string} type - {business_category,business_name,business_address, service, using_an_existing_google_listing}
     **/
    /**
     * Name: bookings > rwg.edit.cllck. Evid: 377.
     * Event description: https://zpl.io/V0BOvel.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * isValid - Type: bool. Desc: is valid for RWG {T/F}
     *
     * itemName - Type: string. Desc: {name value}
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: service_id in case editing a service
     *
     * type - Type: string. Desc: {business_category,business_name,business_address, service, using_an_existing_google_listing}
     * @param {bookingsRwgEditCllckParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgEditCllck = function(params) {
        return this.bi.log(__assign({
            evid: 377
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsMeTabUncheckConfirmationClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {string} value - button value: cancel / uncheck
     **/
    /**
     * Name: Bookings>clubs> me tab -> uncheck -> confirmation clicked. Evid: 266.
     * Event description: When user clicks on a button in the confirmation modal presented after clicking on uncheck.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * value - Type: string. Desc: button value: cancel / uncheck
     * @param {bookingsClubsMeTabUncheckConfirmationClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsMeTabUncheckConfirmationClicked = function(params) {
        return this.bi.log(__assign({
            evid: 266
        }, params));
    };
    /**
     * @typedef {Object} bookingsWizardNextOrDoneParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} display_options - string containing all the options the users can choose from on the screen, separated by ','
     * @property {GUID} biToken - msid
     * @property {number} question - 1/2
     * @property {string} selection - 'appointment'/'multiple'/'course'/'class'/different categories
     **/
    /**
     * Name: Bookings > Wizard - next or done. Evid: 286.
     * Event description: Wizard - click on next stage after selection.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * display_options - Type: string. Desc: string containing all the options the users can choose from on the screen, separated by ','
     *
     * biToken - Type: guid. Desc: msid
     *
     * question - Type: numeric. Desc: 1/2
     *
     * selection - Type: string. Desc: 'appointment'/'multiple'/'course'/'class'/different categories
     * @param {bookingsWizardNextOrDoneParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWizardNextOrDone = function(params) {
        return this.bi.log(__assign({
            evid: 286
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormSectionActionParams
     * @property {string} action - {edit, duplicate, delete}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} field - {title,name,email,phone_number,address..}
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Booking Form>section action. Evid: 405.
     * Event description: click on any action for any section on the bookings form.
    
     * action - Type: string. Desc: {edit, duplicate, delete}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * field - Type: string. Desc: {title,name,email,phone_number,address..}
     *
     * biToken - Type: guid.
     * @param {bookingsBookingFormSectionActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormSectionAction = function(params) {
        return this.bi.log(__assign({
            evid: 405
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetPageTitleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} check_box - -
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services_list,calendar,booking_info,confirmation,thank_you}
     * @property {string} pagetype - {private/group}
     **/
    /**
     * Name: bookings > app_set.page title. Evid: 143.
     * Event description: page title - app settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * check_box - Type: bool. Desc: -
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you}
     *
     * pagetype - Type: string. Desc: {private/group}
     * @param {bookingsAppSetPageTitleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetPageTitle = function(params) {
        return this.bi.log(__assign({
            evid: 143
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveChangesPopupClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {boolean} email_checked - true=send email to participants
     * @property {GUID} biToken - -
     * @property {string} referralInfo - {edit_course,delete_course_past,delete_course_future, edit_group}
     **/
    /**
     * Name: bookings >save changes popup.click. Evid: 272.
     * Event description: bookings > save changes popup click http://prntscr.com/i1m8hw.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * email_checked - Type: bool. Desc: true=send email to participants
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string. Desc: {edit_course,delete_course_past,delete_course_future, edit_group}
     * @param {bookingsSaveChangesPopupClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveChangesPopupClick = function(params) {
        return this.bi.log(__assign({
            evid: 272
        }, params));
    };
    /**
     * @typedef {Object} bookingsDeletingIndividualVcAccountConfirmationParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} staff_id - staff_id
     **/
    /**
     * Name: Bookings > Deleting Individual VC Account > Confirmation. Evid: 470.
     * Event description: Sent when a user is confirming that he really want to delete an individual VC account.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * staff_id - Type: guid. Desc: staff_id
     * @param {bookingsDeletingIndividualVcAccountConfirmationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsDeletingIndividualVcAccountConfirmation = function(params) {
        return this.bi.log(__assign({
            evid: 470
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarFilterSessionsClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > calendar > filter sessions click. Evid: 422.
     * Event description: user clicks on 'filter session' CTA in calendar.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsCalendarFilterSessionsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarFilterSessionsClick = function(params) {
        return this.bi.log(__assign({
            evid: 422
        }, params));
    };
    /**
     * @typedef {Object} bookingsUpdateDefaultVcAccountConfirmationParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Update Default VC Account > Confirmation. Evid: 467.
     * Event description: Sent when a user is confirming that he really want to update the default account.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsUpdateDefaultVcAccountConfirmationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsUpdateDefaultVcAccountConfirmation = function(params) {
        return this.bi.log(__assign({
            evid: 467
        }, params));
    };
    /**
     * @typedef {Object} bookingsTodayCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > today_calendar. Evid: 122.
     * Event description: Today_calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsTodayCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsTodayCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 122
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgFindYourBusinessSelectBusinessFromSearchBoxParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg > find your business.select business from search box. Evid: 433.
     * Event description: select business from search box on  RWG find your business screen.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgFindYourBusinessSelectBusinessFromSearchBoxParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgFindYourBusinessSelectBusinessFromSearchBox = function(params) {
        return this.bi.log(__assign({
            evid: 433
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryPaymentsUpdateTransactionClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isChecked - true=mark as fully paid
     * @property {string} location - {side_panel, contact_page}
     * @property {GUID} biToken - null
     * @property {GUID} transactionId - -
     **/
    /**
     * Name: bookings > client history > payments > update transaction.click. Evid: 214.
     * Event description: update transaction click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isChecked - Type: bool. Desc: true=mark as fully paid
     *
     * location - Type: string. Desc: {side_panel, contact_page}
     *
     * biToken - Type: guid.
     *
     * transactionId - Type: guid. Desc: -
     * @param {bookingsClientHistoryPaymentsUpdateTransactionClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryPaymentsUpdateTransactionClick = function(params) {
        return this.bi.log(__assign({
            evid: 214
        }, params));
    };
    /**
     * @typedef {Object} bookingsWizardBackToBusinessTypeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} category - the business category when the user clicked
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Wizard - back to business type. Evid: 296.
     * Event description: Wizard - click back from question 1 to question 0 in order to re-select (change or no change) the business type.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * category - Type: string. Desc: the business category when the user clicked
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsWizardBackToBusinessTypeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWizardBackToBusinessType = function(params) {
        return this.bi.log(__assign({
            evid: 296
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffFilterByLocationParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > staff > filter by location. Evid: 443.
     * Event description: user filtered the hours by a location.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsStaffFilterByLocationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffFilterByLocation = function(params) {
        return this.bi.log(__assign({
            evid: 443
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsEmailsSaveEmailAddressSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} email_type - {ind,groups}
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > Business Options > Emails>save email address success. Evid: 243.
     * Event description: email address is saved successfully - http://prntscr.com/ek8a7b.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * email_type - Type: string. Desc: {ind,groups}
     *
     * biToken - Type: guid.
     * @param {bookingsBusinessOptionsEmailsSaveEmailAddressSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsEmailsSaveEmailAddressSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 243
        }, params));
    };
    /**
     * @typedef {Object} bookingsGetStartedPopupOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     **/
    /**
     * Name: bookings > get_started popup opened. Evid: 421.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     * @param {bookingsGetStartedPopupOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGetStartedPopupOpened = function(params) {
        return this.bi.log(__assign({
            evid: 421
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsOpenApplicationFormParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {stripe}
     **/
    /**
     * Name: bookings >payments>open_application_form. Evid: 191.
     * Event description: application form is open, for stripe: http://prntscr.com/byox97.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {stripe}
     * @param {bookingsPaymentsOpenApplicationFormParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsOpenApplicationForm = function(params) {
        return this.bi.log(__assign({
            evid: 191
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditor6thButtonCreateNewServiceClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {boolean} is_new - true if there are no services/no service was saved
     * @property {GUID} biToken - msid
     * @property {string} post_reg - post_reg
     **/
    /**
     * Name: Bookings > editor 6th button - create new service click. Evid: 310.
     * Event description: This event is sent when the "Create first service" is clicked --> https://www.screencast.com/t/Zigj4bq6.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * is_new - Type: bool. Desc: true if there are no services/no service was saved
     *
     * biToken - Type: guid. Desc: msid
     *
     * post_reg - Type: string. Desc: post_reg
     * @param {bookingsEditor6thButtonCreateNewServiceClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditor6thButtonCreateNewServiceClick = function(params) {
        return this.bi.log(__assign({
            evid: 310
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormTipsLinkClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Booking Form>tips link. click. Evid: 411.
     * Event description: http://prntscr.com/f7nwqm.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsBookingFormTipsLinkClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormTipsLinkClick = function(params) {
        return this.bi.log(__assign({
            evid: 411
        }, params));
    };
    /**
     * @typedef {Object} bookingsTooltipParams
     * @property {string} attendanceStatus - {Booked / Checked In / No Show}
     * @property {GUID} bookingId - -
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} contactId - appointment contact
     * @property {GUID} biToken - null
     * @property {string} paymentStatus - { deposit paid / fully paid / Not Paid /Paid in Person / Paid with a paid plan / Paid with invoice / fully paid / free}
     * @property {GUID} service_id - -
     * @property {string} session_id - null
     * @property {string} sessionTimeRange - time range
     * @property {DateTime} startTime - --
     * @property {DateTime} stopTime - --
     * @property {string} type - {class, course, blocked_time, appointment, appointment_pending_approval, google_item, ical_item}
     **/
    /**
     * Name: bookings > tooltip. Evid: 130.
     * Event description: clicking on an event in the calendar that opens the tooltip.
    
     * attendanceStatus - Type: string. Desc: {Booked / Checked In / No Show}
     *
     * bookingId - Type: guid. Desc: -
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * contactId - Type: string. Desc: appointment contact
     *
     * biToken - Type: guid.
     *
     * paymentStatus - Type: string. Desc: { deposit paid / fully paid / Not Paid /Paid in Person / Paid with a paid plan / Paid with invoice / fully paid / free}
     *
     * service_id - Type: guid. Desc: -
     *
     * session_id - Type: string.
     *
     * sessionTimeRange - Type: string. Desc: time range
     *
     * startTime - Type: datetime. Desc: --
     *
     * stopTime - Type: datetime. Desc: --
     *
     * type - Type: string. Desc: {class, course, blocked_time, appointment, appointment_pending_approval, google_item, ical_item}
     * @param {bookingsTooltipParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsTooltip = function(params) {
        return this.bi.log(__assign({
            evid: 130
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingsListFilterClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} buttonName - null
     * @property {string} filterName - status, payment
     * @property {boolean} isFilter - null
     * @property {boolean} isOpened - T for filter click
     * @property {GUID} biToken - []
     * @property {string} pageName - bookings list
     **/
    /**
     * Name: bookings > bookings list > item click. Evid: 435.
     * Event description: user clicks on 'filter' in bookings list.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * buttonName - Type: string.
     *
     * filterName - Type: string. Desc: status, payment
     *
     * isFilter - Type: bool.
     *
     * isOpened - Type: bool. Desc: T for filter click
     *
     * biToken - Type: guid. Desc: []
     *
     * pageName - Type: string. Desc: bookings list
     * @param {bookingsBookingsListFilterClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingsListFilterClick = function(params) {
        return this.bi.log(__assign({
            evid: 435
        }, params));
    };
    /**
     * @typedef {Object} bookingsBizManagerHintParams
     * @property {string} action - {appear, cta}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} referralInfo - {email,payment}
     **/
    /**
     * Name: bookings >biz manager hint. Evid: 416.
     * Event description: http://prntscr.com/ftuklp.
    
     * action - Type: string. Desc: {appear, cta}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * referralInfo - Type: string. Desc: {email,payment}
     * @param {bookingsBizManagerHintParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBizManagerHint = function(params) {
        return this.bi.log(__assign({
            evid: 416
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormSaveSectionCheckParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} descriptionHidden - -
     * @property {string} field - {title,name,email,phone_number,address..}
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Booking Form>save section. check. Evid: 406.
     * Event description: http://prntscr.com/f7mwgt.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * descriptionHidden - Type: bool. Desc: -
     *
     * field - Type: string. Desc: {title,name,email,phone_number,address..}
     *
     * biToken - Type: guid.
     * @param {bookingsBookingFormSaveSectionCheckParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormSaveSectionCheck = function(params) {
        return this.bi.log(__assign({
            evid: 406
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryAppointmentHistorySaveNoteSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {number} length - dont send!!
     * @property {GUID} biToken - null
     * @property {string} saveType - {new, edit}
     * @property {number} textLength - note's length - number of characters
     **/
    /**
     * Name: bookings > Client History >  Appointment History >  save note success. Evid: 212.
     * Event description: save successfully note on Client History >  Appointment History >  add.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * length - Type: numeric. Desc: dont send!!
     *
     * biToken - Type: guid.
     *
     * saveType - Type: string. Desc: {new, edit}
     *
     * textLength - Type: numeric. Desc: note's length - number of characters
     * @param {bookingsClientHistoryAppointmentHistorySaveNoteSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryAppointmentHistorySaveNoteSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 212
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffWorkHoursModalOpenParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - where the modal was opened staff page / service form
     * @property {string} type - service type, null if modal was opened on staff page
     **/
    /**
     * Name: bookings > staff > work hours modal open. Evid: 441.
     * Event description: work hours modal wwas opened.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: where the modal was opened staff page / service form
     *
     * type - Type: string. Desc: service type, null if modal was opened on staff page
     * @param {bookingsStaffWorkHoursModalOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffWorkHoursModalOpen = function(params) {
        return this.bi.log(__assign({
            evid: 441
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormAddNewBusinessLocationClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {boolean} isEmptyState - true if no locations exist
     * @property {GUID} biToken - []
     * @property {string} origin - where the CTA was clicked (service form,staff page)
     * @property {string} type - class/course
     **/
    /**
     * Name: bookings > add new business location click. Evid: 439.
     * Event description: click on CTA to add business location within service form (open OS modal).
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * isEmptyState - Type: bool. Desc: true if no locations exist
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: where the CTA was clicked (service form,staff page)
     *
     * type - Type: string. Desc: class/course
     * @param {bookingsServiceFormAddNewBusinessLocationClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormAddNewBusinessLocationClick = function(params) {
        return this.bi.log(__assign({
            evid: 439
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffViewWorkHoursParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - service form
     * @property {string} type - service type
     **/
    /**
     * Name: bookings > service > view service availability. Evid: 448.
     * Event description: click to view service availability.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: service form
     *
     * type - Type: string. Desc: service type
     * @param {bookingsStaffViewWorkHoursParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffViewWorkHours = function(params) {
        return this.bi.log(__assign({
            evid: 448
        }, params));
    };
    /**
     * @typedef {Object} bookingsPackagesAddNewPackageParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {empty_state, packages_list}
     **/
    /**
     * Name: bookings >packages>  add new package. Evid: 203.
     * Event description: Add new package.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {empty_state, packages_list}
     * @param {bookingsPackagesAddNewPackageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPackagesAddNewPackage = function(params) {
        return this.bi.log(__assign({
            evid: 203
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarSyncCalendarsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {sidebar, omni-setup}
     **/
    /**
     * Name: bookings > calendar > sync calendars. click. Evid: 222.
     * Event description: Update 30.8.21 - instead of sending this we are sending 16:362 with page_name = Calendar
    link_name = manage_external_calendar_connections_modal.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {sidebar, omni-setup}
     * @param {bookingsCalendarSyncCalendarsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarSyncCalendarsClick = function(params) {
        return this.bi.log(__assign({
            evid: 222
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsEmailsSaveEmailTemplateParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} email_type - {confirmation,reminder,cancellation}
     * @property {boolean} linkExists - whether the vc link exists in the mail
     * @property {GUID} biToken - null
     * @property {string} type - not sent
     **/
    /**
     * Name: bookings > Business Options > Emails>save email template. Evid: 240.
     * Event description: http://prntscr.com/ehx8nn.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * email_type - Type: string. Desc: {confirmation,reminder,cancellation}
     *
     * linkExists - Type: bool. Desc: whether the vc link exists in the mail
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: not sent
     * @param {bookingsBusinessOptionsEmailsSaveEmailTemplateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsEmailsSaveEmailTemplate = function(params) {
        return this.bi.log(__assign({
            evid: 240
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneappDownloadLinkParams
     * @property {string} bookingsPlatform - {new_bookings_platform}
     * @property {GUID} businessId - -
     * @property {string} location - {service_list_banner}
     * @property {GUID} biToken - -
     **/
    /**
     * Name: Bookings > oneapp download link. Evid: 355.
     * Event description: OneApp download link to install the app from a bookings source.
    
     * bookingsPlatform - Type: string. Desc: {new_bookings_platform}
     *
     * businessId - Type: guid. Desc: -
     *
     * location - Type: string. Desc: {service_list_banner}
     *
     * biToken - Type: guid. Desc: -
     * @param {bookingsOneappDownloadLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneappDownloadLink = function(params) {
        return this.bi.log(__assign({
            evid: 355
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsCheckInOutClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {string} value - check in / check out
     **/
    /**
     * Name: Bookings --> group sessions --> Check in/out clicked. Evid: 246.
     * Event description: When user clicks on add to session button after choosing a participant..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * value - Type: string. Desc: check in / check out
     * @param {bookingsClubsGroupSessionsCheckInOutClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsCheckInOutClicked = function(params) {
        return this.bi.log(__assign({
            evid: 246
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarClearSingleParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - [
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > calendar > clear single. Evid: 427.
     * Event description: user cleared a single filter from calendar.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: [
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsCalendarClearSingleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarClearSingle = function(params) {
        return this.bi.log(__assign({
            evid: 427
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarFilterApptByTypeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isChecked - T/F
     * @property {GUID} biToken - null
     * @property {string} serviceFiltered - {private \ group \ personal \ non-working}
     **/
    /**
     * Name: bookings > calendar>filter_appt_by_type. Evid: 164.
     * Event description: sent when a user filter a service type in the calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isChecked - Type: bool. Desc: T/F
     *
     * biToken - Type: guid.
     *
     * serviceFiltered - Type: string. Desc: {private \ group \ personal \ non-working}
     * @param {bookingsCalendarFilterApptByTypeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarFilterApptByType = function(params) {
        return this.bi.log(__assign({
            evid: 164
        }, params));
    };
    /**
     * @typedef {Object} bookingsEmailServiceTypeTabClick159Params
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} email_type - {confirmation,reminder}
     * @property {GUID} biToken - null
     * @property {string} tabClicked - {ind,group}
     **/
    /**
     * Name: bookings > email_service_type_tab_click. Evid: 159.
     * Event description: click on ind\groups tab in the confirmation email or reminder email section in business info                     https://jira.wixpress.com/browse/SCHED-1942?filter=-2.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * email_type - Type: string. Desc: {confirmation,reminder}
     *
     * biToken - Type: guid.
     *
     * tabClicked - Type: string. Desc: {ind,group}
     * @param {bookingsEmailServiceTypeTabClick159Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEmailServiceTypeTabClick159 = function(params) {
        return this.bi.log(__assign({
            evid: 159
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffWorkHoursModalSaveParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - service form/staff page
     **/
    /**
     * Name: bookings > staff > work hours modal save. Evid: 442.
     * Event description: work hours modal saved.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: service form/staff page
     * @param {bookingsStaffWorkHoursModalSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffWorkHoursModalSave = function(params) {
        return this.bi.log(__assign({
            evid: 442
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} got_it_pop - {none,google_connect,calendar_view }
     * @property {GUID} biToken - null
     * @property {string} referal_info - {calendar,calendar_pop}
     **/
    /**
     * Name: bookings > connect_calendar. Evid: 119.
     * Event description: NOT ACTIVE - since there's no owner sync.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * got_it_pop - Type: string. Desc: {none,google_connect,calendar_view }
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {calendar,calendar_pop}
     * @param {bookingsConnectCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 119
        }, params));
    };
    /**
     * @typedef {Object} customServiceFormModalParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} selection - {create,edit}
     * @property {string} type - group\private\course\none
     **/
    /**
     * Name: custom service form entry point. Evid: 395.
     * Event description: event records selection on 'intake form' modal: save or cancel..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * selection - Type: string. Desc: {create,edit}
     *
     * type - Type: string. Desc: group\private\course\none
     * @param {customServiceFormModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.customServiceFormModal = function(params) {
        return this.bi.log(__assign({
            evid: 395
        }, params));
    };
    /**
     * @typedef {Object} bookingsOpenDatesCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > open Dates Calendar. Evid: 120.
     * Event description: Open Dates Calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsOpenDatesCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOpenDatesCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 120
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffDisconnectStaffCalendarSuccessFailureParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {boolean} isResourceLinkedToUserInSession - is the resource is unsyncing himself
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     * @property {boolean} isSuccess - --
     **/
    /**
     * Name: bookings > staff > disconnect staff calendar.success/failure. Evid: 627.
     * Event description: link to a resource before sync request.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * isResourceLinkedToUserInSession - Type: bool. Desc: is the resource is unsyncing himself
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * isSuccess - Type: bool. Desc: --
     * @param {bookingsStaffDisconnectStaffCalendarSuccessFailureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffDisconnectStaffCalendarSuccessFailure = function(params) {
        return this.bi.log(__assign({
            evid: 627
        }, params));
    };
    /**
     * @typedef {Object} bookingsLeftNeviagationParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referal_info - Not correct
     * @property {string} selection - {services, calendar, business info,I am stuck,preview,feedback,staff}
     **/
    /**
     * Name: bookings > left neviagation. Evid: 129.
     * Event description: left menu click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: Not correct
     *
     * selection - Type: string. Desc: {services, calendar, business info,I am stuck,preview,feedback,staff}
     * @param {bookingsLeftNeviagationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsLeftNeviagation = function(params) {
        return this.bi.log(__assign({
            evid: 129
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicePageEditAccountParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} current_platform - {zoom/custom link}
     * @property {boolean} is_default - true if service is currently connected to default account
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - {group/course/individual}
     **/
    /**
     * Name: Bookings > Service Page > Edit VC Account. Evid: 463.
     * Event description: Sent when a user tries to edit VC link from the service page.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * current_platform - Type: string. Desc: {zoom/custom link}
     *
     * is_default - Type: bool. Desc: true if service is currently connected to default account
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: {group/course/individual}
     * @param {bookingsServicePageEditAccountParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicePageEditAccount = function(params) {
        return this.bi.log(__assign({
            evid: 463
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppSettingsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} component_type - {availability,cancellations_policy, staff, display_settings, roles&permissions}
     * @property {GUID} biToken - f1903b54-7c75-4730-b664-909b9926a7b8
     **/
    /**
     * Name: Bookings --> OneApp --> Settings --> click. Evid: 294.
     * Event description: click on one of the settings components.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * component_type - Type: string. Desc: {availability,cancellations_policy, staff, display_settings, roles&permissions}
     *
     * biToken - Type: guid. Desc: f1903b54-7c75-4730-b664-909b9926a7b8
     * @param {bookingsOneAppSettingsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppSettingsClick = function(params) {
        return this.bi.log(__assign({
            evid: 294
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffManagePermissionsClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - -
     **/
    /**
     * Name: bookings > staff > manage permissions.click. Evid: 496.
     * Event description: go to roles & permissions page.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: -
     * @param {bookingsStaffManagePermissionsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffManagePermissionsClick = function(params) {
        return this.bi.log(__assign({
            evid: 496
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditorHealthWaiverAddedToSiteParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} source - add_panel/6th button
     **/
    /**
     * Name: bookings > editor > health waiver added to site. Evid: 400.
     * Event description: health waiver was added to site in editor via bookings related elements.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * source - Type: string. Desc: add_panel/6th button
     * @param {bookingsEditorHealthWaiverAddedToSiteParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditorHealthWaiverAddedToSite = function(params) {
        return this.bi.log(__assign({
            evid: 400
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetButtonStyleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services_list,calendar,booking_info,confirmation,thank_you}
     * @property {string} referralInfo - {NULL= app settings, widget, service_page}
     * @property {string} selection - {frame_colored_background, frame, no_frame}
     **/
    /**
     * Name: bookings > app_set. button style. Evid: 197.
     * Event description: only in widget.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you}
     *
     * referralInfo - Type: string. Desc: {NULL= app settings, widget, service_page}
     *
     * selection - Type: string. Desc: {frame_colored_background, frame, no_frame}
     * @param {bookingsAppSetButtonStyleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetButtonStyle = function(params) {
        return this.bi.log(__assign({
            evid: 197
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectExternalCalendarPremiumModalClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - null
     * @property {GUID} biToken - -
     * @property {string} selection - null
     **/
    /**
     * Name: bookings > connect external calendar > premium modal.click. Evid: 640.
     * Event description: Users must be premium users in order to connect external calendar.
    
    If a user tries to connect his own calendar or to recommend a staff member to do so - this "premium first" modal will pop
    the modal will pop from:
    *calendar
    *Staff page
    
    Link to Zeplin: https://zpl.io/b65jMMK.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid. Desc: -
     *
     * selection - Type: string.
     * @param {bookingsConnectExternalCalendarPremiumModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectExternalCalendarPremiumModalClick = function(params) {
        return this.bi.log(__assign({
            evid: 640
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditPanelOpenParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} panelName - {private_service_list...}
     * @property {boolean} isMainPanel - True= main panel False= sub panel
     **/
    /**
     * Name: bookings >edit_panel.open. Evid: 175.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * panelName - Type: string. Desc: {private_service_list...}
     *
     * isMainPanel - Type: bool. Desc: True= main panel False= sub panel
     * @param {bookingsEditPanelOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditPanelOpen = function(params) {
        return this.bi.log(__assign({
            evid: 175
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffWorkingHoursChangesArenTSavedPopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > staff>working hours changes aren't saved popup. Evid: 187.
     * Event description: changes in the staff info won't be saved - error notification
    http://prntscr.com/br1nub EVENT CANCELLED.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsStaffWorkingHoursChangesArenTSavedPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffWorkingHoursChangesArenTSavedPopup = function(params) {
        return this.bi.log(__assign({
            evid: 187
        }, params));
    };
    /**
     * @typedef {Object} bookingsWizardLoadedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {boolean} isEmptyState - if was opened from services page empty state
     * @property {GUID} biToken - msid
     * @property {string} origin - {services empty state, add button, calendar, empty_category, category_hover, 6th button..}
     * @property {string} page_name - what page was the wizard opened on (for cases of AB testing) - 'service type'/'vertical type'...
     **/
    /**
     * Name: Bookings > Wizard loaded. Evid: 285.
     * Event description: Wizard loaded in the BO.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * isEmptyState - Type: bool. Desc: if was opened from services page empty state
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {services empty state, add button, calendar, empty_category, category_hover, 6th button..}
     *
     * page_name - Type: string. Desc: what page was the wizard opened on (for cases of AB testing) - 'service type'/'vertical type'...
     * @param {bookingsWizardLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWizardLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 285
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileAppsAgendaCtaClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} selection - {add_session, location, date_picker_drag,course_more_actions}
     **/
    /**
     * Name: bookings > mobile apps > agenda > cta.click. Evid: 616.
     * Event description: user clicks cta.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * selection - Type: string. Desc: {add_session, location, date_picker_drag,course_more_actions}
     * @param {bookingsMobileAppsAgendaCtaClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileAppsAgendaCtaClick = function(params) {
        return this.bi.log(__assign({
            evid: 616
        }, params));
    };
    /**
     * @typedef {Object} bookingsClickToAddAParticipantToTheWaitingListParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} location - {upper_button,lower_button}
     * @property {GUID} biToken - msid
     * @property {string} origin - session card/member card
     * @property {number} participants - number of existing participants in wait list
     * @property {string} serviceId - -
     * @property {string} triggerBy - Owner/Member
     * @property {string} value - Add/Remove
     **/
    /**
     * Name: Bookings > Click to Add/Remove a participant to/from the Waiting list. Evid: 354.
     * Event description: Click on "Add to Waitlist". Screenshot: https://www.screencast.com/t/ikfPEx6ksV
    From Dec-2019, add/remove to/from waitlist with value = add/remove.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * location - Type: string. Desc: {upper_button,lower_button}
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: session card/member card
     *
     * participants - Type: numeric. Desc: number of existing participants in wait list
     *
     * serviceId - Type: string. Desc: -
     *
     * triggerBy - Type: string. Desc: Owner/Member
     *
     * value - Type: string. Desc: Add/Remove
     * @param {bookingsClickToAddAParticipantToTheWaitingListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClickToAddAParticipantToTheWaitingList = function(params) {
        return this.bi.log(__assign({
            evid: 354
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceInfoMoreDetailsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} selection - {more_details, less_details}
     * @property {string} type - group\private\course\none
     **/
    /**
     * Name: bookings > service info > advanced. Evid: 270.
     * Event description: http://prntscr.com/hh8lyn.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * selection - Type: string. Desc: {more_details, less_details}
     *
     * type - Type: string. Desc: group\private\course\none
     * @param {bookingsServiceInfoMoreDetailsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceInfoMoreDetails = function(params) {
        return this.bi.log(__assign({
            evid: 270
        }, params));
    };
    /**
     * @typedef {Object} bookingsEmailsRemindersClickOnBannerParams
     * @property {string} bannerName - {fitness_video,business info,roles & permissions}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - staff page / any other page
     * @property {string} selection - -
     **/
    /**
     * Name: Bookings > Dashboard > Click on banner. Evid: 323.
     * Event description: clicking on a banner inside Bookings BO.
    
     * bannerName - Type: string. Desc: {fitness_video,business info,roles & permissions}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: staff page / any other page
     *
     * selection - Type: string. Desc: -
     * @param {bookingsEmailsRemindersClickOnBannerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEmailsRemindersClickOnBanner = function(params) {
        return this.bi.log(__assign({
            evid: 323
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffRenameStaffClickParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} type - class/appointment
     **/
    /**
     * Name: bookings > staff > rename staff click. Evid: 425.
     * Event description: click rename staff from new class schedule or appointment.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * type - Type: string. Desc: class/appointment
     * @param {bookingsStaffRenameStaffClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffRenameStaffClick = function(params) {
        return this.bi.log(__assign({
            evid: 425
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormClickedBookingsLearnMoreParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} referal_info - {service_form,choose_vc,default_account}
     * @property {GUID} service_id - {service_id}
     * @property {string} type - {ind,class,course}
     **/
    /**
     * Name: bookings -> service form -> clicked vc learn more. Evid: 456.
     * Event description: click on 'learn more' in the connect VC.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * referal_info - Type: string. Desc: {service_form,choose_vc,default_account}
     *
     * service_id - Type: guid. Desc: {service_id}
     *
     * type - Type: string. Desc: {ind,class,course}
     * @param {bookingsServiceFormClickedBookingsLearnMoreParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormClickedBookingsLearnMore = function(params) {
        return this.bi.log(__assign({
            evid: 456
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicePageDeleteOverrideLinkParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} current_platform - {zoom/custom link}
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings > Service Page > Delete Override Link. Evid: 464.
     * Event description: Sent when a user tries to edit VC link from the service page.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * current_platform - Type: string. Desc: {zoom/custom link}
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsServicePageDeleteOverrideLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicePageDeleteOverrideLink = function(params) {
        return this.bi.log(__assign({
            evid: 464
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileAppsOpenPendingApprovalSessionsListParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - --
     * @property {GUID} biToken - null
     * @property {number} numOfPendingBookings - -
     **/
    /**
     * Name: Bookings --> Mobile Apps --> open pending approval sessions list. Evid: 609.
    
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: --
     *
     * biToken - Type: guid.
     *
     * numOfPendingBookings - Type: numeric. Desc: -
     * @param {bookingsMobileAppsOpenPendingApprovalSessionsListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileAppsOpenPendingApprovalSessionsList = function(params) {
        return this.bi.log(__assign({
            evid: 609
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffConnectDisconnectStaffCalendarClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isConnect - T= connect click, invite to sync is sent. F= disconnect click, unsync.
     * @property {boolean} isResend - T=resend
     * @property {boolean} isResourceLinkedToUserInSession - is the resource is unsyncing himself
     * @property {GUID} biToken - null
     * @property {string} referralInfo - more_actions/staff_card
     * @property {GUID} staffId - -
     **/
    /**
     * Name: bookings > staff >connect\disconnect staff calendar click. Evid: 180.
     * Event description: click on the connect\disconnect staff calendar on the staff tab.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isConnect - Type: bool. Desc: T= connect click, invite to sync is sent. F= disconnect click, unsync.
     *
     * isResend - Type: bool. Desc: T=resend
     *
     * isResourceLinkedToUserInSession - Type: bool. Desc: is the resource is unsyncing himself
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: more_actions/staff_card
     *
     * staffId - Type: guid. Desc: -
     * @param {bookingsStaffConnectDisconnectStaffCalendarClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffConnectDisconnectStaffCalendarClick = function(params) {
        return this.bi.log(__assign({
            evid: 180
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgConnectClickParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     **/
    /**
     * Name: bookings > rwg.connect.click. Evid: 383.
     * Event description: Click on accept in RWG consent modal.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     * @param {bookingsRwgConnectClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgConnectClick = function(params) {
        return this.bi.log(__assign({
            evid: 383
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddNewStaffClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} referral_info - {private_service,group_service,staff_list,staff_tab_button}
     **/
    /**
     * Name: bookings >add_new_staff.click. Evid: 170.
     * Event description: click on 'add new staff member' in the services pages or in the staff tab.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {private_service,group_service,staff_list,staff_tab_button}
     * @param {bookingsAddNewStaffClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddNewStaffClick = function(params) {
        return this.bi.log(__assign({
            evid: 170
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarClickOnCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {DateTime} endTime - only when origin = "time", selected time frame end time
     * @property {GUID} biToken - msid
     * @property {string} origin - where did the user click? ("time"/"add_new"/"agenda")
     * @property {DateTime} startTime - only when origin = "time", selected time frame start time
     **/
    /**
     * Name: Bookings > Calendar > Click on calendar / + button. Evid: 284.
     * Event description: clicking on the calendar / + button and seeing the pop-up. Also being sent from OneApp (look in the browser name).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * endTime - Type: datetime. Desc: only when origin = "time", selected time frame end time
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: where did the user click? ("time"/"add_new"/"agenda")
     *
     * startTime - Type: datetime. Desc: only when origin = "time", selected time frame start time
     * @param {bookingsCalendarClickOnCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarClickOnCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 284
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetAppSetServiceInfoShowHideParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} info - {service_name, duration, type...}
     * @property {boolean} isShow - T=show F=hide
     * @property {GUID} biToken - null
     * @property {string} serviceid - -
     **/
    /**
     * Name: bookings >widget.app set. service info show\hide. Evid: 202.
     * Event description: bookings >widget.app set. service info show\hide.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * info - Type: string. Desc: {service_name, duration, type...}
     *
     * isShow - Type: bool. Desc: T=show F=hide
     *
     * biToken - Type: guid.
     *
     * serviceid - Type: string. Desc: -
     * @param {bookingsWidgetAppSetServiceInfoShowHideParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetAppSetServiceInfoShowHide = function(params) {
        return this.bi.log(__assign({
            evid: 202
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsClickOnAddParticipantParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} buttonType - Type of button clicked ( 'participant list plus’ / 'empty state participant list'/empty state waitlist)
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {number} participants - number of booked participants in list
     * @property {GUID} serviceId - null
     * @property {string} sessionId - -
     **/
    /**
     * Name: Bookings --> group sessions --> Click on add participants. Evid: 251.
     * Event description: When user clicks on add participant to a group session within the bookings manager..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * buttonType - Type: string. Desc: Type of button clicked ( 'participant list plus’ / 'empty state participant list'/empty state waitlist)
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * participants - Type: numeric. Desc: number of booked participants in list
     *
     * serviceId - Type: guid.
     *
     * sessionId - Type: string. Desc: -
     * @param {bookingsClubsGroupSessionsClickOnAddParticipantParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsClickOnAddParticipant = function(params) {
        return this.bi.log(__assign({
            evid: 251
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddParticipantParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {boolean} notifyChecked - confirmation email to participant checked?
     * @property {boolean} success - TRUE when added succefully
     **/
    /**
     * Name: bookings > add_participant. Evid: 154.
     * Event description: NEED TO DELETE - 163 instead.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * notifyChecked - Type: bool. Desc: confirmation email to participant checked?
     *
     * success - Type: bool. Desc: TRUE when added succefully
     * @param {bookingsAddParticipantParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddParticipant = function(params) {
        return this.bi.log(__assign({
            evid: 154
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppAppointmentSessionClickParams
     * @property {number} availableCapacity - --
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPendingApproval - T/F for pending approval service
     * @property {GUID} biToken - null
     * @property {string} origin - Calendar / Upcoming
     * @property {string} serviceId - serviceId
     * @property {GUID} sessionId - --
     * @property {string} type - service type - {individual,groups}
     **/
    /**
     * Name: Bookings --> OneApp --> Session click. Evid: 301.
     * Event description: Owner clicks to view of the service details -
    http://prntscr.com/dcrddz.
    
     * availableCapacity - Type: numeric. Desc: --
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPendingApproval - Type: bool. Desc: T/F for pending approval service
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: Calendar / Upcoming
     *
     * serviceId - Type: string. Desc: serviceId
     *
     * sessionId - Type: guid. Desc: --
     *
     * type - Type: string. Desc: service type - {individual,groups}
     * @param {bookingsOneAppAppointmentSessionClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppAppointmentSessionClick = function(params) {
        return this.bi.log(__assign({
            evid: 301
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingsSettingsBusinessNotificationsSaveClickParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} toggle_value - {ON,OFF}
     **/
    /**
     * Name: bookings > bookings settings > business notifications > save.click. Evid: 385.
     * Event description: turn on\off business notifications toggle
    https://zpl.io/bJJmAw9.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * toggle_value - Type: string. Desc: {ON,OFF}
     * @param {bookingsBookingsSettingsBusinessNotificationsSaveClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingsSettingsBusinessNotificationsSaveClick = function(params) {
        return this.bi.log(__assign({
            evid: 385
        }, params));
    };
    /**
     * @typedef {Object} bookingsEmailServiceTypeTabClick367Params
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} sms_type - {reminder}
     * @property {string} tabClicked - The name of the tab clicked
     **/
    /**
     * Name: bookings > sms_service_type_tab_click. Evid: 367.
     * Event description: click on ind\groups\class tab in the sms reminderin business info
    https://zpl.io/VqX9GXZ.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * sms_type - Type: string. Desc: {reminder}
     *
     * tabClicked - Type: string. Desc: The name of the tab clicked
     * @param {bookingsEmailServiceTypeTabClick367Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEmailServiceTypeTabClick367 = function(params) {
        return this.bi.log(__assign({
            evid: 367
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormFieldOpenedClosedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isOpened - T=open, F=close
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Booking Form>field. opened\closed. Evid: 408.
     * Event description: expand\collapse field.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isOpened - Type: bool. Desc: T=open, F=close
     *
     * biToken - Type: guid.
     * @param {bookingsBookingFormFieldOpenedClosedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormFieldOpenedClosed = function(params) {
        return this.bi.log(__assign({
            evid: 408
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusInfoSaveSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {boolean} business_hours_added - Did the user clicked to add an additional business hours
     * @property {number} businessHoursCounter - number of business hours sections chosen
     * @property {GUID} businessId - null
     * @property {number} cancellationLeadTime - cancellation_lead_time
     * @property {boolean} cancellation_policy_empty - -
     * @property {boolean} confirmation_email_empty - -
     * @property {number} leadTime - lead time hours amount
     * @property {string} location_choice - {on_going,address}
     * @property {GUID} biToken - null
     * @property {boolean} other_empty - -
     * @property {boolean} reminderEmailOn - TRUE\FALSE
     * @property {number} timeInterval - time interval
     **/
    /**
     * Name: bookings > bus_info_save_success. Evid: 102.
     * Event description: send when a user finish filling business info details and save successfully.
    
     * bookingsPlatform - Type: string.
     *
     * business_hours_added - Type: bool. Desc: Did the user clicked to add an additional business hours
     *
     * businessHoursCounter - Type: numeric. Desc: number of business hours sections chosen
     *
     * businessId - Type: guid.
     *
     * cancellationLeadTime - Type: numeric. Desc: cancellation_lead_time
     *
     * cancellation_policy_empty - Type: bool. Desc: -
     *
     * confirmation_email_empty - Type: bool. Desc: -
     *
     * leadTime - Type: numeric. Desc: lead time hours amount
     *
     * location_choice - Type: string. Desc: {on_going,address}
     *
     * biToken - Type: guid.
     *
     * other_empty - Type: bool. Desc: -
     *
     * reminderEmailOn - Type: bool. Desc: TRUE\FALSE
     *
     * timeInterval - Type: numeric. Desc: time interval
     * @param {bookingsBusInfoSaveSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusInfoSaveSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 102
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientVmRequestOwnerParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} requestedArea - requested vm {owner,settings,widget}
     **/
    /**
     * Name: bookings >client vm request - owner. Evid: 221.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * requestedArea - Type: string. Desc: requested vm {owner,settings,widget}
     * @param {bookingsClientVmRequestOwnerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientVmRequestOwner = function(params) {
        return this.bi.log(__assign({
            evid: 221
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChooseParticipantFromTheListParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> OneApp --> Choose participant from the list. Evid: 292.
     * Event description: After choosing a time slot - choose a participant to add.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsOneAppChooseParticipantFromTheListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChooseParticipantFromTheList = function(params) {
        return this.bi.log(__assign({
            evid: 292
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppBroadcast100PeopleConnectGmailParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {number} numParticipants - how many participants will receive the message
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings --> OneApp --> Broadcast > 100 people - connect Gmail. Evid: 344.
     * Event description: Click on "Connect Gmail" in order to broadcast to > 100 people. https://www.screencast.com/t/xTaagdjgz6E  --> Chat event.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * numParticipants - Type: numeric. Desc: how many participants will receive the message
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsOneAppBroadcast100PeopleConnectGmailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppBroadcast100PeopleConnectGmail = function(params) {
        return this.bi.log(__assign({
            evid: 344
        }, params));
    };
    /**
     * @typedef {Object} bookingsVcLinkSendEmailToParticipantsParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > VC Link > Send Email to Participants. Evid: 471.
     * Event description: Sent when a user confirms send email to participants.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsVcLinkSendEmailToParticipantsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsVcLinkSendEmailToParticipants = function(params) {
        return this.bi.log(__assign({
            evid: 471
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnSelectMembershipMembershipFlowParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} planType - membership/package
     * @property {string} serviceId - serviceId
     * @property {string} type - service type - {individual, groups}
     **/
    /**
     * Name: bookings-->one app--> Click on "select" membership (membership flow). Evid: 307.
     * Event description: Click on "select" membership after selecting to buy a membership.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * planType - Type: string. Desc: membership/package
     *
     * serviceId - Type: string. Desc: serviceId
     *
     * type - Type: string. Desc: service type - {individual, groups}
     * @param {bookingsOneAppClickOnSelectMembershipMembershipFlowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnSelectMembershipMembershipFlow = function(params) {
        return this.bi.log(__assign({
            evid: 307
        }, params));
    };
    /**
     * @typedef {Object} bookingsEmailAllParticipantsClickParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - participant_list
     * @property {string} serviceId - -
     * @property {string} sessionId - session_id
     * @property {string} type - class/course
     **/
    /**
     * Name: Bookings > email all participants.click. Evid: 391.
     * Event description: Click on "Email All Participants" in "participant list" page
    https://zpl.io/VDEeJNJ.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: participant_list
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: session_id
     *
     * type - Type: string. Desc: class/course
     * @param {bookingsEmailAllParticipantsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEmailAllParticipantsClick = function(params) {
        return this.bi.log(__assign({
            evid: 391
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnBuyMembershipMembershipFlowParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} serviceId - serviceId
     * @property {GUID} sessionId - --
     * @property {string} type - service type - {individual, groups}
     **/
    /**
     * Name: bookings-->one app--> click on "buy membership" (membership flow). Evid: 306.
     * Event description: Click on "Buy membership" (from the service page where a plan is connected).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: serviceId
     *
     * sessionId - Type: guid. Desc: --
     *
     * type - Type: string. Desc: service type - {individual, groups}
     * @param {bookingsOneAppClickOnBuyMembershipMembershipFlowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnBuyMembershipMembershipFlow = function(params) {
        return this.bi.log(__assign({
            evid: 306
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffSaveStaffSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {number} businessHoursCounter - number of business hours sections chosen
     * @property {GUID} businessId - null
     * @property {boolean} emailFilled - -
     * @property {GUID} biToken - null
     * @property {string} origin - OneApp/Desktop
     * @property {boolean} phoneFilled - -
     * @property {boolean} photoAttached - -
     * @property {string} saveType - {create_new, save_changes}
     * @property {GUID} staffId - staff_id
     * @property {string} vcState - default/personal_zoom/personal_vc/none
     **/
    /**
     * Name: bookings >staff>save_staff_success. Evid: 173.
     * Event description: save staff successfully in the staff tab - new\existing.
    
     * bookingsPlatform - Type: string.
     *
     * businessHoursCounter - Type: numeric. Desc: number of business hours sections chosen
     *
     * businessId - Type: guid.
     *
     * emailFilled - Type: bool. Desc: -
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: OneApp/Desktop
     *
     * phoneFilled - Type: bool. Desc: -
     *
     * photoAttached - Type: bool. Desc: -
     *
     * saveType - Type: string. Desc: {create_new, save_changes}
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * vcState - Type: string. Desc: default/personal_zoom/personal_vc/none
     * @param {bookingsStaffSaveStaffSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffSaveStaffSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 173
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChoosePaymentOwnerSideParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} pageType - {in_person, paid_plan}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type {single/class}
     **/
    /**
     * Name: Bookings --> OneApp --> Choose payment  (owner side). Evid: 319.
     * Event description: In case of paid plans, the user can choose the desired payment method for the member if they have a membership/package available  https://www.screencast.com/t/w6BNxQZh.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageType - Type: string. Desc: {in_person, paid_plan}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type {single/class}
     * @param {bookingsOneAppChoosePaymentOwnerSideParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChoosePaymentOwnerSide = function(params) {
        return this.bi.log(__assign({
            evid: 319
        }, params));
    };
    /**
     * @typedef {Object} bookingsCopyWaiverFormLinkParams
     * @property {string} bookingsPlatform - bookings platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - click origin
     **/
    /**
     * Name: Bookings --> copy waiver form link. Evid: 618.
     * Event description: Copy form link under waiver and forms.
    
     * bookingsPlatform - Type: string. Desc: bookings platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: click origin
     * @param {bookingsCopyWaiverFormLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCopyWaiverFormLink = function(params) {
        return this.bi.log(__assign({
            evid: 618
        }, params));
    };
    /**
     * @typedef {Object} bookingsSettingsPanelAddYourInfoManageClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - businessId
     * @property {GUID} biToken - biToken
     **/
    /**
     * Name: bookings > settings panel >add your info >  take me there. Evid: 276.
     * Event description: clicking on the CTA "Take me there" in 'add your info' section in setting panel (editor).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: businessId
     *
     * biToken - Type: guid. Desc: biToken
     * @param {bookingsSettingsPanelAddYourInfoManageClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSettingsPanelAddYourInfoManageClicked = function(params) {
        return this.bi.log(__assign({
            evid: 276
        }, params));
    };
    /**
     * @typedef {Object} bookingsMoveDatesCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referal_info - {backward,forward}
     **/
    /**
     * Name: bookings > move Dates_calendar. Evid: 121.
     * Event description: Move Dates_calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {backward,forward}
     * @param {bookingsMoveDatesCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMoveDatesCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 121
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffSyncStaffPopupSendVerificationEmailParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isResend - T=resend
     * @property {GUID} biToken - null
     * @property {string} referral_info - {staff, calendar}
     * @property {GUID} staffId - -
     * @property {boolean} validEmail - T= email is valid
     **/
    /**
     * Name: bookings > staff >sync staff>popup>send verification email. Evid: 189.
     * Event description: click on the send in the popup that openes after you click on sync staff. http://prntscr.com/br3rwv.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isResend - Type: bool. Desc: T=resend
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {staff, calendar}
     *
     * staffId - Type: guid. Desc: -
     *
     * validEmail - Type: bool. Desc: T= email is valid
     * @param {bookingsStaffSyncStaffPopupSendVerificationEmailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffSyncStaffPopupSendVerificationEmail = function(params) {
        return this.bi.log(__assign({
            evid: 189
        }, params));
    };
    /**
     * @typedef {Object} bookingsShowHideStaffParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - instance_id
     * @property {string} info - {profile_picture,description,...}
     * @property {boolean} isShow - 0 for hide / 1 for show
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > show_hide_staff. Evid: 382.
     * Event description: show_hide_staff in staff widget.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * info - Type: string. Desc: {profile_picture,description,...}
     *
     * isShow - Type: bool. Desc: 0 for hide / 1 for show
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsShowHideStaffParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsShowHideStaff = function(params) {
        return this.bi.log(__assign({
            evid: 382
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsGetPaidClickedParams
     * @property {GUID} bookingId - null
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} contactId - null
     * @property {GUID} location_guid - location_id value
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {paypal,stripe} NULL=paypal
     * @property {number} price - null
     * @property {string} referralInfo - -
     * @property {string} scheduleId - schedule_id value
     * @property {GUID} serviceId - null
     * @property {string} sessionId - session_id value
     * @property {string} staffId - staff_id value
     * @property {string} timeslot - timeslot
     * @property {string} serviceType - null
     **/
    /**
     * Name: bookings > payments>get_paid.clicked. Evid: 145.
     * Event description: paypal_exp_get_paid.clicked.
    
     * bookingId - Type: guid.
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * contactId - Type: guid.
     *
     * location_guid - Type: guid. Desc: location_id value
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe} NULL=paypal
     *
     * price - Type: numeric.
     *
     * referralInfo - Type: string. Desc: -
     *
     * scheduleId - Type: string. Desc: schedule_id value
     *
     * serviceId - Type: guid.
     *
     * sessionId - Type: string. Desc: session_id value
     *
     * staffId - Type: string. Desc: staff_id value
     *
     * timeslot - Type: string. Desc: timeslot
     *
     * serviceType - Type: string.
     * @param {bookingsPaymentsGetPaidClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsGetPaidClicked = function(params) {
        return this.bi.log(__assign({
            evid: 145
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsRemoveParticipantClicked256Params
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {string} value - "cancel" / "remove" (value on the button)
     **/
    /**
     * Name: Bookings>clubs>group sessions -> remove participant clicked. Evid: 256.
     * Event description: When user clicks on a "remove from session button".
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * value - Type: string. Desc: "cancel" / "remove" (value on the button)
     * @param {bookingsClubsGroupSessionsRemoveParticipantClicked256Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsRemoveParticipantClicked256 = function(params) {
        return this.bi.log(__assign({
            evid: 256
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetMemberLoginToggleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {boolean} toggle - T= activated\enable, F=disable
     **/
    /**
     * Name: bookings > app_set > member login. toggle. Evid: 229.
     * Event description: app_set.member area. checkbox (instead of toggle) http://prntscr.com/de2t2n.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * toggle - Type: bool. Desc: T= activated\enable, F=disable
     * @param {bookingsAppSetMemberLoginToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetMemberLoginToggle = function(params) {
        return this.bi.log(__assign({
            evid: 229
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditor6thButtonSetupWidgetClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} button_name - {set work hours, set email, connect}
     * @property {string} category - postreg category
     * @property {GUID} biToken - msid
     * @property {string} post_reg - post reg category
     * @property {string} viewmode - {DESKTOP}
     **/
    /**
     * Name: Bookings --> editor 6th button - panel button click. Evid: 299.
     * Event description: click on one of the CTAs in the bookings 6th button panel in the editor.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * button_name - Type: string. Desc: {set work hours, set email, connect}
     *
     * category - Type: string. Desc: postreg category
     *
     * biToken - Type: guid. Desc: msid
     *
     * post_reg - Type: string. Desc: post reg category
     *
     * viewmode - Type: string. Desc: {DESKTOP}
     * @param {bookingsEditor6thButtonSetupWidgetClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditor6thButtonSetupWidgetClick = function(params) {
        return this.bi.log(__assign({
            evid: 299
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsMeTabUncheckClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs> me tab -> uncheck clicked. Evid: 265.
     * Event description: When user click on uncheck in the session screen (after he checked himself to that sessions).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsMeTabUncheckClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsMeTabUncheckClicked = function(params) {
        return this.bi.log(__assign({
            evid: 265
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddRemoveParticipantToFromWaitingListParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - session card/member card/waitlist
     * @property {string} serviceId - -
     * @property {string} triggerBy - Owner/Member
     * @property {string} value - Add/Remove
     **/
    /**
     * Name: Bookings > Add/Remove participant to/from Waiting list. Evid: 346.
     * Event description: Add/Remove participant to/from Waiting list - triggered by the owner or member.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: session card/member card/waitlist
     *
     * serviceId - Type: string. Desc: -
     *
     * triggerBy - Type: string. Desc: Owner/Member
     *
     * value - Type: string. Desc: Add/Remove
     * @param {bookingsAddRemoveParticipantToFromWaitingListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddRemoveParticipantToFromWaitingList = function(params) {
        return this.bi.log(__assign({
            evid: 346
        }, params));
    };
    /**
     * @typedef {Object} bookingsHelpParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} location - {left menu, top right}
     * @property {GUID} biToken - null
     * @property {string} referal_info - {get_started,add_service,services_list, calendar, business_info,confirm_page,help_1,help_2}
     * @property {string} referral_info - -
     **/
    /**
     * Name: bookings > help. Evid: 104.
     * Event description: Help.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * location - Type: string. Desc: {left menu, top right}
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {get_started,add_service,services_list, calendar, business_info,confirm_page,help_1,help_2}
     *
     * referral_info - Type: string. Desc: -
     * @param {bookingsHelpParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsHelp = function(params) {
        return this.bi.log(__assign({
            evid: 104
        }, params));
    };
    /**
     * @typedef {Object} bookingsTimeZoneDiscrepancyParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} contact_id - optional
     * @property {string} local_date_time - -
     * @property {GUID} biToken - null
     * @property {string} source - Server/BO
     * @property {string} timezone - timezone on which there was a discrepancy
     * @property {number} timestamp - epoch time
     **/
    /**
     * Name: Bookings > TimeZone Discrepancy. Evid: 1014.
     * Event description: This event is reported when there is a discrepancy between the business timezone and the user/uou timezone when calendar loads or when uou tries to book.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * contact_id - Type: string. Desc: optional
     *
     * local_date_time - Type: string. Desc: -
     *
     * biToken - Type: guid.
     *
     * source - Type: string. Desc: Server/BO
     *
     * timezone - Type: string. Desc: timezone on which there was a discrepancy
     *
     * timestamp - Type: numeric. Desc: epoch time
     * @param {bookingsTimeZoneDiscrepancyParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsTimeZoneDiscrepancy = function(params) {
        return this.bi.log(__assign({
            evid: 1014
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppPackagesPopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} referralInfo - {modify plan}
     **/
    /**
     * Name: Bookings  --> OneApp --> packages popup. Evid: 320.
     * Event description: https://www.screencast.com/t/UuqhF8LKdd2e.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string. Desc: {modify plan}
     * @param {bookingsOneAppPackagesPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppPackagesPopup = function(params) {
        return this.bi.log(__assign({
            evid: 320
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceSaveSuccessParams
     * @property {boolean} accept_online_bookings - FALSE only if this a "no book flow"
     * @property {boolean} additionalParticipant - null
     * @property {number} additionalParticipantMax - null
     * @property {string} bookingsPlatform - null
     * @property {number} businessHoursCounter - null
     * @property {GUID} businessId - null
     * @property {string} category - null
     * @property {GUID} clubId - oneapp
     * @property {string} connected_plans - null if none. M for membership, P for package, B for both
     * @property {string} currency - null
     * @property {number} depositAmount - null
     * @property {boolean} hour_empty - null
     * @property {boolean} infoEveryAdditionalParticipant - null
     * @property {boolean} is_member - TRUE only if membership pricing is chosen AND  a connected plan is chosen as well
     * @property {string} location_choice - null
     * @property {boolean} minute_empty - null
     * @property {GUID} biToken - null
     * @property {number} participants - null
     * @property {string} paymentMethod - {OFFLINE/ONLINE/ALL}
     * @property {boolean} photo_empty - null
     * @property {string} plan_type - "Priced as": {single_session / membership}
     * @property {number} price - Multiplied by 10000
     * @property {string} price_selection - null
     * @property {boolean} price_text_empty - null
     * @property {string} save_type - {create_new, save_changes}
     * @property {boolean} service_description_empty - null
     * @property {string} service_id - null
     * @property {number} staffSelected - null
     * @property {boolean} tagLineFilled - http://prntscr.com/f541qa
     * @property {number} timeBuffer - null
     * @property {string} type - service type: {INDIVIDUAL/GROUP/COURSE}
     * @property {string} videoInfo - Null=not installed. If do - "enabled" / "disabled"
     * @property {number} weeklyFrequency - service every X weeks
     **/
    /**
     * Name: Bookings > Save Service Success. Evid: 103.
     * Event description: sent when a user save a service successfully.
    
     * accept_online_bookings - Type: bool. Desc: FALSE only if this a "no book flow"
     *
     * additionalParticipant - Type: bool.
     *
     * additionalParticipantMax - Type: numeric.
     *
     * bookingsPlatform - Type: string.
     *
     * businessHoursCounter - Type: numeric.
     *
     * businessId - Type: guid.
     *
     * category - Type: string.
     *
     * clubId - Type: guid. Desc: oneapp
     *
     * connected_plans - Type: string. Desc: null if none. M for membership, P for package, B for both
     *
     * currency - Type: string.
     *
     * depositAmount - Type: numeric.
     *
     * hour_empty - Type: bool.
     *
     * infoEveryAdditionalParticipant - Type: bool.
     *
     * is_member - Type: bool. Desc: TRUE only if membership pricing is chosen AND  a connected plan is chosen as well
     *
     * location_choice - Type: string.
     *
     * minute_empty - Type: bool.
     *
     * biToken - Type: guid.
     *
     * participants - Type: numeric.
     *
     * paymentMethod - Type: string. Desc: {OFFLINE/ONLINE/ALL}
     *
     * photo_empty - Type: bool.
     *
     * plan_type - Type: string. Desc: "Priced as": {single_session / membership}
     *
     * price - Type: numeric. Desc: Multiplied by 10000
     *
     * price_selection - Type: string.
     *
     * price_text_empty - Type: bool.
     *
     * save_type - Type: string. Desc: {create_new, save_changes}
     *
     * service_description_empty - Type: bool.
     *
     * service_id - Type: string.
     *
     * staffSelected - Type: numeric.
     *
     * tagLineFilled - Type: bool. Desc: http://prntscr.com/f541qa
     *
     * timeBuffer - Type: numeric.
     *
     * type - Type: string. Desc: service type: {INDIVIDUAL/GROUP/COURSE}
     *
     * videoInfo - Type: string. Desc: Null=not installed. If do - "enabled" / "disabled"
     *
     * weeklyFrequency - Type: numeric. Desc: service every X weeks
     * @param {bookingsServiceSaveSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceSaveSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 103
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditor6thButtonClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId -
     * @property {string} category - irellevant
     * @property {string} editor_working_mode - i.e. preview
     * @property {GUID} esi - esi
     * @property {GUID} biToken -
     * @property {string} post_reg - post_reg category
     * @property {string} state - {post_provision, marketing_state_add_now, marketing_state_get_started}
     * @property {number} ts - ts
     **/
    /**
     * Name: Bookings --> Editor 6th button click. Evid: 181.
     * Event description: click on bookings 6th button in the editor.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * category - Type: string. Desc: irellevant
     *
     * editor_working_mode - Type: string. Desc: i.e. preview
     *
     * esi - Type: guid. Desc: esi
     *
     * biToken - Type: guid.
     *
     * post_reg - Type: string. Desc: post_reg category
     *
     * state - Type: string. Desc: {post_provision, marketing_state_add_now, marketing_state_get_started}
     *
     * ts - Type: numeric. Desc: ts
     * @param {bookingsEditor6thButtonClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditor6thButtonClick = function(params) {
        return this.bi.log(__assign({
            evid: 181
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddNewServiceClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} location - {bottom_link, button, one_app_services_tab, calendar, empty_category, category_hover, empty_state}
     * @property {GUID} biToken - null
     * @property {number} num_of_service - number of services that are currently available in the service list
     * @property {string} type - not relevant!!!!
     **/
    /**
     * Name: Bookings > add new service click. Evid: 115.
     * Event description: Click on add a new service (either from web or the mobile app).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * location - Type: string. Desc: {bottom_link, button, one_app_services_tab, calendar, empty_category, category_hover, empty_state}
     *
     * biToken - Type: guid.
     *
     * num_of_service - Type: numeric. Desc: number of services that are currently available in the service list
     *
     * type - Type: string. Desc: not relevant!!!!
     * @param {bookingsAddNewServiceClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddNewServiceClick = function(params) {
        return this.bi.log(__assign({
            evid: 115
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffOpenWorkHoursModalParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - staff page/service form - where the modal was opened from
     **/
    /**
     * Name: bookings > staff > click edit to open work hours modal. Evid: 438.
     * Event description: staff work hours modal was opened.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: staff page/service form - where the modal was opened from
     * @param {bookingsStaffOpenWorkHoursModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffOpenWorkHoursModal = function(params) {
        return this.bi.log(__assign({
            evid: 438
        }, params));
    };
    /**
     * @typedef {Object} bookingsSelectBusinessDaysParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} choice - NOT SENT- ignore
     * @property {boolean} isChecked - T/F
     * @property {GUID} biToken - null
     * @property {string} referral_info - {business_info, group_service, staff}
     **/
    /**
     * Name: bookings > select_business_days. Evid: 108.
     * Event description: bookings > add_business_days in the groups page \ business info \  staff member page.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * choice - Type: string. Desc: NOT SENT- ignore
     *
     * isChecked - Type: bool. Desc: T/F
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {business_info, group_service, staff}
     * @param {bookingsSelectBusinessDaysParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSelectBusinessDays = function(params) {
        return this.bi.log(__assign({
            evid: 108
        }, params));
    };
    /**
     * @typedef {Object} bookingsCancelParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} categoryId - -
     * @property {string} location - {up, bottom,null}
     * @property {GUID} biToken - null
     * @property {string} referal_info - {add_service,confirm_delete_service,appt_edit,appt_create,blocked_edit,blocked_delete service_wizard, one_app_edit_service, one_app_create_service, popup_service_with_paid_plan_intent,rwg_disconnect,rwg_consent, business notifications}
     * @property {string} service_id - -
     **/
    /**
     * Name: bookings > cancel. Evid: 114.
     * Event description: Cancel.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * categoryId - Type: guid. Desc: -
     *
     * location - Type: string. Desc: {up, bottom,null}
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {add_service,confirm_delete_service,appt_edit,appt_create,blocked_edit,blocked_delete service_wizard, one_app_edit_service, one_app_create_service, popup_service_with_paid_plan_intent,rwg_disconnect,rwg_consent, business notifications}
     *
     * service_id - Type: string. Desc: -
     * @param {bookingsCancelParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCancel = function(params) {
        return this.bi.log(__assign({
            evid: 114
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceTabLoadedParams
     * @property {string} bannerName - send banner name if not null
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {boolean} isEmptyState - only on offerings/services tab: T=services empty state
     * @property {GUID} biToken - msid
     * @property {string} origin - {editor,dashboard,onboarding...}
     **/
    /**
     * Name: Bookings > service_tab_loaded. Evid: 279.
     * Event description: Service tab loaded in Bookings tabs - dashboard (for each load).
    
     * bannerName - Type: string. Desc: send banner name if not null
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * isEmptyState - Type: bool. Desc: only on offerings/services tab: T=services empty state
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {editor,dashboard,onboarding...}
     * @param {bookingsServiceTabLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceTabLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 279
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsClickSessionDetailsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business id
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> click session details. Evid: 267.
     * Event description: When user clicks to see the session details (purple header).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business id
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsClickSessionDetailsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsClickSessionDetails = function(params) {
        return this.bi.log(__assign({
            evid: 267
        }, params));
    };
    /**
     * @typedef {Object} bookingsDisconnectCalendarParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > rwg_disconnect.click. Evid: 124.
     * Event description: https://zpl.io/2vpxg8j.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsDisconnectCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsDisconnectCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 124
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsCheckInOutAllClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - msid
     * @property {string} value - check in / check out
     **/
    /**
     * Name: Bookings --> group sessions --> Check in/out ALL clicked. Evid: 269.
     * Event description: When a user clicks on check in all button.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid. Desc: msid
     *
     * value - Type: string. Desc: check in / check out
     * @param {bookingsClubsGroupSessionsCheckInOutAllClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsCheckInOutAllClicked = function(params) {
        return this.bi.log(__assign({
            evid: 269
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesKeyboardClickOnViewAllServicesParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> services keyboard --> click on "view all services". Evid: 335.
     * Event description: when clicking on the "view all" button (with the dots) in the keboard.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsServicesKeyboardClickOnViewAllServicesParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesKeyboardClickOnViewAllServices = function(params) {
        return this.bi.log(__assign({
            evid: 335
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormAddFieldChooseTypeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} type - {email,phone_number,date, custom}
     **/
    /**
     * Name: bookings >Booking Form>add field. choose type. Evid: 410.
     * Event description: http://prntscr.com/f7nv8w.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: {email,phone_number,date, custom}
     * @param {bookingsBookingFormAddFieldChooseTypeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormAddFieldChooseType = function(params) {
        return this.bi.log(__assign({
            evid: 410
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveServiceXParams
     * @property {boolean} accept_bookings_after_start - advanced settings // FALSE if toggle is off
     * @property {boolean} accept_online_bookings - advanced settings // FALSE if this a "no book flow"
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - business id
     * @property {string} connected_payment_methods - json of connected payment methods
     * @property {boolean} duration_empty - custom duration, True = error raised
     * @property {string} form_source - default/form_id
     * @property {boolean} galleryImageChanged - True = gallery images changed (add/replace/reorder)
     * @property {boolean} galleryImageEmpty - True = no gallery images
     * @property {boolean} headerImageChanged - True = header photo changed (add/replace/reorder)
     * @property {boolean} headerImageEmpty - True = no header image
     * @property {number} image_in_gallery_count - number of images in gallery
     * @property {boolean} isTimeBuffer - True = using time buffer
     * @property {boolean} is_visible - True = display on site
     * @property {string} location_choice - {business, client, custom}
     * @property {string} locationGuidList - list of business locations
     * @property {GUID} biToken - -
     * @property {number} numLocations - number of business locations the service is provided at
     * @property {string} paymentType - {online, in person, online and in person, deposit}
     * @property {boolean} photo_changed - True = main photo changed (add/replace/reorder)
     * @property {boolean} photo_empty - True = no image
     * @property {string} planType - {connection_intent, connect_success}
     * @property {string} premiumStatus - {Website/Business/None}
     * @property {boolean} price_empty - True = error raised
     * @property {string} price_selection - {fixed, varies, no charge}
     * @property {string} request_type - bookings approval {auto_approve, manually_approve}
     * @property {string} saveOrigin - {save_click, auto_save,save_and_duplicate,schedule_session,edit_form}
     * @property {string} save_type - {create_new, save_changes}
     * @property {boolean} service_description_empty - False = short description empty
     * @property {string} service_id - service id
     * @property {boolean} service_name_empty - True = error raised
     * @property {boolean} staffFilled - True = error raised
     * @property {boolean} success - True = save success, False = fail
     * @property {string} type - {single, multi}
     * @property {string} videoInfo - Null=not installed. for auto-save: "connection_intent"; If installed + regular save - "enabled" / "disabled"
     **/
    /**
     * Name: Bookings > Save Service X. Evid: 358.
     * Event description: when a service is saved - the unified form for all services type (service X).
    
     * accept_bookings_after_start - Type: bool. Desc: advanced settings // FALSE if toggle is off
     *
     * accept_online_bookings - Type: bool. Desc: advanced settings // FALSE if this a "no book flow"
     *
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: business id
     *
     * connected_payment_methods - Type: string. Desc: json of connected payment methods
     *
     * duration_empty - Type: bool. Desc: custom duration, True = error raised
     *
     * form_source - Type: string. Desc: default/form_id
     *
     * galleryImageChanged - Type: bool. Desc: True = gallery images changed (add/replace/reorder)
     *
     * galleryImageEmpty - Type: bool. Desc: True = no gallery images
     *
     * headerImageChanged - Type: bool. Desc: True = header photo changed (add/replace/reorder)
     *
     * headerImageEmpty - Type: bool. Desc: True = no header image
     *
     * image_in_gallery_count - Type: numeric. Desc: number of images in gallery
     *
     * isTimeBuffer - Type: bool. Desc: True = using time buffer
     *
     * is_visible - Type: bool. Desc: True = display on site
     *
     * location_choice - Type: string. Desc: {business, client, custom}
     *
     * locationGuidList - Type: string. Desc: list of business locations
     *
     * biToken - Type: guid. Desc: -
     *
     * numLocations - Type: numeric. Desc: number of business locations the service is provided at
     *
     * paymentType - Type: string. Desc: {online, in person, online and in person, deposit}
     *
     * photo_changed - Type: bool. Desc: True = main photo changed (add/replace/reorder)
     *
     * photo_empty - Type: bool. Desc: True = no image
     *
     * planType - Type: string. Desc: {connection_intent, connect_success}
     *
     * premiumStatus - Type: string. Desc: {Website/Business/None}
     *
     * price_empty - Type: bool. Desc: True = error raised
     *
     * price_selection - Type: string. Desc: {fixed, varies, no charge}
     *
     * request_type - Type: string. Desc: bookings approval {auto_approve, manually_approve}
     *
     * saveOrigin - Type: string. Desc: {save_click, auto_save,save_and_duplicate,schedule_session,edit_form}
     *
     * save_type - Type: string. Desc: {create_new, save_changes}
     *
     * service_description_empty - Type: bool. Desc: False = short description empty
     *
     * service_id - Type: string. Desc: service id
     *
     * service_name_empty - Type: bool. Desc: True = error raised
     *
     * staffFilled - Type: bool. Desc: True = error raised
     *
     * success - Type: bool. Desc: True = save success, False = fail
     *
     * type - Type: string. Desc: {single, multi}
     *
     * videoInfo - Type: string. Desc: Null=not installed. for auto-save: "connection_intent"; If installed + regular save - "enabled" / "disabled"
     * @param {bookingsSaveServiceXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveServiceX = function(params) {
        return this.bi.log(__assign({
            evid: 358
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffWidgetChangeLinkParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {string} fieldName - service_list, service
     * @property {boolean} isOpened - TRUE for expend, FALSE for collapse
     * @property {GUID} biToken - msid
     * @property {string} serviceId - in case action is on service
     **/
    /**
     * Name: bookings > RWG > expand/collapse. Evid: 380.
     * Event description: RWG expand/collapse service list/illegible service.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * fieldName - Type: string. Desc: service_list, service
     *
     * isOpened - Type: bool. Desc: TRUE for expend, FALSE for collapse
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: in case action is on service
     * @param {bookingsStaffWidgetChangeLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffWidgetChangeLink = function(params) {
        return this.bi.log(__assign({
            evid: 380
        }, params));
    };
    /**
    * @typedef {Object} bookingsShowHideParams
    * @property {string} bookingsPlatform - null
    * @property {GUID} businessId - null
    * @property {boolean} isPendingApproval - T for pending approval service
    * @property {boolean} isPreview - null
    * @property {GUID} biToken - null
    * @property {string} referral_info - {additional_settings bus info,
     additional_settings groups,
     confirmation_mail,
    category,
     service_list,
     service_availability_service_list,
     calendar_pending_approval_individual_session}
    * @property {string} service - {group, course, individual}
    * @property {string} type - {hide,show}
    **/
    /**
     * Name: bookings > show_hide. Evid: 110.
     * Event description: show_hide.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPendingApproval - Type: bool. Desc: T for pending approval service
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {additional_settings bus info,
     additional_settings groups,
     confirmation_mail,
    category,
     service_list,
     service_availability_service_list,
     calendar_pending_approval_individual_session}
     *
     * service - Type: string. Desc: {group, course, individual}
     *
     * type - Type: string. Desc: {hide,show}
     * @param {bookingsShowHideParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsShowHide = function(params) {
        return this.bi.log(__assign({
            evid: 110
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffGrantPermissionsClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {boolean} emailChanged - when email is not pre-populated
     * @property {string} errorReason - error reason
     * @property {GUID} inviteId - R&P invite_id upon invite success
     * @property {boolean} is_valid_email - email validation
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     * @property {boolean} success - T/F
     **/
    /**
     * Name: bookings > staff > grant permissions invite.click. Evid: 373.
     * Event description: invite cta on Booking Staff Member grant permissions modal.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * emailChanged - Type: bool. Desc: when email is not pre-populated
     *
     * errorReason - Type: string. Desc: error reason
     *
     * inviteId - Type: guid. Desc: R&P invite_id upon invite success
     *
     * is_valid_email - Type: bool. Desc: email validation
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * success - Type: bool. Desc: T/F
     * @param {bookingsStaffGrantPermissionsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffGrantPermissionsClick = function(params) {
        return this.bi.log(__assign({
            evid: 373
        }, params));
    };
    /**
     * @typedef {Object} bookingsSyncCalendarModalClickParams
     * @property {string} bookingsPlatform - --
     * @property {GUID} businessId - --
     * @property {GUID} biToken - --
     * @property {string} referral_info - {staff, calendar}
     * @property {GUID} scheduleId - --
     * @property {string} selectedCalendar - google/iCal
     * @property {string} selection - {sync, sync_selected_resource ,learn_more, resend, unsync, open_resource_drop_down, choose_resource, add_new_staff,exit,try_again,link_and_sync}
     * @property {GUID} staffId - --
     **/
    /**
     * Name: bookings > manage external calendars connections modal > click. Evid: 610.
     * Event description: sent for every click in sync calendar modal.
    
     * bookingsPlatform - Type: string. Desc: --
     *
     * businessId - Type: guid. Desc: --
     *
     * biToken - Type: guid. Desc: --
     *
     * referral_info - Type: string. Desc: {staff, calendar}
     *
     * scheduleId - Type: guid. Desc: --
     *
     * selectedCalendar - Type: string. Desc: google/iCal
     *
     * selection - Type: string. Desc: {sync, sync_selected_resource ,learn_more, resend, unsync, open_resource_drop_down, choose_resource, add_new_staff,exit,try_again,link_and_sync}
     *
     * staffId - Type: guid. Desc: --
     * @param {bookingsSyncCalendarModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSyncCalendarModalClick = function(params) {
        return this.bi.log(__assign({
            evid: 610
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffUnlinkResourceParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - -
     * @property {boolean} isSuccess - T for Success F for failure
     **/
    /**
     * Name: bookings > staff > unlink resource. Evid: 625.
     * Event description: staff card --> Unlink resource.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: -
     *
     * isSuccess - Type: bool. Desc: T for Success F for failure
     * @param {bookingsStaffUnlinkResourceParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffUnlinkResource = function(params) {
        return this.bi.log(__assign({
            evid: 625
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarPaymentFailureMoreInfoParams
     * @property {GUID} appointmentId - or class instance
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > calendar>Payment failure>more info. Evid: 236.
     * Event description: http://prntscr.com/eehueb.
    
     * appointmentId - Type: guid. Desc: or class instance
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsCalendarPaymentFailureMoreInfoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarPaymentFailureMoreInfo = function(params) {
        return this.bi.log(__assign({
            evid: 236
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesCreateNewStaffSuccessExpressParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {GUID} staffId - staff_id
     * @property {string} type - {private,group,none}
     **/
    /**
     * Name: bookings >services> create_new_staff_success_express. Evid: 171.
     * Event description: click on V on 'add new staff member' popup in the groups\private.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * type - Type: string. Desc: {private,group,none}
     * @param {bookingsServicesCreateNewStaffSuccessExpressParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesCreateNewStaffSuccessExpress = function(params) {
        return this.bi.log(__assign({
            evid: 171
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetChangeLayoutParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services_list,calendar,booking_info,confirmation,thank_you}
     * @property {string} referralInfo - {NULL= app settings, widget}
     * @property {string} selection - {list,grid,classic}
     * @property {string} pagetype - {private/group}  NULL for widget
     **/
    /**
     * Name: bookings > app_set. change layout. Evid: 113.
     * Event description: tab_menu_click- - app settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you}
     *
     * referralInfo - Type: string. Desc: {NULL= app settings, widget}
     *
     * selection - Type: string. Desc: {list,grid,classic}
     *
     * pagetype - Type: string. Desc: {private/group}  NULL for widget
     * @param {bookingsAppSetChangeLayoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetChangeLayout = function(params) {
        return this.bi.log(__assign({
            evid: 113
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesAddInfoPopupOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} type - {ind, group}
     **/
    /**
     * Name: bookings >services>add info popup - opened. Evid: 414.
     * Event description: http://prntscr.com/ftudez.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: {ind, group}
     * @param {bookingsServicesAddInfoPopupOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesAddInfoPopupOpened = function(params) {
        return this.bi.log(__assign({
            evid: 414
        }, params));
    };
    /**
     * @typedef {Object} bookingsHeaderCloseParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} marked_fields - {service_names....} in case of missing_info
     * @property {GUID} biToken - null
     * @property {string} referal_info - {add_service,services_list,calendar,business_info,confirm_delete_service,callendar_appt,callendar_pop}
     * @property {string} type - {missing_info, next}
     **/
    /**
     * Name: bookings > header_close. Evid: 132.
    
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * marked_fields - Type: string. Desc: {service_names....} in case of missing_info
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {add_service,services_list,calendar,business_info,confirm_delete_service,callendar_appt,callendar_pop}
     *
     * type - Type: string. Desc: {missing_info, next}
     * @param {bookingsHeaderCloseParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsHeaderClose = function(params) {
        return this.bi.log(__assign({
            evid: 132
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicePageMoveToStaffListParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - {group / individual}
     **/
    /**
     * Name: Bookings > Service Page > Move to Staff List. Evid: 466.
     * Event description: Sent when the modal of 'save service' pops when a user tries to edit the VC account in the service form (relevant for group / ind services).
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: {group / individual}
     * @param {bookingsServicePageMoveToStaffListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicePageMoveToStaffList = function(params) {
        return this.bi.log(__assign({
            evid: 466
        }, params));
    };
    /**
     * @typedef {Object} bookingsPackagesPackageSaveSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {number} depositAmount - if not edited at all by the user= NULL. Multiplied by 10000
     * @property {boolean} descriptionEmpty - T=description empty , F= not empty
     * @property {GUID} biToken - null
     * @property {number} packagePrice - Multiplied by 10000
     * @property {number} packageValue - Multiplied by 10000
     * @property {string} paymentMethod - {online_only, offline_only,both}
     * @property {boolean} photoEmpty - T=photo empty , F= not empty
     * @property {boolean} promotionalTextEmpty - T=promotional_text empty , F= not empty
     * @property {number} quantity - quantity
     * @property {string} serviceId - service connected to package
     **/
    /**
     * Name: bookings >packages>  package_save_success. Evid: 206.
     * Event description: sent when a user save a package successfully.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * depositAmount - Type: numeric. Desc: if not edited at all by the user= NULL. Multiplied by 10000
     *
     * descriptionEmpty - Type: bool. Desc: T=description empty , F= not empty
     *
     * biToken - Type: guid.
     *
     * packagePrice - Type: numeric. Desc: Multiplied by 10000
     *
     * packageValue - Type: numeric. Desc: Multiplied by 10000
     *
     * paymentMethod - Type: string. Desc: {online_only, offline_only,both}
     *
     * photoEmpty - Type: bool. Desc: T=photo empty , F= not empty
     *
     * promotionalTextEmpty - Type: bool. Desc: T=promotional_text empty , F= not empty
     *
     * quantity - Type: numeric. Desc: quantity
     *
     * serviceId - Type: string. Desc: service connected to package
     * @param {bookingsPackagesPackageSaveSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPackagesPackageSaveSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 206
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsSendPaypalAccountParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isValid - is the email valid, not paypal valid
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {paypal,stripe} NULL=paypal
     **/
    /**
     * Name: bookings > payments.send_paypal_account. Evid: 146.
     * Event description: payments.send paypal account.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isValid - Type: bool. Desc: is the email valid, not paypal valid
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe} NULL=paypal
     * @param {bookingsPaymentsSendPaypalAccountParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsSendPaypalAccount = function(params) {
        return this.bi.log(__assign({
            evid: 146
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsClickManageParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> Click manage. Evid: 247.
     * Event description: When a user clicks on manage in the bookings group session details page..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsClickManageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsClickManage = function(params) {
        return this.bi.log(__assign({
            evid: 247
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveChangesPopupOpenParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {staff,services,business_info, delete_service, course_change,save_staff} NULL=payments
     **/
    /**
     * Name: bookings >save changes popup.open. Evid: 225.
     * Event description: bookings >services>save changes popup - http://prntscr.com/dog2nt or http://prntscr.com/i1oj09.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {staff,services,business_info, delete_service, course_change,save_staff} NULL=payments
     * @param {bookingsSaveChangesPopupOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveChangesPopupOpen = function(params) {
        return this.bi.log(__assign({
            evid: 225
        }, params));
    };
    /**
     * @typedef {Object} bookingsSyncCalendarSendVerificationFailParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} calendarType - null
     * @property {string} errorMessage - Send Sync Invitation Email Failure - Error Reason: Link Failed with error {e}, Send Sync Invitation Email Failure - Error Reason: getSyncStatusByResourceId Failed with error {e}, Send Sync Invitation Email Failure - Error Reason: {e}.
     * @property {GUID} linkedResourceId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     **/
    /**
     * Name: bookings > manage connections modal > sync_calendar_request.failure. Evid: 611.
     * Event description: sync calendar request was sent by email.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * calendarType - Type: string.
     *
     * errorMessage - Type: string. Desc: Send Sync Invitation Email Failure - Error Reason: Link Failed with error {e}, Send Sync Invitation Email Failure - Error Reason: getSyncStatusByResourceId Failed with error {e}, Send Sync Invitation Email Failure - Error Reason: {e}.
     *
     * linkedResourceId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     * @param {bookingsSyncCalendarSendVerificationFailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSyncCalendarSendVerificationFail = function(params) {
        return this.bi.log(__assign({
            evid: 611
        }, params));
    };
    /**
     * @typedef {Object} bookingsMemberAppClickFitBannerParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings -> member app -> click Fit banner. Evid: 498.
     * Event description: When owner clicks the Fit banner in member app to continue.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsMemberAppClickFitBannerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMemberAppClickFitBanner = function(params) {
        return this.bi.log(__assign({
            evid: 498
        }, params));
    };
    /**
     * @typedef {Object} bookingsViewParticipantsCalendarClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} origin - place where action took place
     * @property {string} serviceId - -
     **/
    /**
     * Name: Bookings --> Manage participants. Evid: 161.
     * Event description: click on view Participants from a meeting in the calendar tooltip.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: place where action took place
     *
     * serviceId - Type: string. Desc: -
     * @param {bookingsViewParticipantsCalendarClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsViewParticipantsCalendarClick = function(params) {
        return this.bi.log(__assign({
            evid: 161
        }, params));
    };
    /**
     * @typedef {Object} bookingsPreviewEditEmailParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} email_type - {confirmation,reminder,cancellation,automations}
     * @property {GUID} biToken - msid
     * @property {string} type - {ind,groups}
     **/
    /**
     * Name: bookings > preview\edit email. Evid: 107.
     * Event description: Edit confirmation email/click on "show me" to go to the automations page.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * email_type - Type: string. Desc: {confirmation,reminder,cancellation,automations}
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: {ind,groups}
     * @param {bookingsPreviewEditEmailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPreviewEditEmail = function(params) {
        return this.bi.log(__assign({
            evid: 107
        }, params));
    };
    /**
     * @typedef {Object} bookingsCustomerCardTabOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {boolean} isEmptyState - true=empty state
     * @property {GUID} biToken - -
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: bookings > Customer card >  tab opened. Evid: 273.
     * Event description: http://prntscr.com/i3i3du.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * isEmptyState - Type: bool. Desc: true=empty state
     *
     * biToken - Type: guid. Desc: -
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsCustomerCardTabOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCustomerCardTabOpened = function(params) {
        return this.bi.log(__assign({
            evid: 273
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppBannerShownParams
     * @property {string} bannerType - {invite_to_service}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} screenName - {owner_class_empty, owner_class, owner_private, member_success_screen}
     **/
    /**
     * Name: Bookings --> OneApp --> Banner shown. Evid: 315.
     * Event description: Banner shown to owner/member.
    
     * bannerType - Type: string. Desc: {invite_to_service}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * screenName - Type: string. Desc: {owner_class_empty, owner_class, owner_private, member_success_screen}
     * @param {bookingsOneAppBannerShownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppBannerShown = function(params) {
        return this.bi.log(__assign({
            evid: 315
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInUnlockSuccessParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> unlock success. Evid: 262.
     * Event description: When user got out of self check in mode.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInUnlockSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInUnlockSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 262
        }, params));
    };
    /**
     * @typedef {Object} bookingsSendPageIdUserParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} is_onboarding - null
     * @property {boolean} is_over_editor - -
     * @property {boolean} is_owner - is_owner
     * @property {GUID} biToken - null
     * @property {string} pid - page_id
     * @property {GUID} visitor_id - visitor_id
     **/
    /**
     * Name: bookings > send_page_id_user. Evid: 101.
     * Event description: send_page_id_user.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * is_onboarding - Type: bool.
     *
     * is_over_editor - Type: bool. Desc: -
     *
     * is_owner - Type: bool. Desc: is_owner
     *
     * biToken - Type: guid.
     *
     * pid - Type: string. Desc: page_id
     *
     * visitor_id - Type: guid. Desc: visitor_id
     * @param {bookingsSendPageIdUserParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSendPageIdUser = function(params) {
        return this.bi.log(__assign({
            evid: 101
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesDealerComponentMoreActionsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - businessId
     * @property {string} clickType - {remove,show_later}
     * @property {GUID} msid - msid
     * @property {GUID} biToken - null
     * @property {GUID} offer_id - offer guid
     **/
    /**
     * Name: bookings > services > Dealer Component > more actions.click. Evid: 484.
     * Event description: After click on 'more actions' on the dealer component on the services list.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: businessId
     *
     * clickType - Type: string. Desc: {remove,show_later}
     *
     * msid - Type: guid. Desc: msid
     *
     * biToken - Type: guid.
     *
     * offer_id - Type: guid. Desc: offer guid
     * @param {bookingsServicesDealerComponentMoreActionsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesDealerComponentMoreActionsClick = function(params) {
        return this.bi.log(__assign({
            evid: 484
        }, params));
    };
    /**
     * @typedef {Object} bookingsManageBookingsOnEditPanelIsClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >manage bookings on edit panel is clicked. Evid: 194.
     * Event description: bookings >manage bookings on edit panel is clicked.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsManageBookingsOnEditPanelIsClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsManageBookingsOnEditPanelIsClicked = function(params) {
        return this.bi.log(__assign({
            evid: 194
        }, params));
    };
    /**
     * @typedef {Object} bookingsUpdateAttendanceParams
     * @property {string} bookingId - null
     * @property {string} bookingsPlatform - old or new server
     * @property {GUID} businessId - business_id
     * @property {string} contactId - contact_id
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {string} origin - calendar pop-up/contact panel/participants pane/OneApp participant menu/ OneApp button
     * @property {string} serviceId - service_id
     * @property {string} sessionId - --
     * @property {string} type - service type (ind/class/course)
     * @property {string} value - Attended / No Show / Check In
     **/
    /**
     * Name: Bookings --> Update Attendance. Evid: 349.
     * Event description: When the user updates the attendance status of a client in a class/appointment. Screenshot: Desktop screenshot: https://www.screencast.com/t/UjNNmKNEHv. OA screenshot: 1. https://www.screencast.com/t/s8sTmD1E8x. 2..
    
     * bookingId - Type: string.
     *
     * bookingsPlatform - Type: string. Desc: old or new server
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: string. Desc: contact_id
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: calendar pop-up/contact panel/participants pane/OneApp participant menu/ OneApp button
     *
     * serviceId - Type: string. Desc: service_id
     *
     * sessionId - Type: string. Desc: --
     *
     * type - Type: string. Desc: service type (ind/class/course)
     *
     * value - Type: string. Desc: Attended / No Show / Check In
     * @param {bookingsUpdateAttendanceParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsUpdateAttendance = function(params) {
        return this.bi.log(__assign({
            evid: 349
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsCollectPaymentParams
     * @property {string} action - null
     * @property {GUID} bookingId - -
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} contactId - -
     * @property {GUID} location_guid - location_id
     * @property {GUID} biToken - -
     * @property {string} paymentProvider - {paypal,stripe} NULL=paypal
     * @property {number} price - -
     * @property {string} referralInfo - -
     * @property {string} scheduleId - schedule_id
     * @property {GUID} serviceId - -
     * @property {string} sessionId - session_id
     * @property {string} staffId - staff_id
     * @property {string} timeslot - timeslot
     * @property {string} serviceType - -
     **/
    /**
     * Name: bookings > payments>collect payment. Evid: 488.
     * Event description: Click on 'Charge now' in collect payments page. https://zpl.io/2976XLp.
    
     * action - Type: string.
     *
     * bookingId - Type: guid. Desc: -
     *
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * contactId - Type: guid. Desc: -
     *
     * location_guid - Type: guid. Desc: location_id
     *
     * biToken - Type: guid. Desc: -
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe} NULL=paypal
     *
     * price - Type: numeric. Desc: -
     *
     * referralInfo - Type: string. Desc: -
     *
     * scheduleId - Type: string. Desc: schedule_id
     *
     * serviceId - Type: guid. Desc: -
     *
     * sessionId - Type: string. Desc: session_id
     *
     * staffId - Type: string. Desc: staff_id
     *
     * timeslot - Type: string. Desc: timeslot
     *
     * serviceType - Type: string. Desc: -
     * @param {bookingsPaymentsCollectPaymentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsCollectPayment = function(params) {
        return this.bi.log(__assign({
            evid: 488
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryPaymentsUpdateTransactionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {number} depositAmount - multiplied by 10000
     * @property {number} leftToPay - multiplied by 10000
     * @property {GUID} biToken - null
     * @property {boolean} noteAdded - T=note not empty, F= empty
     * @property {string} paymentMethod - {cash,credit_card...}
     * @property {number} price - multiplied by 10000
     * @property {GUID} serviceId - service of the payments
     * @property {GUID} staffId - staff member providing the service
     * @property {GUID} transactionId - -
     **/
    /**
     * Name: bookings > client history > payments > update transaction. Evid: 216.
     * Event description: update transaction successfully.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * depositAmount - Type: numeric. Desc: multiplied by 10000
     *
     * leftToPay - Type: numeric. Desc: multiplied by 10000
     *
     * biToken - Type: guid.
     *
     * noteAdded - Type: bool. Desc: T=note not empty, F= empty
     *
     * paymentMethod - Type: string. Desc: {cash,credit_card...}
     *
     * price - Type: numeric. Desc: multiplied by 10000
     *
     * serviceId - Type: guid. Desc: service of the payments
     *
     * staffId - Type: guid. Desc: staff member providing the service
     *
     * transactionId - Type: guid. Desc: -
     * @param {bookingsClientHistoryPaymentsUpdateTransactionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryPaymentsUpdateTransaction = function(params) {
        return this.bi.log(__assign({
            evid: 216
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentLinkPaymentLinkRenderingParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} contact_id - contact_id
     * @property {GUID} invoiceId - invoice_id
     * @property {GUID} biToken - msid
     * @property {string} pageName - manage_participants, appointment_pop_over, contact_panel, full_contact_view
     * @property {string} serviceId - service_id
     * @property {string} serviceType - ind/class
     **/
    /**
     * Name: bookings > payment link > payment link rendering. Evid: 491.
     * Event description: indicates if payment link should be rendered.
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * invoiceId - Type: guid. Desc: invoice_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageName - Type: string. Desc: manage_participants, appointment_pop_over, contact_panel, full_contact_view
     *
     * serviceId - Type: string. Desc: service_id
     *
     * serviceType - Type: string. Desc: ind/class
     * @param {bookingsPaymentLinkPaymentLinkRenderingParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentLinkPaymentLinkRendering = function(params) {
        return this.bi.log(__assign({
            evid: 491
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarExportClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar > export.click. Evid: 368.
     * Event description: Clicking on the button that opens the dropdown list. https://zpl.io/2pAev7j.
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsCalendarExportClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarExportClick = function(params) {
        return this.bi.log(__assign({
            evid: 368
        }, params));
    };
    /**
     * @typedef {Object} bookingsOkGotItParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} got_it_type - {google_connect,calendar_view }
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > ok _got_it. Evid: 135.
     * Event description: click on the "ok got it" popup in the calendar (first time).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * got_it_type - Type: string. Desc: {google_connect,calendar_view }
     *
     * biToken - Type: guid.
     * @param {bookingsOkGotItParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOkGotIt = function(params) {
        return this.bi.log(__assign({
            evid: 135
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditor6thButtonManageBookingsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings > editor 6th button - "manage bookings" click. Evid: 183.
     * Event description: when the users clicks on bookings 6th button AFTER provision a popup opens - this event is sent when the "manage bookings" is clicked --> opens BO NOT SENT.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsEditor6thButtonManageBookingsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditor6thButtonManageBookingsClick = function(params) {
        return this.bi.log(__assign({
            evid: 183
        }, params));
    };
    /**
     * @typedef {Object} bookingsMore137Params
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} origin - marketing_state,disconnect_pop_over,criteria_list,category_note_,business_status_box,info_box_submitted_state,info_box_connected_state
     * @property {string} pageName - -
     **/
    /**
     * Name: bookings >  RWG > learn_more.click. Evid: 137.
    
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: marketing_state,disconnect_pop_over,criteria_list,category_note_,business_status_box,info_box_submitted_state,info_box_connected_state
     *
     * pageName - Type: string. Desc: -
     * @param {bookingsMore137Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMore137 = function(params) {
        return this.bi.log(__assign({
            evid: 137
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicePageCourseConfirmChangeInVcLinkParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {boolean} notifyChecked - if the user chose to notify booked uou
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings > Service Page - Course > Confirm change in VC link. Evid: 465.
     * Event description: Sent when a user tries to edit VC link of a course.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * notifyChecked - Type: bool. Desc: if the user chose to notify booked uou
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsServicePageCourseConfirmChangeInVcLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicePageCourseConfirmChangeInVcLink = function(params) {
        return this.bi.log(__assign({
            evid: 465
        }, params));
    };
    /**
     * @typedef {Object} bookingsNotUsedConnectPaymentProviderNotAvailableOnPreviewPopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     **/
    /**
     * Name: bookings > not used! > connect payment provider not available on preview. popup. Evid: 563.
     * Event description: popup appears - http://prntscr.com/gbmeky.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     * @param {bookingsNotUsedConnectPaymentProviderNotAvailableOnPreviewPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsNotUsedConnectPaymentProviderNotAvailableOnPreviewPopup = function(params) {
        return this.bi.log(__assign({
            evid: 563
        }, params));
    };
    /**
     * @typedef {Object} bookingsManageBookingsOnSettingsPanelIsClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - businessId
     * @property {boolean} isPreview - null
     * @property {Url} linkUrl - goto link
     * @property {GUID} biToken - biToken
     * @property {string} referral - bookings settings, service-widget, old-widget, service_page
     * @property {string} section - optional
     * @property {string} tab - Manage, Layout, Settings, Design, Text
     **/
    /**
     * Name: bookings >manage bookings on settings panel is clicked. Evid: 275.
     * Event description: sent when clicking a link in one of the app settings tab.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: businessId
     *
     * isPreview - Type: bool.
     *
     * linkUrl - Type: url. Desc: goto link
     *
     * biToken - Type: guid. Desc: biToken
     *
     * referral - Type: string. Desc: bookings settings, service-widget, old-widget, service_page
     *
     * section - Type: string. Desc: optional
     *
     * tab - Type: string. Desc: Manage, Layout, Settings, Design, Text
     * @param {bookingsManageBookingsOnSettingsPanelIsClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsManageBookingsOnSettingsPanelIsClicked = function(params) {
        return this.bi.log(__assign({
            evid: 275
        }, params));
    };
    /**
     * @typedef {Object} bookingsResetToDefaultStateParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - []
     * @property {string} items - items restored to default
     * @property {GUID} biToken - []
     * @property {string} pageName - -
     * @property {string} sectionName - -
     **/
    /**
     * Name: bookings > reset to default state. Evid: 436.
     * Event description: click on "Reset" in the BO.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: []
     *
     * items - Type: string. Desc: items restored to default
     *
     * biToken - Type: guid. Desc: []
     *
     * pageName - Type: string. Desc: -
     *
     * sectionName - Type: string. Desc: -
     * @param {bookingsResetToDefaultStateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsResetToDefaultState = function(params) {
        return this.bi.log(__assign({
            evid: 436
        }, params));
    };
    /**
     * @typedef {Object} bookingsMoveSessionsWhenRemovingALocationParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} loaction - name of selected location for the sessions
     * @property {string} location_choice - {business, client, custom}
     * @property {GUID} location_guid - guid of selected location if available
     * @property {GUID} biToken - []
     * @property {boolean} notifyChecked - whether the notify participants is checked
     * @property {string} selection - move/keep
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: bookings > move sessions when removing a location. Evid: 478.
     * Event description: Multilocation - When a user is removing a location it needs to choose what to do with the scheduled sessions connected to this location. Sends when user is approving it's selection..
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * loaction - Type: string. Desc: name of selected location for the sessions
     *
     * location_choice - Type: string. Desc: {business, client, custom}
     *
     * location_guid - Type: guid. Desc: guid of selected location if available
     *
     * biToken - Type: guid. Desc: []
     *
     * notifyChecked - Type: bool. Desc: whether the notify participants is checked
     *
     * selection - Type: string. Desc: move/keep
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsMoveSessionsWhenRemovingALocationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMoveSessionsWhenRemovingALocation = function(params) {
        return this.bi.log(__assign({
            evid: 478
        }, params));
    };
    /**
     * @typedef {Object} bookingsEmailsRemindersClickOnBackFromBusinessInfoParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Emails & Reminders > Click on back from "business info". Evid: 324.
     * Event description: After clicking on the banner to go to "business info" - click "back" button from the business info banner..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsEmailsRemindersClickOnBackFromBusinessInfoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEmailsRemindersClickOnBackFromBusinessInfo = function(params) {
        return this.bi.log(__assign({
            evid: 324
        }, params));
    };
    /**
     * @typedef {Object} bookingsPackagesSavePackageClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {boolean} packageNameEmpty - T=package name empty , F= not empty
     * @property {boolean} priceEmpty - T=price empty , F= not empty
     * @property {boolean} sreviceEmpty - NOT SENT!
     * @property {boolean} serviceNameEmpty - T=service name empty , F= not empty
     **/
    /**
     * Name: bookings >packages> save package. click. Evid: 205.
     * Event description: save package click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * packageNameEmpty - Type: bool. Desc: T=package name empty , F= not empty
     *
     * priceEmpty - Type: bool. Desc: T=price empty , F= not empty
     *
     * sreviceEmpty - Type: bool. Desc: NOT SENT!
     *
     * serviceNameEmpty - Type: bool. Desc: T=service name empty , F= not empty
     * @param {bookingsPackagesSavePackageClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPackagesSavePackageClick = function(params) {
        return this.bi.log(__assign({
            evid: 205
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppWaitingListSpotOpenedClickParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} value - 'No'/'Book'
     **/
    /**
     * Name: Bookings --> OneApp --> Waiting list - spot opened click. Evid: 347.
     * Event description: Click on one of the buttons in the screen to accept/decline joining the session.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * value - Type: string. Desc: 'No'/'Book'
     * @param {bookingsOneAppWaitingListSpotOpenedClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppWaitingListSpotOpenedClick = function(params) {
        return this.bi.log(__assign({
            evid: 347
        }, params));
    };
    /**
     * @typedef {Object} bookingsDuplicateParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referral_info - {category,service}
     * @property {string} type - {individual,groups}
     **/
    /**
     * Name: bookings > duplicate. Evid: 109.
     * Event description: duplicate.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {category,service}
     *
     * type - Type: string. Desc: {individual,groups}
     * @param {bookingsDuplicateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsDuplicate = function(params) {
        return this.bi.log(__assign({
            evid: 109
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditor6thButtonGetStartedClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} is_bookings_provisioned - true if this template had Bookings
     * @property {GUID} biToken - null
     * @property {string} panel_name - bookings_6th_button / editor_add_panel
     * @property {string} post_reg - post_reg
     **/
    /**
     * Name: Bookings > editor 6th button "get started" click. Evid: 182.
     * Event description: when the users clicks on bookings 6th button BEFORE provision a popup opens - this event is sent when the "Add Now"/ is clicked --> provision the app + opens BO.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * is_bookings_provisioned - Type: bool. Desc: true if this template had Bookings
     *
     * biToken - Type: guid.
     *
     * panel_name - Type: string. Desc: bookings_6th_button / editor_add_panel
     *
     * post_reg - Type: string. Desc: post_reg
     * @param {bookingsEditor6thButtonGetStartedClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditor6thButtonGetStartedClick = function(params) {
        return this.bi.log(__assign({
            evid: 182
        }, params));
    };
    /**
     * @typedef {Object} bookingsPopupOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - NOT SENT!
     * @property {string} referral_info - {popup_new_group,popup_payments_stripe,popup_payments_paypal, popup_course, popup_individual, popup_service_with_paid_plan_intent}
     * @property {string} widget_name - widget name
     **/
    /**
     * Name: bookings >  popup_opened. Evid: 157.
     * Event description: upgrade_popup_opened- in popups that are not opened on every click (on certain button)- new_group popup is opened only on the first time of each session..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: NOT SENT!
     *
     * referral_info - Type: string. Desc: {popup_new_group,popup_payments_stripe,popup_payments_paypal, popup_course, popup_individual, popup_service_with_paid_plan_intent}
     *
     * widget_name - Type: string. Desc: widget name
     * @param {bookingsPopupOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPopupOpened = function(params) {
        return this.bi.log(__assign({
            evid: 157
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetShowHideClassScheduleParams
     * @property {string} bookingsPlatform - new_bookings_server/null
     * @property {GUID} businessId - -
     * @property {boolean} check_box - true/false. default value is false when false means the feature is off (don't display schedule)
     * @property {boolean} isPreview - true/false
     * @property {GUID} biToken - -
     * @property {string} page_name - {service_page}
     * @property {string} pagetype - {class}
     **/
    /**
     * Name: bookings > app_set.show/hide class schedule. Evid: 356.
     * Event description: show/hide class schedule.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server/null
     *
     * businessId - Type: guid. Desc: -
     *
     * check_box - Type: bool. Desc: true/false. default value is false when false means the feature is off (don't display schedule)
     *
     * isPreview - Type: bool. Desc: true/false
     *
     * biToken - Type: guid. Desc: -
     *
     * page_name - Type: string. Desc: {service_page}
     *
     * pagetype - Type: string. Desc: {class}
     * @param {bookingsAppSetShowHideClassScheduleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetShowHideClassSchedule = function(params) {
        return this.bi.log(__assign({
            evid: 356
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffLastDeletePopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} origin - OneApp/desktop
     **/
    /**
     * Name: bookings > staff>last_delete_popup. Evid: 172.
     * Event description: opens when the user wants to delete the remain last staff member.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: OneApp/desktop
     * @param {bookingsStaffLastDeletePopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffLastDeletePopup = function(params) {
        return this.bi.log(__assign({
            evid: 172
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetProportionsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} selection - {rectangle, square}
     **/
    /**
     * Name: bookings > app_set. proportions. Evid: 403.
     * Event description: only in service_page - http://prntscr.com/f54c9r- NEW APP SETTINGS- NOT RELEVANT.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {rectangle, square}
     * @param {bookingsAppSetProportionsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetProportions = function(params) {
        return this.bi.log(__assign({
            evid: 403
        }, params));
    };
    /**
     * @typedef {Object} bookingsZoomIntegrationSuccessParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings -> zoom integration -> success. Evid: 454.
     * Event description: sent when process of connecting to zoom is completed successfully.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsZoomIntegrationSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsZoomIntegrationSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 454
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryPaginationParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isSearch - Pagination cased from Pagination?
     * @property {GUID} biToken - null
     * @property {string} next - from this record the next page will start loading -NOT SENT
     * @property {string} pageName - {Appointment-history, Customer-list, Payment-closed transaction}
     * @property {number} pageSize - -
     **/
    /**
     * Name: bookings > Client History >  Pagination. Evid: 217.
     * Event description: Pagination.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isSearch - Type: bool. Desc: Pagination cased from Pagination?
     *
     * biToken - Type: guid.
     *
     * next - Type: string. Desc: from this record the next page will start loading -NOT SENT
     *
     * pageName - Type: string. Desc: {Appointment-history, Customer-list, Payment-closed transaction}
     *
     * pageSize - Type: numeric. Desc: -
     * @param {bookingsClientHistoryPaginationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryPagination = function(params) {
        return this.bi.log(__assign({
            evid: 217
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppActionSheetClickParams
     * @property {string} action - add/remove/cancel
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} contactId - contact_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - service type (currently only class)
     **/
    /**
     * Name: Bookings --> Add participant to session from waitlist. Evid: 351.
     * Event description: clicking on "add" or "remove" or "cancel" after the action sheet pop-up appears. Screenshot: https://www.screencast.com/t/zqEEy7GP..
    
     * action - Type: string. Desc: add/remove/cancel
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: guid. Desc: contact_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type (currently only class)
     * @param {bookingsOneAppActionSheetClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppActionSheetClick = function(params) {
        return this.bi.log(__assign({
            evid: 351
        }, params));
    };
    /**
     * @typedef {Object} bookingsChangeBusinessInfoParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} field - {time_zone,cancellation_policy,subject,message,
     * @property {GUID} biToken - null
     * @property {string} section - {additional_info,confirmation_email_private,confirmation_email_groups,reminder_email_private,reminder_email_groups,cancellation_email_groups}
     **/
    /**
     * Name: bookings > change_business_info. Evid: 140.
     * Event description: a specific field in the business info was changed.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * field - Type: string. Desc: {time_zone,cancellation_policy,subject,message,
     *
     * biToken - Type: guid.
     *
     * section - Type: string. Desc: {additional_info,confirmation_email_private,confirmation_email_groups,reminder_email_private,reminder_email_groups,cancellation_email_groups}
     * @param {bookingsChangeBusinessInfoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsChangeBusinessInfo = function(params) {
        return this.bi.log(__assign({
            evid: 140
        }, params));
    };
    /**
     * @typedef {Object} bookingsParticipantsSaveClickParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} confirmationEmailChecked - Send confirmation email is checked?
     * @property {GUID} contactId - contact_id
     * @property {string} error - json with the error reason- name, email,phone,over_max
     * @property {number} exsitingParticipants - number of exsiting Participants - already in the session
     * @property {boolean} isSaveAndAddAnother - T if used the click "Save and add another one"
     * @property {number} maxParticipants - number of Maximum Participants
     * @property {GUID} biToken - null
     * @property {number} numParticipants - Total number of participants (additional participants +main)
     * @property {string} origin - OneApp/Desktop/OneApp_waiting_list, waitlist
     * @property {boolean} paymentRequest - T if payment requested
     * @property {string} paymentType - {in_person, paid_plan}
     * @property {string} save_type - {new, edit}
     * @property {string} serviceId - -
     * @property {string} sessionId - --
     * @property {boolean} success - is the action scceeded - NOT SENT
     * @property {string} type - {course, group, class}
     **/
    /**
     * Name: Bookings > save new participant to a session. Evid: 163.
     * Event description: click on the V next to the new Participants. started to be sent again only AROUND 10/7 - available also from the app (browser name).
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * confirmationEmailChecked - Type: bool. Desc: Send confirmation email is checked?
     *
     * contactId - Type: guid. Desc: contact_id
     *
     * error - Type: string. Desc: json with the error reason- name, email,phone,over_max
     *
     * exsitingParticipants - Type: numeric. Desc: number of exsiting Participants - already in the session
     *
     * isSaveAndAddAnother - Type: bool. Desc: T if used the click "Save and add another one"
     *
     * maxParticipants - Type: numeric. Desc: number of Maximum Participants
     *
     * biToken - Type: guid.
     *
     * numParticipants - Type: numeric. Desc: Total number of participants (additional participants +main)
     *
     * origin - Type: string. Desc: OneApp/Desktop/OneApp_waiting_list, waitlist
     *
     * paymentRequest - Type: bool. Desc: T if payment requested
     *
     * paymentType - Type: string. Desc: {in_person, paid_plan}
     *
     * save_type - Type: string. Desc: {new, edit}
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: --
     *
     * success - Type: bool. Desc: is the action scceeded - NOT SENT
     *
     * type - Type: string. Desc: {course, group, class}
     * @param {bookingsParticipantsSaveClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsParticipantsSaveClick = function(params) {
        return this.bi.log(__assign({
            evid: 163
        }, params));
    };
    /**
     * @typedef {Object} bookingsViewParticipantsOpenParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > view_participants_open. Evid: 153.
     * Event description: NEED TO DELETE - 162 instead.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsViewParticipantsOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsViewParticipantsOpen = function(params) {
        return this.bi.log(__assign({
            evid: 153
        }, params));
    };
    /**
     * @typedef {Object} bookingsClickOnEditCalendarSettingsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} calendarEditType - "availability", "staff"
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Click on Edit calendar settings. Evid: 329.
     * Event description: entry point to edit availability and staff hours.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * calendarEditType - Type: string. Desc: "availability", "staff"
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsClickOnEditCalendarSettingsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClickOnEditCalendarSettings = function(params) {
        return this.bi.log(__assign({
            evid: 329
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsMeTabCheckInDoneClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs> me tab -> check in -> done clicked. Evid: 254.
     * Event description: When user click on done button after check in.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsMeTabCheckInDoneClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsMeTabCheckInDoneClicked = function(params) {
        return this.bi.log(__assign({
            evid: 254
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormChangeTypeParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} referralInfo - service type source {ind, class, course}
     * @property {boolean} success - T= changed
     * @property {string} type - {ind, class, course} - the service type move to
     **/
    /**
     * Name: bookings > service form > change type. Evid: 386.
     * Event description: -.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * referralInfo - Type: string. Desc: service type source {ind, class, course}
     *
     * success - Type: bool. Desc: T= changed
     *
     * type - Type: string. Desc: {ind, class, course} - the service type move to
     * @param {bookingsServiceFormChangeTypeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormChangeType = function(params) {
        return this.bi.log(__assign({
            evid: 386
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormManageVcAccountsClickedParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} type - {appointment,class,course}
     **/
    /**
     * Name: bookings -> service form -> manage vc accounts clicked. Evid: 457.
     * Event description: click on manage vc accounts.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * type - Type: string. Desc: {appointment,class,course}
     * @param {bookingsServiceFormManageVcAccountsClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormManageVcAccountsClicked = function(params) {
        return this.bi.log(__assign({
            evid: 457
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - wizard/preset selection/one_app_create_service/one_app_edit_service
     * @property {string} type - {individual,class,course} - serviceX: {single,multi}
     **/
    /**
     * Name: Bookings > Service form opened. Evid: 239.
     * Event description: service form is opened (either from the web or from the app).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: wizard/preset selection/one_app_create_service/one_app_edit_service
     *
     * type - Type: string. Desc: {individual,class,course} - serviceX: {single,multi}
     * @param {bookingsServiceFormOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormOpened = function(params) {
        return this.bi.log(__assign({
            evid: 239
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnDeclineRescheduleInPendingApprovalSessionParams
     * @property {string} action - decline/reschedule
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} contactId - contact_id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - {session_page_cta,more_button}
     * @property {GUID} service_id - service_id
     * @property {string} session_id - session_id
     * @property {string} type - service type (currently only private)
     **/
    /**
     * Name: Bookings --> OneApp --> Click on decline/reschedule in pending approval session. Evid: 359.
     * Event description: tap on "Decline Reschedule" cta for pending approval session.
    
     * action - Type: string. Desc: decline/reschedule
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: guid. Desc: contact_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {session_page_cta,more_button}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * session_id - Type: string. Desc: session_id
     *
     * type - Type: string. Desc: service type (currently only private)
     * @param {bookingsOneAppClickOnDeclineRescheduleInPendingApprovalSessionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnDeclineRescheduleInPendingApprovalSession = function(params) {
        return this.bi.log(__assign({
            evid: 359
        }, params));
    };
    /**
     * @typedef {Object} bookingsUnsyncCalendarRequestSendInviteSuccessFailureParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} calendarType - null
     * @property {GUID} linkedResourceId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     * @property {boolean} success - T if success F if failure
     **/
    /**
     * Name: bookings > unsync calendar request > send invite > success/failure. Evid: 623.
     * Event description: link to a resource before sync request.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * calendarType - Type: string.
     *
     * linkedResourceId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * success - Type: bool. Desc: T if success F if failure
     * @param {bookingsUnsyncCalendarRequestSendInviteSuccessFailureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsUnsyncCalendarRequestSendInviteSuccessFailure = function(params) {
        return this.bi.log(__assign({
            evid: 623
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffSetDefaultAvailabilityParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} selection - {set availability, back to staff availability}
     **/
    /**
     * Name: bookings > staff > set default availability. Evid: 283.
     * Event description: http://prntscr.com/jqm0mu
    http://prntscr.com/jqm1gy.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * selection - Type: string. Desc: {set availability, back to staff availability}
     * @param {bookingsStaffSetDefaultAvailabilityParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffSetDefaultAvailability = function(params) {
        return this.bi.log(__assign({
            evid: 283
        }, params));
    };
    /**
     * @typedef {Object} bookingsOpenBusinessInfoParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referal_info - {confirm_page_link,confirm_page_button}
     **/
    /**
     * Name: bookings > open business info. Evid: 128.
     * Event description: Open Editor FROM business_info.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {confirm_page_link,confirm_page_button}
     * @param {bookingsOpenBusinessInfoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOpenBusinessInfo = function(params) {
        return this.bi.log(__assign({
            evid: 128
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileAppsNotifyParticipantsModalParams
     * @property {string} actionName - load/notify/dont_notify
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} serviceId - -
     * @property {string} sessionId - -
     **/
    /**
     * Name: bookings > mobile apps > notify participants modal. Evid: 643.
    
    
     * actionName - Type: string. Desc: load/notify/dont_notify
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: -
     * @param {bookingsMobileAppsNotifyParticipantsModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileAppsNotifyParticipantsModal = function(params) {
        return this.bi.log(__assign({
            evid: 643
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnCategoriesFilterParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     **/
    /**
     * Name: Bookings --> OneApp --> Click on categories filter. Evid: 338.
     * Event description: Clicking on the categories selector - member https://www.screencast.com/t/bYohVkAMmh.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     * @param {bookingsOneAppClickOnCategoriesFilterParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnCategoriesFilter = function(params) {
        return this.bi.log(__assign({
            evid: 338
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetPageChangeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} selection - {services_list,calendar,booking_info,confirmation,thank_you,bookings_form}
     **/
    /**
     * Name: bookings > app_set.page_change. Evid: 111.
     * Event description: screens_drop_down - app settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you,bookings_form}
     * @param {bookingsAppSetPageChangeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetPageChange = function(params) {
        return this.bi.log(__assign({
            evid: 111
        }, params));
    };
    /**
     * @typedef {Object} bookingsCreateWaiverClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} serviceId - -
     * @property {string} sessionId - -
     **/
    /**
     * Name: Bookings --> Create Waiver.click. Evid: 632.
     * Event description: Click on "create waiver" in the manage participants page.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: -
     * @param {bookingsCreateWaiverClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCreateWaiverClick = function(params) {
        return this.bi.log(__assign({
            evid: 632
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesKeyboardClickOnAServiceInKeyboardParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> services keyboard --> click on a service in keyboard. Evid: 334.
     * Event description: when clicking on one of the services in crazy chat keyboard (OA) --or in chat in web.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsServicesKeyboardClickOnAServiceInKeyboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesKeyboardClickOnAServiceInKeyboard = function(params) {
        return this.bi.log(__assign({
            evid: 334
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppointmentStaffDropDownParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isFirst - T=first staff selection, F= change.  NOT SENT
     * @property {GUID} biToken - null
     * @property {string} type - { appointment, group session}
     **/
    /**
     * Name: bookings > appointment > staff drop down. Evid: 185.
     * Event description: change selection in the staff drop down inside the appointments modal
    http://prntscr.com/bmz2x8.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isFirst - Type: bool. Desc: T=first staff selection, F= change.  NOT SENT
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: { appointment, group session}
     * @param {bookingsAppointmentStaffDropDownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppointmentStaffDropDown = function(params) {
        return this.bi.log(__assign({
            evid: 185
        }, params));
    };
    /**
     * @typedef {Object} bookingsBoEligibleToConnectPaymentToastParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings BO - Eligible to connect payment toast. Evid: 492.
     * Event description: Sent after save service, if the user has business premium, the service is saved with online payment intent, and he currently has no online payment method connected..
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsBoEligibleToConnectPaymentToastParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBoEligibleToConnectPaymentToast = function(params) {
        return this.bi.log(__assign({
            evid: 492
        }, params));
    };
    /**
     * @typedef {Object} bookingsPhotoParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} bi_token - -
     * @property {GUID} biToken - null
     * @property {string} referral_info - {new,replace,delete}
     * @property {string} serviceId - -
     * @property {string} type - {ind,groups.staff}
     **/
    /**
     * Name: bookings > photo. Evid: 106.
     * Event description: sent when a photo is added\edited in the services pages or in the new staff member page.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * bi_token - Type: guid. Desc: -
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {new,replace,delete}
     *
     * serviceId - Type: string. Desc: -
     *
     * type - Type: string. Desc: {ind,groups.staff}
     * @param {bookingsPhotoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPhoto = function(params) {
        return this.bi.log(__assign({
            evid: 106
        }, params));
    };
    /**
     * @typedef {Object} bookingsGetStartedAppSettingsClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} is_get_started - -
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} pageName - ['manage', 'services']
     * @property {string} referral - [service_list_settings, widget_settings]
     **/
    /**
     * Name: bookings > get_started_app_settings_clicked. Evid: 142.
     * Event description: get_started_app_settings_clicked.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * is_get_started - Type: bool. Desc: -
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * pageName - Type: string. Desc: ['manage', 'services']
     *
     * referral - Type: string. Desc: [service_list_settings, widget_settings]
     * @param {bookingsGetStartedAppSettingsClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGetStartedAppSettingsClicked = function(params) {
        return this.bi.log(__assign({
            evid: 142
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveCustomVcLinkParams
     * @property {string} action_type - {create/edit}
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} description - link description
     * @property {boolean} isPrivate - checked if a password is set
     * @property {string} link_name - link entered by user
     * @property {GUID} biToken - msid
     * @property {boolean} notifyChecked - notify participants
     **/
    /**
     * Name: bookings->save custom vc link. Evid: 455.
     * Event description: sent when a custom vc link is saved.
    
     * action_type - Type: string. Desc: {create/edit}
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * description - Type: string. Desc: link description
     *
     * isPrivate - Type: bool. Desc: checked if a password is set
     *
     * link_name - Type: string. Desc: link entered by user
     *
     * biToken - Type: guid. Desc: msid
     *
     * notifyChecked - Type: bool. Desc: notify participants
     * @param {bookingsSaveCustomVcLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveCustomVcLink = function(params) {
        return this.bi.log(__assign({
            evid: 455
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppAddBookingClickDummyButtonParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > one app> add booking .click- DUMMY BUTTON. Evid: 223.
     * Event description: add bookings (plus click)- currently unavailable.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsOneAppAddBookingClickDummyButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppAddBookingClickDummyButton = function(params) {
        return this.bi.log(__assign({
            evid: 223
        }, params));
    };
    /**
     * @typedef {Object} bookingsRemovingVcLinkFromSessionParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings > Removing VC link from session. Evid: 476.
     * Event description: Sent when a user is removing a VC link from a session.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsRemovingVcLinkFromSessionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRemovingVcLinkFromSession = function(params) {
        return this.bi.log(__assign({
            evid: 476
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChooseLocationInMemberCalendarParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} locationGuid - selected location id (if specific location has been selected)
     * @property {string} locationName - selected location
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > mobile apps > choose location in owner calendar. Evid: 440.
     * Event description: choose a location from dropdown in oneapp owmer view.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * locationGuid - Type: guid. Desc: selected location id (if specific location has been selected)
     *
     * locationName - Type: string. Desc: selected location
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsOneAppChooseLocationInMemberCalendarParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChooseLocationInMemberCalendar = function(params) {
        return this.bi.log(__assign({
            evid: 440
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgSetupPageLoadParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} properties - OBJECT {Sites premium, Site category, sub-category, Business name, Business address, Bookings services - eligible / non-eligible}
     **/
    /**
     * Name: bookings > rwg > setup page load. Evid: 434.
     * Event description: reserve with Google setup page load.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * properties - Type: string. Desc: OBJECT {Sites premium, Site category, sub-category, Business name, Business address, Bookings services - eligible / non-eligible}
     * @param {bookingsRwgSetupPageLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgSetupPageLoad = function(params) {
        return this.bi.log(__assign({
            evid: 434
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppLinkClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - page on which the link was clicked {services, calendar,}
     **/
    /**
     * Name: bookings > one app link. click. Evid: 233.
     * Event description: click on the one app link on the BO
    http://prntscr.com/dwb651.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: page on which the link was clicked {services, calendar,}
     * @param {bookingsOneAppLinkClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppLinkClick = function(params) {
        return this.bi.log(__assign({
            evid: 233
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppManageAppointmentClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} type - appointment type - {individual,groups}
     **/
    /**
     * Name: bookings > one app>manage appointment.click. Evid: 304.
     * Event description: http://prntscr.com/dcret7.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: appointment type - {individual,groups}
     * @param {bookingsOneAppManageAppointmentClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppManageAppointmentClick = function(params) {
        return this.bi.log(__assign({
            evid: 304
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryAddNewCustomerParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} location - {empty state, customer list, empty_state_top_right}
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > Client History > add new customer. Evid: 200.
     * Event description: Add new customer.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * location - Type: string. Desc: {empty state, customer list, empty_state_top_right}
     *
     * biToken - Type: guid.
     * @param {bookingsClientHistoryAddNewCustomerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryAddNewCustomer = function(params) {
        return this.bi.log(__assign({
            evid: 200
        }, params));
    };
    /**
     * @typedef {Object} bookingsResetToOriginalDesignClick399Params
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} location - service_form/
     * @property {GUID} biToken - []
     * @property {string} serviceId - []
     * @property {string} type - class
     **/
    /**
     * Name: Bookings > bulk scheduling > add session click. Evid: 399.
     * Event description: user clicks add session in bulk scheduling modal.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * location - Type: string. Desc: service_form/
     *
     * biToken - Type: guid. Desc: []
     *
     * serviceId - Type: string. Desc: []
     *
     * type - Type: string. Desc: class
     * @param {bookingsResetToOriginalDesignClick399Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsResetToOriginalDesignClick399 = function(params) {
        return this.bi.log(__assign({
            evid: 399
        }, params));
    };
    /**
    * @typedef {Object} bookingsBoPageLoadedParams
    * @property {string} bookingsPlatform - null
    * @property {GUID} businessId - business_id
    * @property {boolean} isEmptyState - only on manage participants
    /waitlist/offerings/services tab: T=services empty state/empty waitlist
    * @property {GUID} biToken - msid
    * @property {string} origin - {editor,myaccount,ADI,OneApp}
    * @property {string} page_name - page name that is loaded: {Web: calendar,manage participants
    , offerings, staff, business-info; Mobile: one_app_schedule, one_app_services, one_app_settings, waitlist}
    * @property {string} previousPage - last page seen by the user
    * @property {string} screenResolution - screen resolution
    **/
    /**
     * Name: Bookings > BO page loaded. Evid: 277.
     * Event description: Page loaded in Backoffice (for each tab) , with the page name parameter.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * isEmptyState - Type: bool. Desc: only on manage participants
    /waitlist/offerings/services tab: T=services empty state/empty waitlist
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {editor,myaccount,ADI,OneApp}
     *
     * page_name - Type: string. Desc: page name that is loaded: {Web: calendar,manage participants
    , offerings, staff, business-info; Mobile: one_app_schedule, one_app_services, one_app_settings, waitlist}
     *
     * previousPage - Type: string. Desc: last page seen by the user
     *
     * screenResolution - Type: string. Desc: screen resolution
     * @param {bookingsBoPageLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBoPageLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 277
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffUnlinkResourceClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} referralInfo - more_actions/staff_card
     * @property {GUID} staffId - -
     **/
    /**
     * Name: bookings > staff > unlink resource.click. Evid: 628.
     * Event description: staff card --> Unlink resource > click to unlink.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string. Desc: more_actions/staff_card
     *
     * staffId - Type: guid. Desc: -
     * @param {bookingsStaffUnlinkResourceClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffUnlinkResourceClick = function(params) {
        return this.bi.log(__assign({
            evid: 628
        }, params));
    };
    /**
     * @typedef {Object} bookingsGetStartedClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} selection - {get_started, create_your_first_service,set_up_your_calendar,add_your_business_info}
     **/
    /**
     * Name: bookings > RWG.get_started_click. Evid: 134.
     * Event description: BO - RWG in Marketing state. Get started CTA.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {get_started, create_your_first_service,set_up_your_calendar,add_your_business_info}
     * @param {bookingsGetStartedClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGetStartedClick = function(params) {
        return this.bi.log(__assign({
            evid: 134
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesRenameStaffClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} type - {private,group}
     **/
    /**
     * Name: bookings >services> rename_staff.clicked. Evid: 218.
     * Event description: http://prntscr.com/dauc07.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: {private,group}
     * @param {bookingsServicesRenameStaffClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesRenameStaffClicked = function(params) {
        return this.bi.log(__assign({
            evid: 218
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileLogEventParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} message - the message
     * @property {GUID} biToken - null
     * @property {string} severity - {error/warning/debug}
     **/
    /**
     * Name: bookings > mobile log event. Evid: 641.
     * Event description: bookings > mobile log event (owner side).
    
     * bookingsPlatform - Type: string. Desc: null
     *
     * businessId - Type: guid. Desc: business_id
     *
     * message - Type: string. Desc: the message
     *
     * biToken - Type: guid.
     *
     * severity - Type: string. Desc: {error/warning/debug}
     * @param {bookingsMobileLogEventParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileLogEvent = function(params) {
        return this.bi.log(__assign({
            evid: 641
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectExternalCalendarByOauthSuccessFailureParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} calendarType - google, ical, outlook
     * @property {string} errorMessage - -
     * @property {GUID} biToken - -
     * @property {string} providerAppDefId - -
     * @property {string} scheduleId - -
     * @property {GUID} staffId - staff_id
     * @property {boolean} success - T if success F if failure
     **/
    /**
     * Name: bookings > connect external calendar by OAuth > success/failure. Evid: 633.
     * Event description: sync external calendar by OAuth.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * calendarType - Type: string. Desc: google, ical, outlook
     *
     * errorMessage - Type: string. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * providerAppDefId - Type: string. Desc: -
     *
     * scheduleId - Type: string. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * success - Type: bool. Desc: T if success F if failure
     * @param {bookingsConnectExternalCalendarByOauthSuccessFailureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectExternalCalendarByOauthSuccessFailure = function(params) {
        return this.bi.log(__assign({
            evid: 633
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetSettingsServicesFilterParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} filterBy - service name/location
     * @property {string} location_choice - custom/business
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > widget settings > services filter. Evid: 449.
     * Event description: user chooses which services to display.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * filterBy - Type: string. Desc: service name/location
     *
     * location_choice - Type: string. Desc: custom/business
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsWidgetSettingsServicesFilterParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetSettingsServicesFilter = function(params) {
        return this.bi.log(__assign({
            evid: 449
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsCancelPaymentParams
     * @property {string} action - -
     * @property {GUID} bookingId - -
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} contactId - -
     * @property {GUID} location_guid - location_id
     * @property {GUID} biToken - -
     * @property {string} paymentProvider - -
     * @property {number} price - -
     * @property {string} referralInfo - -
     * @property {string} scheduleId - schedule_id
     * @property {GUID} serviceId - -
     * @property {string} sessionId - session_id
     * @property {string} staffId - staff_id
     * @property {string} timeslot - timeslot
     * @property {string} serviceType - -
     **/
    /**
     * Name: bookings > payments > cancel payment. Evid: 489.
     * Event description: https://zpl.io/2976XLp.
    
     * action - Type: string. Desc: -
     *
     * bookingId - Type: guid. Desc: -
     *
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * contactId - Type: guid. Desc: -
     *
     * location_guid - Type: guid. Desc: location_id
     *
     * biToken - Type: guid. Desc: -
     *
     * paymentProvider - Type: string. Desc: -
     *
     * price - Type: numeric. Desc: -
     *
     * referralInfo - Type: string. Desc: -
     *
     * scheduleId - Type: string. Desc: schedule_id
     *
     * serviceId - Type: guid. Desc: -
     *
     * sessionId - Type: string. Desc: session_id
     *
     * staffId - Type: string. Desc: staff_id
     *
     * timeslot - Type: string. Desc: timeslot
     *
     * serviceType - Type: string. Desc: -
     * @param {bookingsPaymentsCancelPaymentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsCancelPayment = function(params) {
        return this.bi.log(__assign({
            evid: 489
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesDealerComponentClickParams
     * @property {string} bannerLocationOnPage - {Left,Center,Right}
     * @property {string} bookingsPlatform - _
     * @property {GUID} businessId - _
     * @property {string} clickType - {chevron_cta, more_actions}
     * @property {GUID} contactId - _
     * @property {string} jsonData - json
     * @property {GUID} biToken - msid
     * @property {GUID} offer_id - offer guid
     * @property {string} target_url - the banner link url
     * @property {GUID} visitor_id - _
     **/
    /**
     * Name: bookings > services > Dealer Component.Click. Evid: 486.
     * Event description: Click on dealer component on the services list.
    
     * bannerLocationOnPage - Type: string. Desc: {Left,Center,Right}
     *
     * bookingsPlatform - Type: string. Desc: _
     *
     * businessId - Type: guid. Desc: _
     *
     * clickType - Type: string. Desc: {chevron_cta, more_actions}
     *
     * contactId - Type: guid. Desc: _
     *
     * jsonData - Type: string. Desc: json
     *
     * biToken - Type: guid. Desc: msid
     *
     * offer_id - Type: guid. Desc: offer guid
     *
     * target_url - Type: string. Desc: the banner link url
     *
     * visitor_id - Type: guid. Desc: _
     * @param {bookingsServicesDealerComponentClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesDealerComponentClick = function(params) {
        return this.bi.log(__assign({
            evid: 486
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgOptInClickParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg > opt in.click. Evid: 393.
     * Event description: click on RWG opt in.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgOptInClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgOptInClick = function(params) {
        return this.bi.log(__assign({
            evid: 393
        }, params));
    };
    /**
     * @typedef {Object} bookingsFeaturePopupClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - video conference on service form= "service_video" / {staff} / NULL=payments
     * @property {string} selection - {find_out_more, update, cancel, got_it, zoom, connect_zoom, custom_link}
     **/
    /**
     * Name: bookings >feature_popup . clicked. Evid: 193.
     * Event description: payments_welcome_popup_open / staff popup is clicked.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: video conference on service form= "service_video" / {staff} / NULL=payments
     *
     * selection - Type: string. Desc: {find_out_more, update, cancel, got_it, zoom, connect_zoom, custom_link}
     * @param {bookingsFeaturePopupClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsFeaturePopupClicked = function(params) {
        return this.bi.log(__assign({
            evid: 193
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormAddNewFieldClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Booking Form>add new field. click. Evid: 409.
     * Event description: http://prntscr.com/f7np8w.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsBookingFormAddNewFieldClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormAddNewFieldClick = function(params) {
        return this.bi.log(__assign({
            evid: 409
        }, params));
    };
    /**
     * @typedef {Object} bookingsProvisonedWithMlParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings_provisoned_with_ml. Evid: 458.
     * Event description: bookings with multilocation was provisioned on site.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsProvisonedWithMlParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsProvisonedWithMl = function(params) {
        return this.bi.log(__assign({
            evid: 458
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneappFilterAgendaParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {boolean} filterApplied - true if filtered by a certain location
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > oneapp > filter agenda. Evid: 450.
     * Event description: user filtered agenda by location.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * filterApplied - Type: bool. Desc: true if filtered by a certain location
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsOneappFilterAgendaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneappFilterAgenda = function(params) {
        return this.bi.log(__assign({
            evid: 450
        }, params));
    };
    /**
     * @typedef {Object} bookingsBulkSchedulingNewSessionsSavedParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} location - []
     * @property {GUID} biToken - []
     * @property {number} numOfSessions - number of sessions saved
     * @property {string} origin - modal_over_service_form
     * @property {string} serviceId - []
     * @property {string} sessionData - json containing the data on each session saved
     * @property {boolean} success - []
     **/
    /**
     * Name: Bookings > bulk scheduling > new sessions saved. Evid: 428.
     * Event description: user. saved new sessions from bulk scheduling modal.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * location - Type: string. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * numOfSessions - Type: numeric. Desc: number of sessions saved
     *
     * origin - Type: string. Desc: modal_over_service_form
     *
     * serviceId - Type: string. Desc: []
     *
     * sessionData - Type: string. Desc: json containing the data on each session saved
     *
     * success - Type: bool. Desc: []
     * @param {bookingsBulkSchedulingNewSessionsSavedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBulkSchedulingNewSessionsSaved = function(params) {
        return this.bi.log(__assign({
            evid: 428
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarExportItemClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {string} itemName - {Export Staff Hours, Export Booking List}
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar > export.item.click. Evid: 369.
     * Event description: Clicking on the item within the dropdown list. https://zpl.io/V47xe98.
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * itemName - Type: string. Desc: {Export Staff Hours, Export Booking List}
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsCalendarExportItemClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarExportItemClick = function(params) {
        return this.bi.log(__assign({
            evid: 369
        }, params));
    };
    /**
     * @typedef {Object} bookingsBoSettingsNavigationFromToParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} buttonOrigin - where did the user click from? (settings/services list/waitlist settings)
     * @property {GUID} biToken - msid
     * @property {string} targetInfo - target page
     **/
    /**
     * Name: Bookings > BO Settings > navigation from/to. Evid: 332.
     * Event description: clicking on the  button from the services list to go to setting or clicking on the button from Bookings settings to go to Bookings services.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * buttonOrigin - Type: string. Desc: where did the user click from? (settings/services list/waitlist settings)
     *
     * biToken - Type: guid. Desc: msid
     *
     * targetInfo - Type: string. Desc: target page
     * @param {bookingsBoSettingsNavigationFromToParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBoSettingsNavigationFromTo = function(params) {
        return this.bi.log(__assign({
            evid: 332
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistorySortParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} direction - {Desc, Asc}
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {payments, customers_list}
     * @property {string} sortBy - {name,last_appointment,next_appointment, appointment_date_open_trans, appointment_date_closed_trans, staff_member_closed_trans,staff_member_open_trans }
     **/
    /**
     * Name: bookings > Client History > sort. Evid: 209.
     * Event description: sort on  Client History > Customer List http://prntscr.com/d53ijc.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * direction - Type: string. Desc: {Desc, Asc}
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {payments, customers_list}
     *
     * sortBy - Type: string. Desc: {name,last_appointment,next_appointment, appointment_date_open_trans, appointment_date_closed_trans, staff_member_closed_trans,staff_member_open_trans }
     * @param {bookingsClientHistorySortParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistorySort = function(params) {
        return this.bi.log(__assign({
            evid: 209
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneappFilterServiceListParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {boolean} filterApplied - true if filter was applied
     * @property {string} filterBy - location/categpry
     * @property {GUID} biToken - []
     **/
    /**
     * Name: bookings > oneapp > filter service list. Evid: 445.
     * Event description: UoU filtered service list.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * filterApplied - Type: bool. Desc: true if filter was applied
     *
     * filterBy - Type: string. Desc: location/categpry
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsOneappFilterServiceListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneappFilterServiceList = function(params) {
        return this.bi.log(__assign({
            evid: 445
        }, params));
    };
    /**
     * @typedef {Object} bookingsReminderSmsToggleParams
     * @property {string} action - {ON,OFF}
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     **/
    /**
     * Name: bookings > reminder_sms_toggle. Evid: 365.
     * Event description: turn on\off reminder sms toggle
    https://zpl.io/aXJNBqP.
    
     * action - Type: string. Desc: {ON,OFF}
     *
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     * @param {bookingsReminderSmsToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsReminderSmsToggle = function(params) {
        return this.bi.log(__assign({
            evid: 365
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppBannerClickOnInviteParams
     * @property {string} bannerType - {invite_to_service}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} screenName - {owner_class_empty, owner_class, owner_private, member_success_screen}
     **/
    /**
     * Name: Bookings --> OneApp --> Banner - click on invite. Evid: 317.
     * Event description: Click on invite inside the banner.
    
     * bannerType - Type: string. Desc: {invite_to_service}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * screenName - Type: string. Desc: {owner_class_empty, owner_class, owner_private, member_success_screen}
     * @param {bookingsOneAppBannerClickOnInviteParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppBannerClickOnInvite = function(params) {
        return this.bi.log(__assign({
            evid: 317
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsCalendarSettingsSaveParams
     * @property {string} bookingsPlatform - null
     * @property {boolean} business_hours_added - Did the user clicked to add an additional business hours
     * @property {number} businessHoursCounter - number of business hours sections chosen
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {number} timeInterval - time interval
     * @property {string} timezone - -
     * @property {boolean} timezoneChanged - was the timezone changed
     **/
    /**
     * Name: bookings >Business Options> calendar settings.save. Evid: 227.
     * Event description: send when a user finish filling business_setup > calendar settings http://prntscr.com/dogmqk.
    
     * bookingsPlatform - Type: string.
     *
     * business_hours_added - Type: bool. Desc: Did the user clicked to add an additional business hours
     *
     * businessHoursCounter - Type: numeric. Desc: number of business hours sections chosen
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * timeInterval - Type: numeric. Desc: time interval
     *
     * timezone - Type: string. Desc: -
     *
     * timezoneChanged - Type: bool. Desc: was the timezone changed
     * @param {bookingsBusinessOptionsCalendarSettingsSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsCalendarSettingsSave = function(params) {
        return this.bi.log(__assign({
            evid: 227
        }, params));
    };
    /**
     * @typedef {Object} clickOnEditFormDropdownParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: edit service form. Evid: 396.
     * Event description: click on 'edit form' dropdown.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {clickOnEditFormDropdownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnEditFormDropdown = function(params) {
        return this.bi.log(__assign({
            evid: 396
        }, params));
    };
    /**
     * @typedef {Object} bookingsClickOnAddToWaitlistFromEmptyStateParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - session card/member card
     * @property {string} serviceId - -
     * @property {string} triggerBy - Owner/Member
     * @property {string} value - Add/Remove
     **/
    /**
     * Name: Bookings > Click on "Add to Waitlist" from empty state. Evid: 352.
     * Event description: Click on "Add to Waitlist" from the waiting list empty state.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: session card/member card
     *
     * serviceId - Type: string. Desc: -
     *
     * triggerBy - Type: string. Desc: Owner/Member
     *
     * value - Type: string. Desc: Add/Remove
     * @param {bookingsClickOnAddToWaitlistFromEmptyStateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClickOnAddToWaitlistFromEmptyState = function(params) {
        return this.bi.log(__assign({
            evid: 352
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectPaidPlanModalConnectDisconnectParams
     * @property {string} action - {connect,disconnect}
     * @property {string} bookingsPlatform - null if old server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {GUID} planGuid - plan_id
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: bookings > connect paid plan modal > connect/disconnect. Evid: 357.
     * Event description: indicating connect/disconnect paid plan to booking service using modal
    The plan modal screenshot: https://zpl.io/VOpqy6k.
    
     * action - Type: string. Desc: {connect,disconnect}
     *
     * bookingsPlatform - Type: string. Desc: null if old server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * planGuid - Type: guid. Desc: plan_id
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsConnectPaidPlanModalConnectDisconnectParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectPaidPlanModalConnectDisconnect = function(params) {
        return this.bi.log(__assign({
            evid: 357
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormSaveFieldCheckParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} changed - T= a change was made
     * @property {boolean} descriptionHidden - only for title, T=hide desc is checked
     * @property {string} field - {title,name,email,phone_number,address..}
     * @property {string} fieldType - {email,phone_number,date, drop_down,paragraph, short_text} SWITCHED WITH FIELD!!
     * @property {boolean} isRequired - T=required field (mandatory)
     * @property {GUID} biToken - null
     * @property {boolean} requiredFieldChecked - T=checked (T for mandatory fields).
     **/
    /**
     * Name: bookings >Booking Form>save field. check. Evid: 407.
     * Event description: http://prntscr.com/f7mwgt.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * changed - Type: bool. Desc: T= a change was made
     *
     * descriptionHidden - Type: bool. Desc: only for title, T=hide desc is checked
     *
     * field - Type: string. Desc: {title,name,email,phone_number,address..}
     *
     * fieldType - Type: string. Desc: {email,phone_number,date, drop_down,paragraph, short_text} SWITCHED WITH FIELD!!
     *
     * isRequired - Type: bool. Desc: T=required field (mandatory)
     *
     * biToken - Type: guid.
     *
     * requiredFieldChecked - Type: bool. Desc: T=checked (T for mandatory fields).
     * @param {bookingsBookingFormSaveFieldCheckParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormSaveFieldCheck = function(params) {
        return this.bi.log(__assign({
            evid: 407
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetMemberLoginDetailsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - T/F
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > app_set > member login. details. click. Evid: 230.
     * Event description: http://prntscr.com/de2sxd.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool. Desc: T/F
     *
     * biToken - Type: guid.
     * @param {bookingsAppSetMemberLoginDetailsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetMemberLoginDetailsClick = function(params) {
        return this.bi.log(__assign({
            evid: 230
        }, params));
    };
    /**
     * @typedef {Object} bookingsScheduleANewSessionParams
     * @property {string} bookingsPlatform - {new_bookings_server}
     * @property {GUID} businessId - business_id
     * @property {string} ctaType - on_calendar/add_sessions
     * @property {boolean} emptyState - TRUE if empty state
     * @property {string} location - {service_form}
     * @property {GUID} biToken - msid
     * @property {string} serviceId - {service_id}
     * @property {string} type - {class,course}
     **/
    /**
     * Name: Bookings --> Service Form (Multi Type) --> Schedule session.click. Evid: 387.
     * Event description: click in schedule cta in service form.
    
     * bookingsPlatform - Type: string. Desc: {new_bookings_server}
     *
     * businessId - Type: guid. Desc: business_id
     *
     * ctaType - Type: string. Desc: on_calendar/add_sessions
     *
     * emptyState - Type: bool. Desc: TRUE if empty state
     *
     * location - Type: string. Desc: {service_form}
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: {service_id}
     *
     * type - Type: string. Desc: {class,course}
     * @param {bookingsScheduleANewSessionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsScheduleANewSession = function(params) {
        return this.bi.log(__assign({
            evid: 387
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffMoreActionsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {GUID} staffId - -
     **/
    /**
     * Name: bookings > staff >more actions. click. Evid: 190.
     * Event description: click on the more actions 3 dots on staff tab.
    http://prntscr.com/by6yvi.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * staffId - Type: guid. Desc: -
     * @param {bookingsStaffMoreActionsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffMoreActionsClick = function(params) {
        return this.bi.log(__assign({
            evid: 190
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsConnectParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {paypal,stripe,square,bbpos} NULL=paypal
     * @property {string} referralInfo - null
     * @property {boolean} success - -
     **/
    /**
     * Name: bookings > payments.connect. Evid: 147.
     * Event description: payments.send_paypal_account.success.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe,square,bbpos} NULL=paypal
     *
     * referralInfo - Type: string.
     *
     * success - Type: bool. Desc: -
     * @param {bookingsPaymentsConnectParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsConnect = function(params) {
        return this.bi.log(__assign({
            evid: 147
        }, params));
    };
    /**
     * @typedef {Object} bookingsConfirmationEmailToggleParams
     * @property {string} action - {ON,OFF}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - bookings instance_id
     * @property {GUID} msid - msid
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > confirmation_email_toggle. Evid: 482.
     * Event description: turn on\off confirmation email toggle.
    
     * action - Type: string. Desc: {ON,OFF}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: bookings instance_id
     *
     * msid - Type: guid. Desc: msid
     *
     * biToken - Type: guid.
     * @param {bookingsConfirmationEmailToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConfirmationEmailToggle = function(params) {
        return this.bi.log(__assign({
            evid: 482
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsBookingsPolicySaveParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} cancellation_policy_filled - T= filled, F= empty
     * @property {number} hoursBeforeBookings - since 3.10: minutes and not hours; when is the latest that clients can book the session (in hours)
     * @property {number} hoursBeforeBookingsLimit - since 3.10: minutes and not hours; how long before the session can clients start bookings (in hours)
     * @property {number} hoursBeforeCancellation - since 3.10: minutes and not hours; customers can cancel x hrs before
     * @property {boolean} limit_bookings_in_advance - t/f (toggle on or off)
     * @property {GUID} biToken - null
     * @property {string} origin - OneApp/desktop
     * @property {string} save_type - {timeslot_saved,general_settings_saved}
     * @property {string} timeslot - {service_duration,custom}
     * @property {number} waitlistCapacity - Waitlist Capacity - if waitlist_enabled = true. Else - null
     * @property {boolean} waitlistEnabled - true if the toggle is on and false otherwise
     * @property {number} waitlistOfferSpot - value in minutes
     **/
    /**
     * Name: Bookings > Save Bookings Policy. Evid: 224.
     * Event description: http://prntscr.com/dofvq5.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * cancellation_policy_filled - Type: bool. Desc: T= filled, F= empty
     *
     * hoursBeforeBookings - Type: numeric. Desc: since 3.10: minutes and not hours; when is the latest that clients can book the session (in hours)
     *
     * hoursBeforeBookingsLimit - Type: numeric. Desc: since 3.10: minutes and not hours; how long before the session can clients start bookings (in hours)
     *
     * hoursBeforeCancellation - Type: numeric. Desc: since 3.10: minutes and not hours; customers can cancel x hrs before
     *
     * limit_bookings_in_advance - Type: bool. Desc: t/f (toggle on or off)
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: OneApp/desktop
     *
     * save_type - Type: string. Desc: {timeslot_saved,general_settings_saved}
     *
     * timeslot - Type: string. Desc: {service_duration,custom}
     *
     * waitlistCapacity - Type: numeric. Desc: Waitlist Capacity - if waitlist_enabled = true. Else - null
     *
     * waitlistEnabled - Type: bool. Desc: true if the toggle is on and false otherwise
     *
     * waitlistOfferSpot - Type: numeric. Desc: value in minutes
     * @param {bookingsBusinessOptionsBookingsPolicySaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsBookingsPolicySave = function(params) {
        return this.bi.log(__assign({
            evid: 224
        }, params));
    };
    /**
     * @typedef {Object} bookingsSyncCalendarSendVerificationSuccessParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} calendarType - null
     * @property {string} errorMessage - null
     * @property {GUID} linkedResourceId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     * @property {boolean} success - null
     **/
    /**
     * Name: bookings > manage connections modal > sync_calendar_request. Evid: 500.
     * Event description: sync calendar request was sent by email.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * calendarType - Type: string.
     *
     * errorMessage - Type: string.
     *
     * linkedResourceId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * success - Type: bool.
     * @param {bookingsSyncCalendarSendVerificationSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSyncCalendarSendVerificationSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 500
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryAppointmentHistoryAddNoteClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > Client History >  Appointment History >  add note. click. Evid: 211.
     * Event description: click on Client History >  Appointment History >  add note http://prntscr.com/d5487g.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsClientHistoryAppointmentHistoryAddNoteClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryAppointmentHistoryAddNoteClick = function(params) {
        return this.bi.log(__assign({
            evid: 211
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsParticipantNameClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isEmptyState - True - empty state
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {service_list,service_form}
     * @property {string} serviceId - service_id
     * @property {string} type - {class,course}
     **/
    /**
     * Name: Bookings > Schedule Modal > Open. Evid: 244.
     * Event description: Open the schedule modal (service list or service form). When clicking on the modal - the users redirect to the calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isEmptyState - Type: bool. Desc: True - empty state
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {service_list,service_form}
     *
     * serviceId - Type: string. Desc: service_id
     *
     * type - Type: string. Desc: {class,course}
     * @param {bookingsClubsGroupSessionsParticipantNameClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsParticipantNameClicked = function(params) {
        return this.bi.log(__assign({
            evid: 244
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveServiceClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} category - {empty,new,existing}
     * @property {boolean} categoryExists - F = empty category
     * @property {GUID} clubId - oneapp
     * @property {boolean} duration_empty - -
     * @property {string} errorReason - if null- success
     * @property {boolean} is_member - TRUE only if membership pricing is chosen AND a connected plan is chosen as well
     * @property {string} location_choice - {my_place,customer's place,other}
     * @property {GUID} biToken - null
     * @property {number} participants - number of max participants in service
     * @property {boolean} photo_empty - -
     * @property {string} plan_type - "Priced as": {single_session / membership}
     * @property {boolean} price_empty - -
     * @property {string} price_selection - {price_paid, price_free, empty}
     * @property {boolean} price_text_empty - -
     * @property {string} save_type - {create_new, save_changes}
     * @property {boolean} service_description_empty - -
     * @property {string} service_id - -
     * @property {boolean} service_name_empty - null
     * @property {string} type - { individual,class,course}
     **/
    /**
     * Name: bookings > save_service.click. Evid: 136.
     * Event description: save service click https://jira.wixpress.com/browse/SCHED-1942?filter=-2.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * category - Type: string. Desc: {empty,new,existing}
     *
     * categoryExists - Type: bool. Desc: F = empty category
     *
     * clubId - Type: guid. Desc: oneapp
     *
     * duration_empty - Type: bool. Desc: -
     *
     * errorReason - Type: string. Desc: if null- success
     *
     * is_member - Type: bool. Desc: TRUE only if membership pricing is chosen AND a connected plan is chosen as well
     *
     * location_choice - Type: string. Desc: {my_place,customer's place,other}
     *
     * biToken - Type: guid.
     *
     * participants - Type: numeric. Desc: number of max participants in service
     *
     * photo_empty - Type: bool. Desc: -
     *
     * plan_type - Type: string. Desc: "Priced as": {single_session / membership}
     *
     * price_empty - Type: bool. Desc: -
     *
     * price_selection - Type: string. Desc: {price_paid, price_free, empty}
     *
     * price_text_empty - Type: bool. Desc: -
     *
     * save_type - Type: string. Desc: {create_new, save_changes}
     *
     * service_description_empty - Type: bool. Desc: -
     *
     * service_id - Type: string. Desc: -
     *
     * service_name_empty - Type: bool.
     *
     * type - Type: string. Desc: { individual,class,course}
     * @param {bookingsSaveServiceClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveServiceClick = function(params) {
        return this.bi.log(__assign({
            evid: 136
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInNameClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {DateTime} time_to_session - time to session  that appear on screen
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> name clicked. Evid: 260.
     * Event description: When user clicks on a name in the name search list..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * time_to_session - Type: datetime. Desc: time to session  that appear on screen
     * @param {bookingsClubsGroupSessionsSelfCheckInNameClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInNameClicked = function(params) {
        return this.bi.log(__assign({
            evid: 260
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceListOpenPlanTypeClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} location - {upper_button , service_scope}
     * @property {GUID} biToken - -
     * @property {string} type - {create_new_plan, manage_memberships}
     **/
    /**
     * Name: bookings > service_list > open plan type.click. Evid: 287.
     * Event description: http://prntscr.com/ko51zz - when clicking on the button that shows the selection between packages and membership.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * location - Type: string. Desc: {upper_button , service_scope}
     *
     * biToken - Type: guid. Desc: -
     *
     * type - Type: string. Desc: {create_new_plan, manage_memberships}
     * @param {bookingsServiceListOpenPlanTypeClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceListOpenPlanTypeClick = function(params) {
        return this.bi.log(__assign({
            evid: 287
        }, params));
    };
    /**
     * @typedef {Object} bookingsCreateNewCategoryParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} type - private \ group \ none
     **/
    /**
     * Name: bookings > create_new_category. Evid: 144.
     * Event description: sent when a user add a new category in the edit service screen.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: private \ group \ none
     * @param {bookingsCreateNewCategoryParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCreateNewCategory = function(params) {
        return this.bi.log(__assign({
            evid: 144
        }, params));
    };
    /**
     * @typedef {Object} bookingsUpdatePaymentStatusParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - old or new server
     * @property {GUID} businessId - business_id
     * @property {GUID} contactId - contact_id
     * @property {GUID} invoice_id - invoice_id
     * @property {GUID} biToken - null
     * @property {string} origin - calendar pop-up/contact panel/participants pane/participants_group_modal
     * @property {GUID} paidPlanId - paid plan id
     * @property {string} serviceId - service_id
     * @property {string} sessionId - session_id
     * @property {string} type - service type (ind/class/course)
     * @property {string} value - deposit paid / fully paid / Not Paid /Paid in Person / Paid with a paid plan / Paid with invoice / fully paid ; invoice deleted
     **/
    /**
     * Name: Bookings --> Update payment status. Evid: 348.
     * Event description: When a user updates the payment status of a client.
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string. Desc: old or new server
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: guid. Desc: contact_id
     *
     * invoice_id - Type: guid. Desc: invoice_id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: calendar pop-up/contact panel/participants pane/participants_group_modal
     *
     * paidPlanId - Type: guid. Desc: paid plan id
     *
     * serviceId - Type: string. Desc: service_id
     *
     * sessionId - Type: string. Desc: session_id
     *
     * type - Type: string. Desc: service type (ind/class/course)
     *
     * value - Type: string. Desc: deposit paid / fully paid / Not Paid /Paid in Person / Paid with a paid plan / Paid with invoice / fully paid ; invoice deleted
     * @param {bookingsUpdatePaymentStatusParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsUpdatePaymentStatus = function(params) {
        return this.bi.log(__assign({
            evid: 348
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppTapOnViewMoreFormResponsesCtaInCoursePageParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {boolean} emptyState - TRUE if no participants in course. Else FALSE
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - course
     **/
    /**
     * Name: Bookings --> OneApp --> Tap on "View More Form Responses"  cta in course page. Evid: 390.
     * Event description: tap on a "View More Form Responses" cta in course page.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * emptyState - Type: bool. Desc: TRUE if no participants in course. Else FALSE
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: course
     * @param {bookingsOneAppTapOnViewMoreFormResponsesCtaInCoursePageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppTapOnViewMoreFormResponsesCtaInCoursePage = function(params) {
        return this.bi.log(__assign({
            evid: 390
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnAParticipantFromManageParticipantsParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} contactId - contact_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} serviceId - service_id
     * @property {string} tabName - null
     * @property {string} type - service type (currently only class)
     **/
    /**
     * Name: Bookings --> OneApp --> Click on a participant from "manage participants". Evid: 350.
     * Event description: tap on a participant from the "manage participants" page to open the menu. https://www.screencast.com/t/sHgc2vGOTROc.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: string. Desc: contact_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * serviceId - Type: string. Desc: service_id
     *
     * tabName - Type: string.
     *
     * type - Type: string. Desc: service type (currently only class)
     * @param {bookingsOneAppClickOnAParticipantFromManageParticipantsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnAParticipantFromManageParticipants = function(params) {
        return this.bi.log(__assign({
            evid: 350
        }, params));
    };
    /**
     * @typedef {Object} bookingsPreviewEditSmsReminderParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} sms_type - reminder
     **/
    /**
     * Name: bookings > preview\edit sms reminder. Evid: 366.
     * Event description: View sms reminders phrasing per service type
    https://zpl.io/291eWMY.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * sms_type - Type: string. Desc: reminder
     * @param {bookingsPreviewEditSmsReminderParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPreviewEditSmsReminder = function(params) {
        return this.bi.log(__assign({
            evid: 366
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsEmailsAddEmailClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} email_type - {confirmation,reminder,cancellation}
     * @property {string} location - {banner,email_edit)
     * @property {GUID} biToken - null
     * @property {string} type - not sent
     **/
    /**
     * Name: bookings > Business Options > Emails>add email.clicked. Evid: 242.
     * Event description: http://prntscr.com/ehxb81 - email_edit
    http://prntscr.com/ehxbui - banner.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * email_type - Type: string. Desc: {confirmation,reminder,cancellation}
     *
     * location - Type: string. Desc: {banner,email_edit)
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: not sent
     * @param {bookingsBusinessOptionsEmailsAddEmailClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsEmailsAddEmailClicked = function(params) {
        return this.bi.log(__assign({
            evid: 242
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInTurnOnClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> turn on clicked. Evid: 258.
     * Event description: When user clicks on turn on in the self check in screen.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInTurnOnClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInTurnOnClicked = function(params) {
        return this.bi.log(__assign({
            evid: 258
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnSessionMenuItemParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} item_name - broadcast/cancel_session/add_participant/invite/book/manage_participants/payment/check_in/message/call/View_form_Responses/3_dots/map/add_cv_link/participant
     * @property {GUID} biToken - msid
     * @property {number} numParticipants - how many participants are in the session
     * @property {GUID} service_id - service_id
     * @property {string} sessionId - --
     * @property {string} triggerBy - owner/member
     * @property {string} type - Service type (Class/Appointment)
     **/
    /**
     * Name: Bookings --> OneApp --> Click on Session Menu Item. Evid: 340.
     * Event description: Click on one of the items in the session card - class or 1:1 - member and owner.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * item_name - Type: string. Desc: broadcast/cancel_session/add_participant/invite/book/manage_participants/payment/check_in/message/call/View_form_Responses/3_dots/map/add_cv_link/participant
     *
     * biToken - Type: guid. Desc: msid
     *
     * numParticipants - Type: numeric. Desc: how many participants are in the session
     *
     * service_id - Type: guid. Desc: service_id
     *
     * sessionId - Type: string. Desc: --
     *
     * triggerBy - Type: string. Desc: owner/member
     *
     * type - Type: string. Desc: Service type (Class/Appointment)
     * @param {bookingsOneAppClickOnSessionMenuItemParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnSessionMenuItem = function(params) {
        return this.bi.log(__assign({
            evid: 340
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceListQuickLinksItemClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {string} link_name - {'Create Coupon','Manage Staff','Update Booking Settings','Accept Payment','Hire a Wix partner', 'RWG', 'Manage on the Go', 'View Analytics', 'Set work hours', 'Sync Google','Change Time Zone','Hire a Partner'}
     * @property {GUID} biToken - msid
     * @property {string} page_name - service_list, calendar
     **/
    /**
     * Name: bookings > BO > quick links. item.click. Evid: 362.
     * Event description: clicking on an item within the drop down list. https://zpl.io/a3D4ne8.
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * link_name - Type: string. Desc: {'Create Coupon','Manage Staff','Update Booking Settings','Accept Payment','Hire a Wix partner', 'RWG', 'Manage on the Go', 'View Analytics', 'Set work hours', 'Sync Google','Change Time Zone','Hire a Partner'}
     *
     * biToken - Type: guid. Desc: msid
     *
     * page_name - Type: string. Desc: service_list, calendar
     * @param {bookingsServiceListQuickLinksItemClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceListQuickLinksItemClick = function(params) {
        return this.bi.log(__assign({
            evid: 362
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarChangeViewParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} view - {week, day}
     **/
    /**
     * Name: bookings > calendar > change view. Evid: 232.
     * Event description: Today_calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * view - Type: string. Desc: {week, day}
     * @param {bookingsCalendarChangeViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarChangeView = function(params) {
        return this.bi.log(__assign({
            evid: 232
        }, params));
    };
    /**
     * @typedef {Object} bookingsSocialShareClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - currently only available in the service card
     * @property {GUID} service_id - service_id
     * @property {string} type - Service type {class, course, individual}
     **/
    /**
     * Name: Bookings --> Social Share click. Evid: 297.
     * Event description: Clicking on the share button from a service.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: currently only available in the service card
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: Service type {class, course, individual}
     * @param {bookingsSocialShareClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSocialShareClick = function(params) {
        return this.bi.log(__assign({
            evid: 297
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceListPlanClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} location - {upper_button , service_scope, popup_service_with_paid_plan_intent, service_form_connect_plan_dropdown, service_form_connect_plan_empty_state}
     * @property {GUID} biToken - -
     * @property {string} target_page - {paid_plan_form, paid_plans_modal}
     * @property {string} type - {create_new_limited-plan, create_new_unlimited-plan, view_plan_list , add_to_package,create_new_package , view_plan_list_package , add_to_package}
     **/
    /**
     * Name: bookings > service_list > plan.click. Evid: 280.
     * Event description: view or create price plan from service-list.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * location - Type: string. Desc: {upper_button , service_scope, popup_service_with_paid_plan_intent, service_form_connect_plan_dropdown, service_form_connect_plan_empty_state}
     *
     * biToken - Type: guid. Desc: -
     *
     * target_page - Type: string. Desc: {paid_plan_form, paid_plans_modal}
     *
     * type - Type: string. Desc: {create_new_limited-plan, create_new_unlimited-plan, view_plan_list , add_to_package,create_new_package , view_plan_list_package , add_to_package}
     * @param {bookingsServiceListPlanClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceListPlanClick = function(params) {
        return this.bi.log(__assign({
            evid: 280
        }, params));
    };
    /**
     * @typedef {Object} bookingsSatffBackToWorkHoursParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Satff > Back to "Work hours". Evid: 327.
     * Event description: clicking on "back" from the toast to go to the "work hours" page.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsSatffBackToWorkHoursParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSatffBackToWorkHours = function(params) {
        return this.bi.log(__assign({
            evid: 327
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgOverflowClickParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - RWG find your business, RWG set up your business
     **/
    /**
     * Name: bookings > rwg >overflow. click. Evid: 375.
     * Event description: click on the more actions 3 dots on RWG
    https://zpl.io/2vpxg8j.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: RWG find your business, RWG set up your business
     * @param {bookingsRwgOverflowClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgOverflowClick = function(params) {
        return this.bi.log(__assign({
            evid: 375
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in clicked. Evid: 257.
     * Event description: When user clicks on self checkin in the group session screen.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInClicked = function(params) {
        return this.bi.log(__assign({
            evid: 257
        }, params));
    };
    /**
     * @typedef {Object} bookingsNoEmailIsConnectedRibbonShowOrClickedParams
     * @property {string} action - {show, click} click=define email
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > no email is connected ribbon.show or clicked. Evid: 226.
     * Event description: sent when the "no email is connected" ribbon appears\clicked - http://prntscr.com/dog7v6.
    
     * action - Type: string. Desc: {show, click} click=define email
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsNoEmailIsConnectedRibbonShowOrClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsNoEmailIsConnectedRibbonShowOrClicked = function(params) {
        return this.bi.log(__assign({
            evid: 226
        }, params));
    };
    /**
     * @typedef {Object} bookingsReminderEmailToggleParams
     * @property {string} action - {ON,OFF}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > reminder_email_toggle. Evid: 158.
     * Event description: turn on\off reminder email toggle.
    
     * action - Type: string. Desc: {ON,OFF}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsReminderEmailToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsReminderEmailToggle = function(params) {
        return this.bi.log(__assign({
            evid: 158
        }, params));
    };
    /**
     * @typedef {Object} bookingsSyncCalendarLinkToResourceFailureParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} linkedResourceId - -
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id
     **/
    /**
     * Name: bookings > sync calendar > link_to_resource.failure. Evid: 622.
     * Event description: link to a resource before sync request.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * linkedResourceId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id
     * @param {bookingsSyncCalendarLinkToResourceFailureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSyncCalendarLinkToResourceFailure = function(params) {
        return this.bi.log(__assign({
            evid: 622
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveBusinessInfoParams
     * @property {boolean} appt_unit_empty - -
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} business_name_empty - -
     * @property {boolean} cancellation_policy_empty - null
     * @property {boolean} city_empty - -
     * @property {boolean} email_empty - -
     * @property {string} errorReason - if null- success
     * @property {string} location_choice - {on_going, address}
     * @property {GUID} biToken - null
     * @property {boolean} other_empty - -
     * @property {boolean} phone_empty - -
     * @property {string} section - {business_details,business_hours, scheduling_policies_confirmation_email}
     * @property {boolean} street_empty - -
     * @property {boolean} zip_empty - -
     **/
    /**
     * Name: bookings > save_business_info. Evid: 139.
     * Event description: save business info click.
    
     * appt_unit_empty - Type: bool. Desc: -
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * business_name_empty - Type: bool. Desc: -
     *
     * cancellation_policy_empty - Type: bool.
     *
     * city_empty - Type: bool. Desc: -
     *
     * email_empty - Type: bool. Desc: -
     *
     * errorReason - Type: string. Desc: if null- success
     *
     * location_choice - Type: string. Desc: {on_going, address}
     *
     * biToken - Type: guid.
     *
     * other_empty - Type: bool. Desc: -
     *
     * phone_empty - Type: bool. Desc: -
     *
     * section - Type: string. Desc: {business_details,business_hours, scheduling_policies_confirmation_email}
     *
     * street_empty - Type: bool. Desc: -
     *
     * zip_empty - Type: bool. Desc: -
     * @param {bookingsSaveBusinessInfoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveBusinessInfo = function(params) {
        return this.bi.log(__assign({
            evid: 139
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetCategoryMenuSelectionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services_list,calendar,booking_info,confirmation,thank_you}
     * @property {string} referralInfo - {NULL= app settings, widget}
     * @property {string} selection - {top, left, no_display}
     * @property {string} pagetype - {private/group}
     **/
    /**
     * Name: bookings > app_set.category_menu_selection. Evid: 125.
     * Event description: category_menu_selection - app settings . since 14/12/15.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services_list,calendar,booking_info,confirmation,thank_you}
     *
     * referralInfo - Type: string. Desc: {NULL= app settings, widget}
     *
     * selection - Type: string. Desc: {top, left, no_display}
     *
     * pagetype - Type: string. Desc: {private/group}
     * @param {bookingsAppSetCategoryMenuSelectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetCategoryMenuSelection = function(params) {
        return this.bi.log(__assign({
            evid: 125
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarPickDateParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - null
     * @property {number} endTime - null
     * @property {string} filterName - []
     * @property {GUID} biToken - null
     * @property {string} pageName - page name. example bookings list
     * @property {string} period - null
     * @property {boolean} preDefinedPeriod - null
     * @property {number} startTime - null
     **/
    /**
     * Name: bookings >BO>pick date. Evid: 220.
     * Event description: http://prntscr.com/dcfq20.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid.
     *
     * endTime - Type: numeric.
     *
     * filterName - Type: string. Desc: []
     *
     * biToken - Type: guid.
     *
     * pageName - Type: string. Desc: page name. example bookings list
     *
     * period - Type: string.
     *
     * preDefinedPeriod - Type: bool.
     *
     * startTime - Type: numeric.
     * @param {bookingsCalendarPickDateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarPickDate = function(params) {
        return this.bi.log(__assign({
            evid: 220
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppNextAfterChoosingBroadcastRecipientsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - one_app_course_owner_page
     * @property {GUID} service_id - service_id
     * @property {string} type - course
     **/
    /**
     * Name: Bookings --> OneApp --> manage cta in owner course page. Evid: 341.
     * Event description: https://zpl.io/ad5EdL5.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: one_app_course_owner_page
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: course
     * @param {bookingsOneAppNextAfterChoosingBroadcastRecipientsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppNextAfterChoosingBroadcastRecipients = function(params) {
        return this.bi.log(__assign({
            evid: 341
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddWidgetClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > add widget.click. Evid: 207.
     * Event description: bookings > add_widget     http://prntscr.com/d492w3.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     * @param {bookingsAddWidgetClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddWidgetClick = function(params) {
        return this.bi.log(__assign({
            evid: 207
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusInfoChangedBizManagerParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} field - {email, phone,name}
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > bus_info > changed (biz manager). Evid: 419.
     * Event description: send when a user updates one of the business info fields
    if more fields are added to send.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * field - Type: string. Desc: {email, phone,name}
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsBusInfoChangedBizManagerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusInfoChangedBizManager = function(params) {
        return this.bi.log(__assign({
            evid: 419
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryImportCustomersClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} location - {empty state, customer list}
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings >Client History > import customers. click. Evid: 201.
     * Event description: import customers click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * location - Type: string. Desc: {empty state, customer list}
     *
     * biToken - Type: guid.
     * @param {bookingsClientHistoryImportCustomersClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryImportCustomersClick = function(params) {
        return this.bi.log(__assign({
            evid: 201
        }, params));
    };
    /**
     * @typedef {Object} copyOfBookingsCompareServiceTypesClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} linkUrl - link to KB
     * @property {string} location - {RWG Find Your Business,RWG Business Address, RWG Bookings Services}
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > 'Learn More' click multi-location. Evid: 481.
     * Event description: Click 'Learn More' on RWG multi-locations.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * linkUrl - Type: string. Desc: link to KB
     *
     * location - Type: string. Desc: {RWG Find Your Business,RWG Business Address, RWG Bookings Services}
     *
     * biToken - Type: guid. Desc: msid
     * @param {copyOfBookingsCompareServiceTypesClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.copyOfBookingsCompareServiceTypesClick = function(params) {
        return this.bi.log(__assign({
            evid: 481
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormChangeParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} change_action - name of action
     * @property {GUID} biToken - msid
     * @property {string} type - {ind, class, course}
     **/
    /**
     * Name: bookings > service form > change. Evid: 494.
     * Event description: any change in service form.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * change_action - Type: string. Desc: name of action
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: {ind, class, course}
     * @param {bookingsServiceFormChangeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormChange = function(params) {
        return this.bi.log(__assign({
            evid: 494
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsDisconnectPaymentConfirmParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} disconnected - if cancel-- FALSE
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {paypal,stripe} NULL=paypal
     **/
    /**
     * Name: bookings > payments.disconnect_payment.confirm. Evid: 149.
     * Event description: payments.disconnect_payment.confirm.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * disconnected - Type: bool. Desc: if cancel-- FALSE
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe} NULL=paypal
     * @param {bookingsPaymentsDisconnectPaymentConfirmParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsDisconnectPaymentConfirm = function(params) {
        return this.bi.log(__assign({
            evid: 149
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileAppsAgendaDatePickerClickParams
     * @property {string} arrowClicked - right/left
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} layout - weekly/monthly
     * @property {GUID} biToken - []
     * @property {string} selectedDate - --
     **/
    /**
     * Name: bookings > mobile apps > agenda > date picker.click. Evid: 615.
     * Event description: user chooses dates using date picker.
    
     * arrowClicked - Type: string. Desc: right/left
     *
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * layout - Type: string. Desc: weekly/monthly
     *
     * biToken - Type: guid. Desc: []
     *
     * selectedDate - Type: string. Desc: --
     * @param {bookingsMobileAppsAgendaDatePickerClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileAppsAgendaDatePickerClick = function(params) {
        return this.bi.log(__assign({
            evid: 615
        }, params));
    };
    /**
     * @typedef {Object} bookingsMemberAppViewFitBannerParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings -> member app -> view Fit banner. Evid: 497.
     * Event description: Owner viewed Fit banner on one of the member apps.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsMemberAppViewFitBannerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMemberAppViewFitBanner = function(params) {
        return this.bi.log(__assign({
            evid: 497
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistorySaveCustomerSuccessParams
     * @property {string} acquisitionChannel - {friend,site,fb..}
     * @property {boolean} birthdayFilled - T=filled, F= empty
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} cityFilled - T=filled, F= empty
     * @property {number} filesAttached - 0=NULL
     * @property {GUID} biToken - null
     * @property {boolean} noteAdded - T= yes, F- no( empty)
     * @property {string} saveType - Always NEW! No need to filter
     * @property {boolean} streetFilled - T=filled, F= empty
     * @property {boolean} zipFilled - T=filled, F= empty
     **/
    /**
     * Name: bookings > Client History > save_customer_success. Evid: 199.
     * Event description: sent when a user save a customer successfully.
    
     * acquisitionChannel - Type: string. Desc: {friend,site,fb..}
     *
     * birthdayFilled - Type: bool. Desc: T=filled, F= empty
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * cityFilled - Type: bool. Desc: T=filled, F= empty
     *
     * filesAttached - Type: numeric. Desc: 0=NULL
     *
     * biToken - Type: guid.
     *
     * noteAdded - Type: bool. Desc: T= yes, F- no( empty)
     *
     * saveType - Type: string. Desc: Always NEW! No need to filter
     *
     * streetFilled - Type: bool. Desc: T=filled, F= empty
     *
     * zipFilled - Type: bool. Desc: T=filled, F= empty
     * @param {bookingsClientHistorySaveCustomerSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistorySaveCustomerSuccess = function(params) {
        return this.bi.log(__assign({
            evid: 199
        }, params));
    };
    /**
     * @typedef {Object} bookingsExportCalendarDataModalExportParams
     * @property {string} bookingsPlatform - null if old server
     * @property {GUID} businessId - -
     * @property {DateTime} endTime - end date
     * @property {string} itemName - {Staff Hours, Booking List}
     * @property {GUID} biToken - -
     * @property {DateTime} startTime - start date
     **/
    /**
     * Name: bookings > export calendar data modal > export. Evid: 371.
     * Event description: Export calendar items between start and end date
    https://zpl.io/2pAevX8.
    
     * bookingsPlatform - Type: string. Desc: null if old server
     *
     * businessId - Type: guid. Desc: -
     *
     * endTime - Type: datetime. Desc: end date
     *
     * itemName - Type: string. Desc: {Staff Hours, Booking List}
     *
     * biToken - Type: guid. Desc: -
     *
     * startTime - Type: datetime. Desc: start date
     * @param {bookingsExportCalendarDataModalExportParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsExportCalendarDataModalExport = function(params) {
        return this.bi.log(__assign({
            evid: 371
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppTooltipIsShownParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - Bookings business_id
     * @property {GUID} biToken - msid
     * @property {GUID} paidPlanId - paid plan id
     * @property {string} referral_info - {contact_page}
     **/
    /**
     * Name: Bookings --> OneApp --> Buy Paid Plans Owner Side. Evid: 345.
     * Event description: From the contact page - when the owner wants to sell paid plan (pricing plan), but the UoU doesn't have one - the owner can click to attach a plan to the UoU.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: Bookings business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * paidPlanId - Type: guid. Desc: paid plan id
     *
     * referral_info - Type: string. Desc: {contact_page}
     * @param {bookingsOneAppTooltipIsShownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppTooltipIsShown = function(params) {
        return this.bi.log(__assign({
            evid: 345
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarStaffFilterClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar> staff filter. click. Evid: 420.
     * Event description: http://prntscr.com/ggwtev.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsCalendarStaffFilterClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarStaffFilterClick = function(params) {
        return this.bi.log(__assign({
            evid: 420
        }, params));
    };
    /**
     * @typedef {Object} bookingsAdiAddPanelMemberLoginToggleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {boolean} toggle - T= activated\enable, F=disable
     **/
    /**
     * Name: bookings >adi> add_panel > member login. toggle. Evid: 234.
     * Event description: http://prntscr.com/e5pt9v.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * toggle - Type: bool. Desc: T= activated\enable, F=disable
     * @param {bookingsAdiAddPanelMemberLoginToggleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAdiAddPanelMemberLoginToggle = function(params) {
        return this.bi.log(__assign({
            evid: 234
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditPanelTabPositionParams
     * @property {string} appName - -
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isOpened - TRUE for expend, FALSE for collapse
     * @property {GUID} biToken - null
     * @property {string} panelName - {private_service_list...}
     * @property {string} selection - {private_first.group_first}
     **/
    /**
     * Name: bookings >edit_panel.expand/collapse. Evid: 178.
     * Event description: -.
    
     * appName - Type: string. Desc: -
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isOpened - Type: bool. Desc: TRUE for expend, FALSE for collapse
     *
     * biToken - Type: guid.
     *
     * panelName - Type: string. Desc: {private_service_list...}
     *
     * selection - Type: string. Desc: {private_first.group_first}
     * @param {bookingsEditPanelTabPositionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditPanelTabPosition = function(params) {
        return this.bi.log(__assign({
            evid: 178
        }, params));
    };
    /**
     * @typedef {Object} bookingsPlanSavePlanClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {number} numOfActivities - num of sessions / if unlimited - null
     * @property {number} numOfServices - num
     * @property {string} planType - {limited,unlimited}
     * @property {string} referralInfo - service_list_model = 'service_list_model', paid_plans_bo = null or 'paid_plans_bo'
     * @property {string} save_type - {create_new, save_changes}
     **/
    /**
     * Name: bookings > plan > save plan click. Evid: 281.
     * Event description: save plan with number of services in the plan.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * numOfActivities - Type: numeric. Desc: num of sessions / if unlimited - null
     *
     * numOfServices - Type: numeric. Desc: num
     *
     * planType - Type: string. Desc: {limited,unlimited}
     *
     * referralInfo - Type: string. Desc: service_list_model = 'service_list_model', paid_plans_bo = null or 'paid_plans_bo'
     *
     * save_type - Type: string. Desc: {create_new, save_changes}
     * @param {bookingsPlanSavePlanClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPlanSavePlanClick = function(params) {
        return this.bi.log(__assign({
            evid: 281
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditorAppSettingsClickOnCustomiseIntervalsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Editor App Settings > Click on "Customise Intervals". Evid: 325.
     * Event description: https://www.screencast.com/t/I6vcyN2A0zLc.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsEditorAppSettingsClickOnCustomiseIntervalsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditorAppSettingsClickOnCustomiseIntervals = function(params) {
        return this.bi.log(__assign({
            evid: 325
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormLocationSettingsModalTouchFieldParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} fieldName - {type/choose_business_locations/describe}
     * @property {GUID} biToken - msid
     * @property {string} type - {ind, class, course}
     **/
    /**
     * Name: bookings > service form > location settings modal > touch field - NOT RELEVANT. Evid: 631.
     * Event description: This event describes touch of fields in the location settings modal..
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * fieldName - Type: string. Desc: {type/choose_business_locations/describe}
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: {ind, class, course}
     * @param {bookingsServiceFormLocationSettingsModalTouchFieldParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormLocationSettingsModalTouchField = function(params) {
        return this.bi.log(__assign({
            evid: 631
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgModalDisconnectClickParams
     * @property {string} bookingsPlatform - new_bookings_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg.modal.disconnect.click. Evid: 376.
     * Event description: https://zpl.io/VY43yEw.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgModalDisconnectClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgModalDisconnectClick = function(params) {
        return this.bi.log(__assign({
            evid: 376
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickCompleteYourBookingMembershipFlowParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} serviceId - serviceId
     * @property {string} type - service type - {individual, groups}
     **/
    /**
     * Name: bookings-->one app--> Click "Complete your Booking" (membership flow). Evid: 309.
     * Event description: bookings-->one app--> Click "Complete your Booking" (membership flow).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: serviceId
     *
     * type - Type: string. Desc: service type - {individual, groups}
     * @param {bookingsOneAppClickCompleteYourBookingMembershipFlowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickCompleteYourBookingMembershipFlow = function(params) {
        return this.bi.log(__assign({
            evid: 309
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarContactInfoClickParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {string} contact_id - contact_id
     * @property {GUID} biToken - -
     * @property {string} origin - calendar pop-up / manage participants page /
     * @property {string} serviceId - -
     * @property {string} type - service type
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: Bookings --> Click on contact info. Evid: 274.
     * Event description: click on the contact name that participates in the appointment.
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * biToken - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: calendar pop-up / manage participants page /
     *
     * serviceId - Type: string. Desc: -
     *
     * type - Type: string. Desc: service type
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsCalendarContactInfoClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarContactInfoClick = function(params) {
        return this.bi.log(__assign({
            evid: 274
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormLoadLocationSettingsModalParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - null
     * @property {GUID} biToken - msid
     * @property {string} type - null
     **/
    /**
     * Name: bookings > service form > load location settings modal. Evid: 630.
     * Event description: this event describes load of location settings modal from the service form. This is the modal that is loaded when the user wants to edit the location settings for a specific service..
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string.
     * @param {bookingsServiceFormLoadLocationSettingsModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormLoadLocationSettingsModal = function(params) {
        return this.bi.log(__assign({
            evid: 630
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffSearchStaffParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - service form
     * @property {string} type - type of service
     **/
    /**
     * Name: bookings > staff > search staff. Evid: 447.
     * Event description: when owner searches for staff member.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: service form
     *
     * type - Type: string. Desc: type of service
     * @param {bookingsStaffSearchStaffParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffSearchStaff = function(params) {
        return this.bi.log(__assign({
            evid: 447
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetChooseServiceParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} checkedLocation - true/false
     * @property {string} filterBy - location/service name
     * @property {GUID} biToken - null
     * @property {string} pageName - Widget
     * @property {string} type - {ind,groups, course}
     * @property {string} view_type - {single_service, multi_services}
     **/
    /**
     * Name: bookings > widget > choose service. Evid: 195.
     * Event description: choose service: http://prntscr.com/c5lecm.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * checkedLocation - Type: string. Desc: true/false
     *
     * filterBy - Type: string. Desc: location/service name
     *
     * biToken - Type: guid.
     *
     * pageName - Type: string. Desc: Widget
     *
     * type - Type: string. Desc: {ind,groups, course}
     *
     * view_type - Type: string. Desc: {single_service, multi_services}
     * @param {bookingsWidgetChooseServiceParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetChooseService = function(params) {
        return this.bi.log(__assign({
            evid: 195
        }, params));
    };
    /**
     * @typedef {Object} bookingsViewAppointmentFromContactsInboxParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} serviceId - service_id
     * @property {string} type - service type
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: Bookings > view appointment from contacts inbox. Evid: 312.
     * Event description: click on "view appointment" from contacts inbox.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * serviceId - Type: string. Desc: service_id
     *
     * type - Type: string. Desc: service type
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsViewAppointmentFromContactsInboxParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsViewAppointmentFromContactsInbox = function(params) {
        return this.bi.log(__assign({
            evid: 312
        }, params));
    };
    /**
     * @typedef {Object} bookingsZoomV2ChangeParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - null
     * @property {string} change_action - name of action
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > zoom v2 > change. Evid: 635.
    
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid.
     *
     * change_action - Type: string. Desc: name of action
     *
     * biToken - Type: guid.
     * @param {bookingsZoomV2ChangeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsZoomV2Change = function(params) {
        return this.bi.log(__assign({
            evid: 635
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormCancelParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} serviceId - service_id
     **/
    /**
     * Name: bookings >Booking Form>cancel. Evid: 412.
     * Event description: http://prntscr.com/f7oou7 sent on cancel.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * serviceId - Type: string. Desc: service_id
     * @param {bookingsBookingFormCancelParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormCancel = function(params) {
        return this.bi.log(__assign({
            evid: 412
        }, params));
    };
    /**
     * @typedef {Object} bookingsFitnessIntentParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} businessName - <adi business name> keep null if template
     * @property {GUID} biToken - -
     * @property {string} origin - {adi_name, template}
     * @property {GUID} template_id - <template id> keep null if adi
     **/
    /**
     * Name: bookings > fitness intent. Evid: 444.
     * Event description: fitness intent - based on template guid or ADI business name.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * businessName - Type: string. Desc: <adi business name> keep null if template
     *
     * biToken - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: {adi_name, template}
     *
     * template_id - Type: guid. Desc: <template id> keep null if adi
     * @param {bookingsFitnessIntentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsFitnessIntent = function(params) {
        return this.bi.log(__assign({
            evid: 444
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetTextTabChangeTextParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - {page_title,button_text,link...}
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services,calendar,info,confirmation, members_area}
     * @property {string} referralInfo - {NULL= app settings, widget,service_page}
     * @property {string} pagetype - {private/group} NULL for membersArea
     **/
    /**
     * Name: bookings > app_set.text_tab.change_text. Evid: 166.
     * Event description: change text in any element in the app settings- sent only if the element was changed.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: {page_title,button_text,link...}
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services,calendar,info,confirmation, members_area}
     *
     * referralInfo - Type: string. Desc: {NULL= app settings, widget,service_page}
     *
     * pagetype - Type: string. Desc: {private/group} NULL for membersArea
     * @param {bookingsAppSetTextTabChangeTextParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetTextTabChangeText = function(params) {
        return this.bi.log(__assign({
            evid: 166
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChooseATimeSlotParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> OneApp --> Choose a time slot. Evid: 291.
     * Event description: After choosing a service from the list - choose a time slot.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsOneAppChooseATimeSlotParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChooseATimeSlot = function(params) {
        return this.bi.log(__assign({
            evid: 291
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistorySaveCustomerClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} emailFilled - T=filled, F= empty
     * @property {boolean} firstNameFilled - T=filled, F= empty
     * @property {boolean} lastNameFilled - T=filled, F= empty
     * @property {GUID} biToken - null
     * @property {boolean} phoneFilled - T=filled, F= empty
     **/
    /**
     * Name: bookings > Client History > save_customer . click. Evid: 198.
     * Event description: save cusomer click.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * emailFilled - Type: bool. Desc: T=filled, F= empty
     *
     * firstNameFilled - Type: bool. Desc: T=filled, F= empty
     *
     * lastNameFilled - Type: bool. Desc: T=filled, F= empty
     *
     * biToken - Type: guid.
     *
     * phoneFilled - Type: bool. Desc: T=filled, F= empty
     * @param {bookingsClientHistorySaveCustomerClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistorySaveCustomerClick = function(params) {
        return this.bi.log(__assign({
            evid: 198
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgFindYourBusinessSkipParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg > find your business.skip. Evid: 430.
     * Event description: click on skip in RWG find your business screen.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgFindYourBusinessSkipParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgFindYourBusinessSkip = function(params) {
        return this.bi.log(__assign({
            evid: 430
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSettingsLeftNavParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {Null = app_settings , widget, service_page}
     * @property {string} selection - {main.layout,text,design,support}
     **/
    /**
     * Name: bookings > app_settings>left nav. Evid: 402.
     * Event description: app settings left nav, NEW APP SETTINGS- NOT RELEVANT.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {Null = app_settings , widget, service_page}
     *
     * selection - Type: string. Desc: {main.layout,text,design,support}
     * @param {bookingsAppSettingsLeftNavParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSettingsLeftNav = function(params) {
        return this.bi.log(__assign({
            evid: 402
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsRemoveButtonClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> remove button clicked. Evid: 255.
     * Event description: When user Clicks on the remove button after swiping participant left.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsRemoveButtonClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsRemoveButtonClicked = function(params) {
        return this.bi.log(__assign({
            evid: 255
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormClickOnManageLocationsParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {string} location_choice - {client/business/custom}
     * @property {GUID} biToken - []
     * @property {string} type - {appointment,class,course}
     **/
    /**
     * Name: bookings - service form - click on manage locations. Evid: 477.
     * Event description: click on manage vc accounts.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * location_choice - Type: string. Desc: {client/business/custom}
     *
     * biToken - Type: guid. Desc: []
     *
     * type - Type: string. Desc: {appointment,class,course}
     * @param {bookingsServiceFormClickOnManageLocationsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormClickOnManageLocations = function(params) {
        return this.bi.log(__assign({
            evid: 477
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppGroupSessionSeeAllParticipantsClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > one app>group session> see all participants .click. Evid: 305.
     * Event description: http://prntscr.com/dcrjl0.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsOneAppGroupSessionSeeAllParticipantsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppGroupSessionSeeAllParticipantsClick = function(params) {
        return this.bi.log(__assign({
            evid: 305
        }, params));
    };
    /**
     * @typedef {Object} copyOfBookingsStaffWidgetChangeLinkPageParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - find your business search box, find your business  link
     **/
    /**
     * Name: bookings > rwg > add you business to google. Evid: 381.
     * Event description: click on add your business to Google
    https://zpl.io/VD03j4l.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: find your business search box, find your business  link
     * @param {copyOfBookingsStaffWidgetChangeLinkPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.copyOfBookingsStaffWidgetChangeLinkPage = function(params) {
        return this.bi.log(__assign({
            evid: 381
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessNotificationsEditCllckParams
     * @property {string} bookingsPlatform - new_bookings_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     * @property {string} type - business_notifications
     **/
    /**
     * Name: bookings > business_notifications.edit.cllck. Evid: 384.
     * Event description: Click on business notifications edit CTA in bookings settings
    https://zpl.io/a79A8RK.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: business_notifications
     * @param {bookingsBusinessNotificationsEditCllckParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessNotificationsEditCllck = function(params) {
        return this.bi.log(__assign({
            evid: 384
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInImHereClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> i'm here clicked. Evid: 263.
     * Event description: When user clicks on the i'm here button after choosing a name..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInImHereClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInImHereClicked = function(params) {
        return this.bi.log(__assign({
            evid: 263
        }, params));
    };
    /**
     * @typedef {Object} bookingsMenuInServiceListClickParams
     * @property {string} bookingsPlatform - platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} selection - {edit_service,manage_paid_plans,delete_service}
     **/
    /**
     * Name: bookings > menu in service_list > click. Evid: 374.
     * Event description: when clicking a service in the oap service list, opens a small menu. The event is triggered when clicking an option in that menu..
    
     * bookingsPlatform - Type: string. Desc: platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * selection - Type: string. Desc: {edit_service,manage_paid_plans,delete_service}
     * @param {bookingsMenuInServiceListClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMenuInServiceListClick = function(params) {
        return this.bi.log(__assign({
            evid: 374
        }, params));
    };
    /**
    * @typedef {Object} bookingsDeleteButtonParams
    * @property {string} appointmentId - Deprecated for new server platform
    * @property {string} bookingId - booking_id when deleting a course participant booking
    * @property {string} bookingsPlatform - null
    * @property {GUID} businessId - null
    * @property {GUID} categoryId - null
    * @property {string} contactId - contact_id in case deleting a participant
    * @property {string} instance_id - for course instances - send as a string
    * @property {boolean} mobileOneApp - Null\F= desktop\mobile= non app
    * @property {GUID} biToken - null
    * @property {boolean} notifyChecked - null
    * @property {string} referal_info - {confirm_delete_CourseSession
    , confirm_delete_individual
    , confirm_delete_Groupparticipant
    , confirm_delete_individualSession
    , confirm_delete_groupsSession
    , delete_category
    , staff
    , confirm_delete_category
    , confirm_delete_blockSession
    , confirm_delete_Courseparticipant
    , confirm_delete_groups
    , confirm_delete_course
    , client note
    , one_app_delete_service
    , one_app_delete_service_session
    ,confirm_delete_class_participant}
    * @property {string} service_id - null
    * @property {string} session_id - appointment_id as string for new server
    * @property {GUID} staffId - when deleting a staff member - send staff_id
    * @property {string} type - {individual,
    blockSession,
    Group,Course,class}
    **/
    /**
     * Name: Bookings --> Delete Entity. Evid: 116.
     * Event description: Delete_button ALSO SENT FROM ONE APP !!!! notice that the session deletions have the same reffral - need to separate with the browser_name.
    
     * appointmentId - Type: string. Desc: Deprecated for new server platform
     *
     * bookingId - Type: string. Desc: booking_id when deleting a course participant booking
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * categoryId - Type: guid.
     *
     * contactId - Type: string. Desc: contact_id in case deleting a participant
     *
     * instance_id - Type: string. Desc: for course instances - send as a string
     *
     * mobileOneApp - Type: bool. Desc: Null\F= desktop\mobile= non app
     *
     * biToken - Type: guid.
     *
     * notifyChecked - Type: bool.
     *
     * referal_info - Type: string. Desc: {confirm_delete_CourseSession
    , confirm_delete_individual
    , confirm_delete_Groupparticipant
    , confirm_delete_individualSession
    , confirm_delete_groupsSession
    , delete_category
    , staff
    , confirm_delete_category
    , confirm_delete_blockSession
    , confirm_delete_Courseparticipant
    , confirm_delete_groups
    , confirm_delete_course
    , client note
    , one_app_delete_service
    , one_app_delete_service_session
    ,confirm_delete_class_participant}
     *
     * service_id - Type: string.
     *
     * session_id - Type: string. Desc: appointment_id as string for new server
     *
     * staffId - Type: guid. Desc: when deleting a staff member - send staff_id
     *
     * type - Type: string. Desc: {individual,
    blockSession,
    Group,Course,class}
     * @param {bookingsDeleteButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsDeleteButton = function(params) {
        return this.bi.log(__assign({
            evid: 116
        }, params));
    };
    /**
     * @typedef {Object} bookingsGroupsServiceNotificationUndoParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} service_id - -
     **/
    /**
     * Name: bookings >groups_service>notification.undo. Evid: 413.
     * Event description: http://prntscr.com/fc074a.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: string. Desc: -
     * @param {bookingsGroupsServiceNotificationUndoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGroupsServiceNotificationUndo = function(params) {
        return this.bi.log(__assign({
            evid: 413
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsRemoveParticipantClicked250Params
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {GUID} participant_id - participant member Id
     * @property {string} scheduleId - null
     * @property {string} sessionId - --
     * @property {string} type - null
     **/
    /**
     * Name: Bookings-> group sessions -> Remove participant clicked. Evid: 250.
     * Event description: When user clicks on remove a participant (should be sent after the confirmation screen)..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * participant_id - Type: guid. Desc: participant member Id
     *
     * scheduleId - Type: string.
     *
     * sessionId - Type: string. Desc: --
     *
     * type - Type: string.
     * @param {bookingsClubsGroupSessionsRemoveParticipantClicked250Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsRemoveParticipantClicked250 = function(params) {
        return this.bi.log(__assign({
            evid: 250
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesKeyboardClickOnBookItParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> services keyboard --> click on "book it". Evid: 337.
     * Event description: when clicking on the "book Now" button in the chat after sending the service to the user.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsServicesKeyboardClickOnBookItParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesKeyboardClickOnBookIt = function(params) {
        return this.bi.log(__assign({
            evid: 337
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffPageAddIndividualVcAccountParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} staffId - null if default account
     **/
    /**
     * Name: Bookings > Staff Page > Add Individual VC Account. Evid: 468.
     * Event description: Sent when a user is adding a vc account to individual staff member.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * staffId - Type: guid. Desc: null if default account
     * @param {bookingsStaffPageAddIndividualVcAccountParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffPageAddIndividualVcAccount = function(params) {
        return this.bi.log(__assign({
            evid: 468
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsChangeServicePaymentMethodPopupOpenParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {advanced_settings_service_form, price_section_service_form}
     **/
    /**
     * Name: bookings > services > change_service_payment_method_popup_open. Evid: 152.
     * Event description: payments_change_service_payment_method_popup_open.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {advanced_settings_service_form, price_section_service_form}
     * @param {bookingsPaymentsChangeServicePaymentMethodPopupOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsChangeServicePaymentMethodPopupOpen = function(params) {
        return this.bi.log(__assign({
            evid: 152
        }, params));
    };
    /**
     * @typedef {Object} bookingsContinueToNextStepParams
     * @property {string} action - null
     * @property {GUID} bookingId - null
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} contactId - null
     * @property {GUID} location_guid - location_id
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - null
     * @property {number} price - null
     * @property {string} properties - if any
     * @property {string} referal_info - {services_list,appt}
     * @property {string} scheduleId - schedule_id
     * @property {GUID} serviceId - null
     * @property {string} sessionId - session_id
     * @property {string} staffId - staff_id
     * @property {string} timeslot - timeslot
     * @property {string} serviceType - null
     **/
    /**
     * Name: bookings > continue to next step. Evid: 118.
     * Event description: Continue to next step.
    
     * action - Type: string.
     *
     * bookingId - Type: guid.
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * contactId - Type: guid.
     *
     * location_guid - Type: guid. Desc: location_id
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string.
     *
     * price - Type: numeric.
     *
     * properties - Type: string. Desc: if any
     *
     * referal_info - Type: string. Desc: {services_list,appt}
     *
     * scheduleId - Type: string. Desc: schedule_id
     *
     * serviceId - Type: guid.
     *
     * sessionId - Type: string. Desc: session_id
     *
     * staffId - Type: string. Desc: staff_id
     *
     * timeslot - Type: string. Desc: timeslot
     *
     * serviceType - Type: string.
     * @param {bookingsContinueToNextStepParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsContinueToNextStep = function(params) {
        return this.bi.log(__assign({
            evid: 118
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChooseAServiceFromTheListParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> OneApp --> Choose a service from the list. Evid: 290.
     * Event description: After clicking to add a session - choose from current options.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsOneAppChooseAServiceFromTheListParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChooseAServiceFromTheList = function(params) {
        return this.bi.log(__assign({
            evid: 290
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsDisconnectAccountClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {paypal,stripe} NULL=paypal
     **/
    /**
     * Name: bookings > payments.disconnect_account.clicked. Evid: 148.
     * Event description: payments.disconnect_paypal_account.clicked.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {paypal,stripe} NULL=paypal
     * @param {bookingsPaymentsDisconnectAccountClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsDisconnectAccountClicked = function(params) {
        return this.bi.log(__assign({
            evid: 148
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarBoPageLoadedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - businessId
     * @property {boolean} is_owner - _
     * @property {GUID} bi_token - msid
     * @property {GUID} biToken - null
     * @property {number} numberOfAppointmentSessions - number of sessions shown where service type = appointment
     * @property {number} numberOfBookedSessions - number of booked sessions shown in calendar
     * @property {number} numberOfClassSessions - number of sessions shown where service type = class
     * @property {number} numberOfCourseSessions - number of sessions shown where service type = course
     * @property {number} numberOfSessions - number of sessions shown in calendar
     * @property {string} premiumStatus - {business, website, none}
     * @property {boolean} published - true if the site is published when load
     * @property {string} viewMode - {Weekly/Daily}
     * @property {string} visibleRange - Calendar visible date range
     * @property {boolean} waitlistEnabled - true if enabled
     **/
    /**
     * Name: Bookings > calendar BO page rendered. Evid: 490.
     * Event description: Sent each time the calendar BO page is rendered.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: businessId
     *
     * is_owner - Type: bool. Desc: _
     *
     * bi_token - Type: guid. Desc: msid
     *
     * biToken - Type: guid.
     *
     * numberOfAppointmentSessions - Type: numeric. Desc: number of sessions shown where service type = appointment
     *
     * numberOfBookedSessions - Type: numeric. Desc: number of booked sessions shown in calendar
     *
     * numberOfClassSessions - Type: numeric. Desc: number of sessions shown where service type = class
     *
     * numberOfCourseSessions - Type: numeric. Desc: number of sessions shown where service type = course
     *
     * numberOfSessions - Type: numeric. Desc: number of sessions shown in calendar
     *
     * premiumStatus - Type: string. Desc: {business, website, none}
     *
     * published - Type: bool. Desc: true if the site is published when load
     *
     * viewMode - Type: string. Desc: {Weekly/Daily}
     *
     * visibleRange - Type: string. Desc: Calendar visible date range
     *
     * waitlistEnabled - Type: bool. Desc: true if enabled
     * @param {bookingsCalendarBoPageLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarBoPageLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 490
        }, params));
    };
    /**
     * @typedef {Object} bookingsSocialShareSelectChannelParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} channel - {Facebook, Linkdin, Twitter, Whatsapp, Copy}
     * @property {GUID} biToken - msid
     * @property {string} referral_info - -
     * @property {GUID} service_id - service_id
     * @property {string} type - Service type {class, course, individual}
     **/
    /**
     * Name: Bookings --> Social Share - select channel. Evid: 298.
     * Event description: Selecting a social share channel by clicking it.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * channel - Type: string. Desc: {Facebook, Linkdin, Twitter, Whatsapp, Copy}
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: -
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: Service type {class, course, individual}
     * @param {bookingsSocialShareSelectChannelParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSocialShareSelectChannel = function(params) {
        return this.bi.log(__assign({
            evid: 298
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarEditSessionGenerateNewVcLinkParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} current_platform - {zoom/custom link}
     * @property {GUID} biToken - msid
     * @property {GUID} staffId - null if default account
     **/
    /**
     * Name: Bookings > Staff List > Edit VC Account. Evid: 459.
     * Event description: Sent when a user tries to edit VC link from the service page.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * current_platform - Type: string. Desc: {zoom/custom link}
     *
     * biToken - Type: guid. Desc: msid
     *
     * staffId - Type: guid. Desc: null if default account
     * @param {bookingsCalendarEditSessionGenerateNewVcLinkParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarEditSessionGenerateNewVcLink = function(params) {
        return this.bi.log(__assign({
            evid: 459
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickBuyNowMembershipFlowParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} planType - membership/package
     * @property {string} serviceId - serviceId
     * @property {string} type - service type - {individual, groups}
     **/
    /**
     * Name: bookings-->one app--> Click "Buy Now" (membership flow). Evid: 308.
     * Event description: bookings-->one app--> Click "Buy Now" (membership flow).
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * planType - Type: string. Desc: membership/package
     *
     * serviceId - Type: string. Desc: serviceId
     *
     * type - Type: string. Desc: service type - {individual, groups}
     * @param {bookingsOneAppClickBuyNowMembershipFlowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickBuyNowMembershipFlow = function(params) {
        return this.bi.log(__assign({
            evid: 308
        }, params));
    };
    /**
     * @typedef {Object} bookingsManageParticipantsPageExpandCollapseClickParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {string} contactId - {contact_id}
     * @property {string} custom_field_type - the origin field type in booking form
     * @property {boolean} isOpened - TRUE for expend, FALSE for collapse
     * @property {GUID} biToken - msid
     * @property {string} pageName - page name
     * @property {string} serviceId - {service_id}
     * @property {string} type - class/course
     **/
    /**
     * Name: bookings > manage participants page > expand/collapse.click. Evid: 388.
     * Event description: contact expand/collapse in BO manage participants page
    https://zpl.io/anqwgzv.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * contactId - Type: string. Desc: {contact_id}
     *
     * custom_field_type - Type: string. Desc: the origin field type in booking form
     *
     * isOpened - Type: bool. Desc: TRUE for expend, FALSE for collapse
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageName - Type: string. Desc: page name
     *
     * serviceId - Type: string. Desc: {service_id}
     *
     * type - Type: string. Desc: class/course
     * @param {bookingsManageParticipantsPageExpandCollapseClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsManageParticipantsPageExpandCollapseClick = function(params) {
        return this.bi.log(__assign({
            evid: 388
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectPaymentProviderNotAvailableOnPreviewPopupParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > not used! > connect payment provider not available on preview. popup. Evid: 151.
     * Event description: popup appears - http://prntscr.com/gbmeky.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsConnectPaymentProviderNotAvailableOnPreviewPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectPaymentProviderNotAvailableOnPreviewPopup = function(params) {
        return this.bi.log(__assign({
            evid: 151
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingsListFilterApplyClickParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - []
     * @property {string} filterName - Payment, Status
     * @property {string} filtered_content - comma separated values
     * @property {GUID} biToken - []
     * @property {string} pageName - bookings list
     **/
    /**
     * Name: bookings > bookings list > filter.apply click. Evid: 437.
     * Event description: user clicked on apply in bookings list filter Payment/Status.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: []
     *
     * filterName - Type: string. Desc: Payment, Status
     *
     * filtered_content - Type: string. Desc: comma separated values
     *
     * biToken - Type: guid. Desc: []
     *
     * pageName - Type: string. Desc: bookings list
     * @param {bookingsBookingsListFilterApplyClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingsListFilterApplyClick = function(params) {
        return this.bi.log(__assign({
            evid: 437
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppPackagesPopupClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} referralInfo - {modify plan}
     * @property {string} selection - {no thanks, notify}
     **/
    /**
     * Name: Bookings  --> OneApp --> packages popup - click. Evid: 321.
     * Event description: https://www.screencast.com/t/UuqhF8LKdd2e.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string. Desc: {modify plan}
     *
     * selection - Type: string. Desc: {no thanks, notify}
     * @param {bookingsOneAppPackagesPopupClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppPackagesPopupClick = function(params) {
        return this.bi.log(__assign({
            evid: 321
        }, params));
    };
    /**
     * @typedef {Object} bookingsUpgradeReferralClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} editor_working_mode - i.e. desktop
     * @property {GUID} esi - esi
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} referral_info - {new_group_page,popup_new_group,payments,popup_payments,reminders,popup_reminders,woot,app_settings,left_menu,left_menu_hover,popup_preview_mode}
     * @property {number} ts - ts
     * @property {string} viewmode - i.e. preview
     * @property {string} widget_name - widget type
     **/
    /**
     * Name: bookings > upgrade referral - click. Evid: 156.
     * Event description: upgrade_clicked- from all different locations (referral_info)- {new_group_page,popup_new_group,payments,popup_payments,reminders,popup_reminders,woot,app_settings,left_menu,left_menu_hover,popup_preview_mode}.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * editor_working_mode - Type: string. Desc: i.e. desktop
     *
     * esi - Type: guid. Desc: esi
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {new_group_page,popup_new_group,payments,popup_payments,reminders,popup_reminders,woot,app_settings,left_menu,left_menu_hover,popup_preview_mode}
     *
     * ts - Type: numeric. Desc: ts
     *
     * viewmode - Type: string. Desc: i.e. preview
     *
     * widget_name - Type: string. Desc: widget type
     * @param {bookingsUpgradeReferralClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsUpgradeReferralClick = function(params) {
        return this.bi.log(__assign({
            evid: 156
        }, params));
    };
    /**
     * @typedef {Object} bookingsCloseParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} got_it_type - {google_connect,calendar_view }
     * @property {GUID} biToken - null
     * @property {string} referal_info - {add_service,services_list,calendar,business_info,confirm_delete_service,callendar_appt,callendar_pop}
     * @property {string} referral_info - {close_banner}
     * @property {string} service_id - -
     * @property {string} type - {header,system_message,modal,got_it_close,get_started_close, service_list_fitness_banner}
     **/
    /**
     * Name: bookings > close. Evid: 131.
    
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * got_it_type - Type: string. Desc: {google_connect,calendar_view }
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {add_service,services_list,calendar,business_info,confirm_delete_service,callendar_appt,callendar_pop}
     *
     * referral_info - Type: string. Desc: {close_banner}
     *
     * service_id - Type: string. Desc: -
     *
     * type - Type: string. Desc: {header,system_message,modal,got_it_close,get_started_close, service_list_fitness_banner}
     * @param {bookingsCloseParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClose = function(params) {
        return this.bi.log(__assign({
            evid: 131
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsReturnFromApplicationFormParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} paymentProvider - {stripe}
     * @property {boolean} success - T=connected, F=not connected
     **/
    /**
     * Name: bookings >payments>return_from_application_form. Evid: 192.
     * Event description: return from application formto bookings , for stripe: http://prntscr.com/byox97.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * paymentProvider - Type: string. Desc: {stripe}
     *
     * success - Type: bool. Desc: T=connected, F=not connected
     * @param {bookingsPaymentsReturnFromApplicationFormParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsReturnFromApplicationForm = function(params) {
        return this.bi.log(__assign({
            evid: 192
        }, params));
    };
    /**
     * @typedef {Object} bookingsAdditionalHoursParams
     * @property {string} action - {add,remove}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referral_info - {business_info, group_service,staff}
     **/
    /**
     * Name: bookings > additional_hours. Evid: 169.
     * Event description: add_business_hours.
    
     * action - Type: string. Desc: {add,remove}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {business_info, group_service,staff}
     * @param {bookingsAdditionalHoursParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAdditionalHours = function(params) {
        return this.bi.log(__assign({
            evid: 169
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormLoadSaveServiceModalParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} origin - the action in the service form the triggered the modal
     * @property {string} type - {ind, class, course}
     **/
    /**
     * Name: bookings > service form > load save service modal. Evid: 629.
     * Event description: when a user have edited the service details in the service form, and wants to move to a different page / view, a modal pops out that asks for the use to save a service. This event describes load of this modal..
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: the action in the service form the triggered the modal
     *
     * type - Type: string. Desc: {ind, class, course}
     * @param {bookingsServiceFormLoadSaveServiceModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormLoadSaveServiceModal = function(params) {
        return this.bi.log(__assign({
            evid: 629
        }, params));
    };
    /**
     * @typedef {Object} bookingsRwgFindYourBusinessNextParams
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > rwg > find your business.next. Evid: 431.
     * Event description: click on next in RWG find your business screen.
    
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsRwgFindYourBusinessNextParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRwgFindYourBusinessNext = function(params) {
        return this.bi.log(__assign({
            evid: 431
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentsSquareConnectionPopupClickParams
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} contact_id - contact_id
     * @property {string} ctaType - create, view_draft, view_partial_paid, view_sent_invoice
     * @property {GUID} invoiceId - invoice_id
     * @property {GUID} biToken - null
     * @property {number} numParticipants - number of participants
     * @property {string} pageName - manage_participants, appointment_pop_over, contact_panel, full_contact_view
     * @property {string} serviceId - service_id
     * @property {string} serviceType - ind/class
     **/
    /**
     * Name: bookings > payment link > action.click. Evid: 235.
     * Event description: send payment request or view invoice drafts.
    
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * ctaType - Type: string. Desc: create, view_draft, view_partial_paid, view_sent_invoice
     *
     * invoiceId - Type: guid. Desc: invoice_id
     *
     * biToken - Type: guid.
     *
     * numParticipants - Type: numeric. Desc: number of participants
     *
     * pageName - Type: string. Desc: manage_participants, appointment_pop_over, contact_panel, full_contact_view
     *
     * serviceId - Type: string. Desc: service_id
     *
     * serviceType - Type: string. Desc: ind/class
     * @param {bookingsPaymentsSquareConnectionPopupClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentsSquareConnectionPopupClick = function(params) {
        return this.bi.log(__assign({
            evid: 235
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSettingsVisitorLanguageDropDownParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} newLanguage - -
     * @property {string} oldLanguage - -
     **/
    /**
     * Name: bookings > app_settings >visitor language. drop down. Evid: 417.
     * Event description: http://prntscr.com/fu7t2v.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * newLanguage - Type: string. Desc: -
     *
     * oldLanguage - Type: string. Desc: -
     * @param {bookingsAppSettingsVisitorLanguageDropDownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSettingsVisitorLanguageDropDown = function(params) {
        return this.bi.log(__assign({
            evid: 417
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppParticipantClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} origin - {view all list, appointment page}
     **/
    /**
     * Name: bookings > one app>participant>click. Evid: 303.
     * Event description: http://prntscr.com/dcrg9g.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: {view all list, appointment page}
     * @param {bookingsOneAppParticipantClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppParticipantClick = function(params) {
        return this.bi.log(__assign({
            evid: 303
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetCustomizeClickParams
     * @property {string} appName - widget, service_page
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - businessId
     * @property {boolean} isPreview - -
     * @property {GUID} biToken - biToken
     * @property {string} pageName - -
     * @property {string} tabName - -
     **/
    /**
     * Name: bookings > app.settings - customize click. Evid: 322.
     * Event description: click on "customize your widget"
    http://prntscr.com/m1lnb9.
    
     * appName - Type: string. Desc: widget, service_page
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: businessId
     *
     * isPreview - Type: bool. Desc: -
     *
     * biToken - Type: guid. Desc: biToken
     *
     * pageName - Type: string. Desc: -
     *
     * tabName - Type: string. Desc: -
     * @param {bookingsWidgetCustomizeClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetCustomizeClick = function(params) {
        return this.bi.log(__assign({
            evid: 322
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppAddNoteToTheSessionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> OneApp --> Add note to the session. Evid: 293.
     * Event description: Add note to the session.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsOneAppAddNoteToTheSessionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppAddNoteToTheSession = function(params) {
        return this.bi.log(__assign({
            evid: 293
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesDealerComponentViewParams
     * @property {string} bannerLocationOnPage - {Left,Center,Right}
     * @property {string} bookingsPlatform - _
     * @property {GUID} businessId - _
     * @property {GUID} contactId - _
     * @property {string} jsonData - json
     * @property {GUID} biToken - msid
     * @property {GUID} offer_id - offer guid
     * @property {string} target_url - the banner link url
     * @property {GUID} visitor_id - _
     **/
    /**
     * Name: bookings > services > Dealer Component.View. Evid: 487.
     * Event description: Click on dealer component on the services list.
    
     * bannerLocationOnPage - Type: string. Desc: {Left,Center,Right}
     *
     * bookingsPlatform - Type: string. Desc: _
     *
     * businessId - Type: guid. Desc: _
     *
     * contactId - Type: guid. Desc: _
     *
     * jsonData - Type: string. Desc: json
     *
     * biToken - Type: guid. Desc: msid
     *
     * offer_id - Type: guid. Desc: offer guid
     *
     * target_url - Type: string. Desc: the banner link url
     *
     * visitor_id - Type: guid. Desc: _
     * @param {bookingsServicesDealerComponentViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesDealerComponentView = function(params) {
        return this.bi.log(__assign({
            evid: 487
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsEmailsSendTestEmailParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} emailDefined - T=email exist, F= no email
     * @property {string} email_type - {confirmation,reminder,cancellation}
     * @property {GUID} biToken - null
     * @property {boolean} success - T=email sent
     * @property {string} type - {ind,groups}
     **/
    /**
     * Name: bookings > Business Options > Emails>send test email. Evid: 241.
     * Event description: http://prntscr.com/ehx8nn.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * emailDefined - Type: bool. Desc: T=email exist, F= no email
     *
     * email_type - Type: string. Desc: {confirmation,reminder,cancellation}
     *
     * biToken - Type: guid.
     *
     * success - Type: bool. Desc: T=email sent
     *
     * type - Type: string. Desc: {ind,groups}
     * @param {bookingsBusinessOptionsEmailsSendTestEmailParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsEmailsSendTestEmail = function(params) {
        return this.bi.log(__assign({
            evid: 241
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryCustomerClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} customerId - -
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > Client History >customer . click. Evid: 231.
     * Event description: cusomer click (on customer list)- http://prntscr.com/dtw0ez.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * customerId - Type: string. Desc: -
     *
     * biToken - Type: guid.
     * @param {bookingsClientHistoryCustomerClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryCustomerClick = function(params) {
        return this.bi.log(__assign({
            evid: 231
        }, params));
    };
    /**
     * @typedef {Object} bookingsBusinessOptionsMenuClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} category - the settings category
     * @property {GUID} biToken - null
     * @property {string} selection - {calendar,policy,emails,business_notifications}
     **/
    /**
     * Name: bookings > Business Options >menu.click. Evid: 401.
     * Event description: http://prntscr.com/f2tvda.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * category - Type: string. Desc: the settings category
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: {calendar,policy,emails,business_notifications}
     * @param {bookingsBusinessOptionsMenuClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBusinessOptionsMenuClick = function(params) {
        return this.bi.log(__assign({
            evid: 401
        }, params));
    };
    /**
     * @typedef {Object} bookingsZoomV2OpenChooseVcModalParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} referralInfo - video conference on service fiorm= "service_video" / {staff} / NULL=payments
     **/
    /**
     * Name: bookings > zoom v2 > open 'choose VC' modal. Evid: 634.
     * Event description: open 'choose VC modal'.
    
     * bookingsPlatform - Type: string. Desc: null
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referralInfo - Type: string. Desc: video conference on service fiorm= "service_video" / {staff} / NULL=payments
     * @param {bookingsZoomV2OpenChooseVcModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsZoomV2OpenChooseVcModal = function(params) {
        return this.bi.log(__assign({
            evid: 634
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetServiceOrMultiServiceParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {boolean} isPreview - -
     * @property {GUID} biToken - -
     * @property {string} referralInfo - {service_list, widget}
     * @property {string} selection - {single_service, multi_services}
     **/
    /**
     * Name: bookings > app_set.service_or_multi_service. Evid: 318.
     * Event description: settings - select a single service to display or multiple services.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * isPreview - Type: bool. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string. Desc: {service_list, widget}
     *
     * selection - Type: string. Desc: {single_service, multi_services}
     * @param {bookingsAppSetServiceOrMultiServiceParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetServiceOrMultiService = function(params) {
        return this.bi.log(__assign({
            evid: 318
        }, params));
    };
    /**
     * @typedef {Object} copyOfBookingsCalendarRefreshClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar > refresh.click. Evid: 485.
     * Event description: Clicking on the refresh button..
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {copyOfBookingsCalendarRefreshClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.copyOfBookingsCalendarRefreshClick = function(params) {
        return this.bi.log(__assign({
            evid: 485
        }, params));
    };
    /**
     * @typedef {Object} bookingsVcLinkGenerateVcLinkModalParams
     * @property {string} action_type - {generate/restore}
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} current_platform - {zoom/custom link}
     * @property {GUID} biToken - msid
     * @property {boolean} notifyChecked - if to notify the participants
     * @property {boolean} success - if link generation have succeed
     **/
    /**
     * Name: bookings > vc link > generate / restore vc link modal. Evid: 472.
     * Event description: sent when a custom vc link is saved.
    
     * action_type - Type: string. Desc: {generate/restore}
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * current_platform - Type: string. Desc: {zoom/custom link}
     *
     * biToken - Type: guid. Desc: msid
     *
     * notifyChecked - Type: bool. Desc: if to notify the participants
     *
     * success - Type: bool. Desc: if link generation have succeed
     * @param {bookingsVcLinkGenerateVcLinkModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsVcLinkGenerateVcLinkModal = function(params) {
        return this.bi.log(__assign({
            evid: 472
        }, params));
    };
    /**
     * @typedef {Object} bookingsWelcomePopupVideoLoadParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} video_name - {fitness_video}
     **/
    /**
     * Name: bookings >welcome popup>video load. Evid: 252.
     * Event description: http://prntscr.com/p9cfs4.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * video_name - Type: string. Desc: {fitness_video}
     * @param {bookingsWelcomePopupVideoLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWelcomePopupVideoLoad = function(params) {
        return this.bi.log(__assign({
            evid: 252
        }, params));
    };
    /**
     * @typedef {Object} bookingsPremiumRibbonAppearsParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} premiumStatus - {free, non_bookings_premium}
     * @property {string} referralInfo - {group,payment}
     **/
    /**
     * Name: bookings > premium ribbon. appears. Evid: 237.
     * Event description: http://prntscr.com/fc074a.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * premiumStatus - Type: string. Desc: {free, non_bookings_premium}
     *
     * referralInfo - Type: string. Desc: {group,payment}
     * @param {bookingsPremiumRibbonAppearsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPremiumRibbonAppears = function(params) {
        return this.bi.log(__assign({
            evid: 237
        }, params));
    };
    /**
     * @typedef {Object} bookingsLoadHandleChangedLocationScreenParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {GUID} service_id - service_id
     * @property {string} state - biz location removed/location type changed/custom location - label changed / keep location
     **/
    /**
     * Name: bookings > load handle changed location screen. Evid: 479.
     * Event description: Multilocation - When a user is removing a location it needs to choose what to do with the scheduled sessions connected to this location. Sends when the modal is loaded..
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * service_id - Type: guid. Desc: service_id
     *
     * state - Type: string. Desc: biz location removed/location type changed/custom location - label changed / keep location
     * @param {bookingsLoadHandleChangedLocationScreenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsLoadHandleChangedLocationScreen = function(params) {
        return this.bi.log(__assign({
            evid: 479
        }, params));
    };
    /**
     * @typedef {Object} bookingsBookingFormSaveFormClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} nameFormat - name format - full_name or _first_and_last
     * @property {string} serviceId - service_id
     * @property {boolean} success - form settings saved
     **/
    /**
     * Name: bookings >Booking Form> save form.click. Evid: 404.
     * Event description: save booking form.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * nameFormat - Type: string. Desc: name format - full_name or _first_and_last
     *
     * serviceId - Type: string. Desc: service_id
     *
     * success - Type: bool. Desc: form settings saved
     * @param {bookingsBookingFormSaveFormClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBookingFormSaveFormClick = function(params) {
        return this.bi.log(__assign({
            evid: 404
        }, params));
    };
    /**
     * @typedef {Object} bookingsSendWaiverViaEmailClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {number} numberOfEmailsSent - Amount of contacts that the waiver was sent to
     * @property {number} numberOfParticipants - Amount of participants in session at the time of click
     * @property {string} origin - Click origin
     * @property {string} serviceId - -
     * @property {GUID} session_id - -
     **/
    /**
     * Name: Bookings -->  Send Waiver via Email click. Evid: 495.
     * Event description: Click on "Send Waiver via Email".
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * numberOfEmailsSent - Type: numeric. Desc: Amount of contacts that the waiver was sent to
     *
     * numberOfParticipants - Type: numeric. Desc: Amount of participants in session at the time of click
     *
     * origin - Type: string. Desc: Click origin
     *
     * serviceId - Type: string. Desc: -
     *
     * session_id - Type: guid. Desc: -
     * @param {bookingsSendWaiverViaEmailClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSendWaiverViaEmailClick = function(params) {
        return this.bi.log(__assign({
            evid: 495
        }, params));
    };
    /**
     * @typedef {Object} bookingsContactPanelQuickActionsScheduleASessionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: Bookings > contact panel quick actions > schedule a session. Evid: 311.
     * Event description: click on "schedule a session" from the contact panel quick actions - opens the Bookings calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsContactPanelQuickActionsScheduleASessionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsContactPanelQuickActionsScheduleASession = function(params) {
        return this.bi.log(__assign({
            evid: 311
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneappMultilocationBlockingModalShownParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - where the modal was triggered
     **/
    /**
     * Name: bookings > oneapp > multilocation blocking modal shown. Evid: 451.
     * Event description: blocking modal if the current version of the app doesnt support ML.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: where the modal was triggered
     * @param {bookingsOneappMultilocationBlockingModalShownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneappMultilocationBlockingModalShown = function(params) {
        return this.bi.log(__assign({
            evid: 451
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppUpcomingSessionsWidgetSettingsSaveParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} emptyStateText - text for empty state
     * @property {GUID} biToken - null
     * @property {boolean} removeSection - true if removed
     * @property {string} sectionLocationTab - home/other tab
     * @property {string} sectionTitle - the title he chose
     * @property {boolean} showAvatars - t/f
     * @property {boolean} showPreviousBookings - true / false
     * @property {string} showSectionTitleToggle - true/false
     * @property {boolean} virtualSessionWithImage - true/false
     **/
    /**
     * Name: Bookings > OneApp > upcoming sessions widget settings > save. Evid: 475.
     * Event description: click save setting of upcoming sessions widget.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * emptyStateText - Type: string. Desc: text for empty state
     *
     * biToken - Type: guid.
     *
     * removeSection - Type: bool. Desc: true if removed
     *
     * sectionLocationTab - Type: string. Desc: home/other tab
     *
     * sectionTitle - Type: string. Desc: the title he chose
     *
     * showAvatars - Type: bool. Desc: t/f
     *
     * showPreviousBookings - Type: bool. Desc: true / false
     *
     * showSectionTitleToggle - Type: string. Desc: true/false
     *
     * virtualSessionWithImage - Type: bool. Desc: true/false
     * @param {bookingsOneAppUpcomingSessionsWidgetSettingsSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppUpcomingSessionsWidgetSettingsSave = function(params) {
        return this.bi.log(__assign({
            evid: 475
        }, params));
    };
    /**
     * @typedef {Object} bookingsGroupSessionsParticipantViewBookingDetailsTapParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - business id
     * @property {string} contactId - contact_id
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     * @property {string} origin - participant_list
     * @property {string} serviceId - service_id
     * @property {string} type - class/course
     **/
    /**
     * Name: Bookings> group sessions -> participant -> view booking details. tap. Evid: 389.
     * Event description: When user taps on "view booking details" after clicking on a participant.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: business id
     *
     * contactId - Type: string. Desc: contact_id
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: participant_list
     *
     * serviceId - Type: string. Desc: service_id
     *
     * type - Type: string. Desc: class/course
     * @param {bookingsGroupSessionsParticipantViewBookingDetailsTapParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGroupSessionsParticipantViewBookingDetailsTap = function(params) {
        return this.bi.log(__assign({
            evid: 389
        }, params));
    };
    /**
     * @typedef {Object} bookingsClientHistoryCustomerListSearchParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} searchBy - {name,email,phone}
     **/
    /**
     * Name: bookings > Client History > Customer List > search. Evid: 208.
     * Event description: search on  Client History > Customer List http://prntscr.com/d53ggr.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * searchBy - Type: string. Desc: {name,email,phone}
     * @param {bookingsClientHistoryCustomerListSearchParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClientHistoryCustomerListSearch = function(params) {
        return this.bi.log(__assign({
            evid: 208
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppClickOnInternalTabParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} pageName - participants
     * @property {string} serviceId - -
     * @property {string} tabName - waitlist/booked/schedule/services
     * @property {string} triggerBy - Owner/Member
     **/
    /**
     * Name: Bookings --> OneApp --> Click on internal tab. Evid: 353.
     * Event description: Click on a tab inside "manage participants" or any other page - either owner or member.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageName - Type: string. Desc: participants
     *
     * serviceId - Type: string. Desc: -
     *
     * tabName - Type: string. Desc: waitlist/booked/schedule/services
     *
     * triggerBy - Type: string. Desc: Owner/Member
     * @param {bookingsOneAppClickOnInternalTabParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppClickOnInternalTab = function(params) {
        return this.bi.log(__assign({
            evid: 353
        }, params));
    };
    /**
     * @typedef {Object} bookingsConnectExternalCalendarPremiumModalLoadParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - null
     * @property {GUID} biToken - -
     * @property {string} referralInfo - null
     **/
    /**
     * Name: bookings > connect external calendar > premium modal.load. Evid: 639.
    
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid. Desc: -
     *
     * referralInfo - Type: string.
     * @param {bookingsConnectExternalCalendarPremiumModalLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsConnectExternalCalendarPremiumModalLoad = function(params) {
        return this.bi.log(__assign({
            evid: 639
        }, params));
    };
    /**
     * @typedef {Object} bookingsCategoryEditParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} categoryId - -
     * @property {GUID} biToken - null
     * @property {string} referral_info - {save_service-new,service_list-edit}
     * @property {string} selection - {yes, no}
     **/
    /**
     * Name: bookings > category_edit. Evid: 105.
     * Event description: BUG-low priority https://jira.wixpress.com/browse/SCHED-1942?filter=-2.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * categoryId - Type: guid. Desc: -
     *
     * biToken - Type: guid.
     *
     * referral_info - Type: string. Desc: {save_service-new,service_list-edit}
     *
     * selection - Type: string. Desc: {yes, no}
     * @param {bookingsCategoryEditParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCategoryEdit = function(params) {
        return this.bi.log(__assign({
            evid: 105
        }, params));
    };
    /**
     * @typedef {Object} bookingsCustomerCardStartLoadingParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {boolean} isEmptyState - true=empty state
     * @property {GUID} biToken - -
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: bookings > Customer card >  start loading. Evid: 278.
     * Event description: http://prntscr.com/i3i3du.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * isEmptyState - Type: bool. Desc: true=empty state
     *
     * biToken - Type: guid. Desc: -
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsCustomerCardStartLoadingParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCustomerCardStartLoading = function(params) {
        return this.bi.log(__assign({
            evid: 278
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditPanelChangeViewParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} pageName - {private_service_list...}
     **/
    /**
     * Name: bookings >edit_panel.change_view. Evid: 176.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * pageName - Type: string. Desc: {private_service_list...}
     * @param {bookingsEditPanelChangeViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditPanelChangeView = function(params) {
        return this.bi.log(__assign({
            evid: 176
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppChooseACategoryParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} categoryId - category_id
     * @property {GUID} biToken - msid
     * @property {string} origin - {owner_flow,member_flow}
     **/
    /**
     * Name: Bookings --> OneApp --> Choose a category. Evid: 339.
     * Event description: Choose a category in the categories selector menu - member https://www.screencast.com/t/PmULrg7PY.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * categoryId - Type: guid. Desc: category_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {owner_flow,member_flow}
     * @param {bookingsOneAppChooseACategoryParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppChooseACategory = function(params) {
        return this.bi.log(__assign({
            evid: 339
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarCreateNewApptParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} location - {button,calendar,one_app_schedule_screen,one_app_calendar, one_app_member_card,one_app_quick_action,quick_actions_panel,one_app_manage_course_sessions_screen}
     * @property {GUID} biToken - msid
     * @property {string} type - {appointment, group session,blockSession, course_session}
     **/
    /**
     * Name: Bookings --> Schedule a new session. Evid: 123.
     * Event description: schedule a new session.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * location - Type: string. Desc: {button,calendar,one_app_schedule_screen,one_app_calendar, one_app_member_card,one_app_quick_action,quick_actions_panel,one_app_manage_course_sessions_screen}
     *
     * biToken - Type: guid. Desc: msid
     *
     * type - Type: string. Desc: {appointment, group session,blockSession, course_session}
     * @param {bookingsCalendarCreateNewApptParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarCreateNewAppt = function(params) {
        return this.bi.log(__assign({
            evid: 123
        }, params));
    };
    /**
     * @typedef {Object} bookingsFeaturePopupOpenIntroduceNewFeatureParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - video conference on service fiorm= "service_video" / {staff} / NULL=payments
     **/
    /**
     * Name: bookings >feature_popup_open - introduce new feature. Evid: 150.
     * Event description: payments_welcome_popup_open / staff popup / service on video.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: video conference on service fiorm= "service_video" / {staff} / NULL=payments
     * @param {bookingsFeaturePopupOpenIntroduceNewFeatureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsFeaturePopupOpenIntroduceNewFeature = function(params) {
        return this.bi.log(__assign({
            evid: 150
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarPopoverOpenDropdownClickParams
     * @property {GUID} bookingId - -
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} referal_info - {cancel button, edit button}
     * @property {string} serviceId - -
     * @property {string} sessionId - -
     * @property {string} type - class/course/individual
     **/
    /**
     * Name: Bookings > Calendar> popup > Open dropdown click. Evid: 499.
     * Event description: dropdown click.
    
     * bookingId - Type: guid. Desc: -
     *
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referal_info - Type: string. Desc: {cancel button, edit button}
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: -
     *
     * type - Type: string. Desc: class/course/individual
     * @param {bookingsCalendarPopoverOpenDropdownClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarPopoverOpenDropdownClick = function(params) {
        return this.bi.log(__assign({
            evid: 499
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneappMultilocationBlockingModalClickUpdateParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     * @property {string} origin - where the modal was triggered
     **/
    /**
     * Name: bookings > oneapp > multilocation blocking modal click update. Evid: 452.
     * Event description: click update app from blocking modal.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: where the modal was triggered
     * @param {bookingsOneappMultilocationBlockingModalClickUpdateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneappMultilocationBlockingModalClickUpdate = function(params) {
        return this.bi.log(__assign({
            evid: 452
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceFormPriceSectionInteractionParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - business_id
     * @property {string} element - field/element that was changed
     * @property {boolean} isNewService - True = new unsaved service
     * @property {GUID} biToken - msid
     * @property {string} serviceId - service_id
     * @property {string} type - {single, multi, multi-course, unknown}
     **/
    /**
     * Name: Bookings --> Service Form - Price section interaction. Evid: 462.
     * Event description: Service Form interaction with the following cta
    "Price per Session" or
    "Amount" or
    "Pricing Plans (Memberships & Packages)".
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: business_id
     *
     * element - Type: string. Desc: field/element that was changed
     *
     * isNewService - Type: bool. Desc: True = new unsaved service
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: service_id
     *
     * type - Type: string. Desc: {single, multi, multi-course, unknown}
     * @param {bookingsServiceFormPriceSectionInteractionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceFormPriceSectionInteraction = function(params) {
        return this.bi.log(__assign({
            evid: 462
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSettingsOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isEmptyState - [true, false]
     * @property {boolean} isFirst - first time of site
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - {Null = app_settings , widget, service_page, members_area}
     * @property {string} widget_name - {old_widget}
     **/
    /**
     * Name: bookings > app_settings_opened. Evid: 160.
     * Event description: open app settings of the app.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isEmptyState - Type: bool. Desc: [true, false]
     *
     * isFirst - Type: bool. Desc: first time of site
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: {Null = app_settings , widget, service_page, members_area}
     *
     * widget_name - Type: string. Desc: {old_widget}
     * @param {bookingsAppSettingsOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSettingsOpened = function(params) {
        return this.bi.log(__assign({
            evid: 160
        }, params));
    };
    /**
     * @typedef {Object} bookingsWorkHoursClickOnCustomizeInStaffPageParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: Bookings > Work hours > Click on "customize" in staff page. Evid: 326.
     * Event description: clicking on the banner to go to "staff".
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsWorkHoursClickOnCustomizeInStaffPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWorkHoursClickOnCustomizeInStaffPage = function(params) {
        return this.bi.log(__assign({
            evid: 326
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInUnlockClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> unlock clicked. Evid: 261.
     * Event description: When user clicks on the unlock button.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInUnlockClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInUnlockClicked = function(params) {
        return this.bi.log(__assign({
            evid: 261
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesAddInfoPopupSavedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {boolean} success - T= data inserted correctly
     * @property {string} type - {ind, group}
     **/
    /**
     * Name: bookings >services>add info popup - saved. Evid: 415.
     * Event description: http://prntscr.com/ftudez.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * success - Type: bool. Desc: T= data inserted correctly
     *
     * type - Type: string. Desc: {ind, group}
     * @param {bookingsServicesAddInfoPopupSavedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesAddInfoPopupSaved = function(params) {
        return this.bi.log(__assign({
            evid: 415
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditPanelElementShowHideParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - {Button_Text,,Name_of_tab...}
     * @property {boolean} isShow - T=show F=hide
     * @property {GUID} biToken - null
     * @property {string} panelName - {private_service_list...}
     **/
    /**
     * Name: bookings >edit_panel.element_show_hide. Evid: 179.
     * Event description: show hide element.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: {Button_Text,,Name_of_tab...}
     *
     * isShow - Type: bool. Desc: T=show F=hide
     *
     * biToken - Type: guid.
     *
     * panelName - Type: string. Desc: {private_service_list...}
     * @param {bookingsEditPanelElementShowHideParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditPanelElementShowHide = function(params) {
        return this.bi.log(__assign({
            evid: 179
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppBookingsTabFirstInteractionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings> one app>bookings tab first interaction. Evid: 300.
     * Event description: -.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsOneAppBookingsTabFirstInteractionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppBookingsTabFirstInteraction = function(params) {
        return this.bi.log(__assign({
            evid: 300
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppAppointmentPageVisitorActionsParams
     * @property {string} action - {message, call}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > one app>appointment page>visitor actions. Evid: 302.
     * Event description: http://prntscr.com/dcrh8z.
    
     * action - Type: string. Desc: {message, call}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsOneAppAppointmentPageVisitorActionsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppAppointmentPageVisitorActions = function(params) {
        return this.bi.log(__assign({
            evid: 302
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarSessionPopoverVcActionParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {boolean} is_active - true if session has booked participants
     * @property {string} link_type - current link type: {zoom,custom}
     * @property {GUID} biToken - msid
     * @property {string} selection - {generate,start,copy,share,change,email_participants,Remove,staff_link}
     * @property {GUID} service_id - service_id
     * @property {string} type - {individual,group,course}
     **/
    /**
     * Name: Bookings > Calendar > Session Popover VC action. Evid: 460.
     * Event description: sent when user performs an action in the session popover.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * is_active - Type: bool. Desc: true if session has booked participants
     *
     * link_type - Type: string. Desc: current link type: {zoom,custom}
     *
     * biToken - Type: guid. Desc: msid
     *
     * selection - Type: string. Desc: {generate,start,copy,share,change,email_participants,Remove,staff_link}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: {individual,group,course}
     * @param {bookingsCalendarSessionPopoverVcActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarSessionPopoverVcAction = function(params) {
        return this.bi.log(__assign({
            evid: 460
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditPanelChangeParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - {Button_Text,,Name_of_tab...}
     * @property {GUID} biToken - null
     * @property {string} panelName - NOT SENT
     * @property {string} value - {5:3, 1:1}
     **/
    /**
     * Name: bookings >edit_panel.change. Evid: 177.
     * Event description: In any change in the edit panel elements the event is sent.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: {Button_Text,,Name_of_tab...}
     *
     * biToken - Type: guid.
     *
     * panelName - Type: string. Desc: NOT SENT
     *
     * value - Type: string. Desc: {5:3, 1:1}
     * @param {bookingsEditPanelChangeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEditPanelChange = function(params) {
        return this.bi.log(__assign({
            evid: 177
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarServiceFilterClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar> service filter. click. Evid: 271.
     * Event description: http://prntscr.com/i1knyu.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsCalendarServiceFilterClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarServiceFilterClick = function(params) {
        return this.bi.log(__assign({
            evid: 271
        }, params));
    };
    /**
     * @typedef {Object} bookingsPaymentSettingsClickAcceptPaymentParams
     * @property {string} bookingsPlatform - []
     * @property {GUID} businessId - []
     * @property {GUID} biToken - []
     **/
    /**
     * Name: Bookings > payment settings > click accept payment. Evid: 397.
     * Event description: User clicked accept payment link from payment settings in service form.
    
     * bookingsPlatform - Type: string. Desc: []
     *
     * businessId - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     * @param {bookingsPaymentSettingsClickAcceptPaymentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPaymentSettingsClickAcceptPayment = function(params) {
        return this.bi.log(__assign({
            evid: 397
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppSendBroadcastMessageToParticipantsInAClassParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {number} messageLength - num characters in message
     * @property {GUID} biToken - msid
     * @property {number} numParticipants - how many participants will receive the message
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings --> OneApp --> Send Broadcast message to participants in a class. Evid: 342.
     * Event description: After typing the message, clicking on "send". https://www.screencast.com/t/Knk8jrxX.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * messageLength - Type: numeric. Desc: num characters in message
     *
     * biToken - Type: guid. Desc: msid
     *
     * numParticipants - Type: numeric. Desc: how many participants will receive the message
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsOneAppSendBroadcastMessageToParticipantsInAClassParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppSendBroadcastMessageToParticipantsInAClass = function(params) {
        return this.bi.log(__assign({
            evid: 342
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesKeyboardClickOnSendParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} type - service type
     **/
    /**
     * Name: Bookings --> services keyboard --> click on "send". Evid: 336.
     * Event description: when clicking on the "send" button to send the service in the keyboard.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type
     * @param {bookingsServicesKeyboardClickOnSendParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesKeyboardClickOnSend = function(params) {
        return this.bi.log(__assign({
            evid: 336
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppRescheduleASessionUserFlowParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} referralInfo - agenda_course_more_actions
     * @property {string} selection - delete / reschedule
     * @property {GUID} service_id - service_id
     * @property {GUID} session_id - null
     * @property {string} type - service type (currently only appointment)
     **/
    /**
     * Name: Bookings --> mobile apps --> course 3 dots modal. Evid: 289.
     * Event description: Click on Reschedule a session / delete a session.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referralInfo - Type: string. Desc: agenda_course_more_actions
     *
     * selection - Type: string. Desc: delete / reschedule
     *
     * service_id - Type: guid. Desc: service_id
     *
     * session_id - Type: guid.
     *
     * type - Type: string. Desc: service type (currently only appointment)
     * @param {bookingsOneAppRescheduleASessionUserFlowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppRescheduleASessionUserFlow = function(params) {
        return this.bi.log(__assign({
            evid: 289
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetEditOrAddServiceParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} isEmptyState - Null - no such option. True=empty state, False - not empty state (and has the option in the product)
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > widget > edit or add service. Evid: 196.
     * Event description: http://prntscr.com/c5li0c.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * isEmptyState - Type: bool. Desc: Null - no such option. True=empty state, False - not empty state (and has the option in the product)
     *
     * biToken - Type: guid.
     * @param {bookingsWidgetEditOrAddServiceParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetEditOrAddService = function(params) {
        return this.bi.log(__assign({
            evid: 196
        }, params));
    };
    /**
     * @typedef {Object} bookingsVideoTutorialsClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} pageName - service_page/video_modal
     * @property {string} selection - main_play_video/main_watch_now accordion_top_play/accordion_middle_play/accordion_lower_play/accordion_top_c/accordion_middle_video/accordion_lower_video/see_all_extend/see_all_collapse/close_video_modal
     * @property {string} serviceId - -
     * @property {string} videoId - -
     **/
    /**
     * Name: bookings->video tutorials->click. Evid: 638.
     * Event description: Click on action related to 'How to' videos.
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * pageName - Type: string. Desc: service_page/video_modal
     *
     * selection - Type: string. Desc: main_play_video/main_watch_now accordion_top_play/accordion_middle_play/accordion_lower_play/accordion_top_c/accordion_middle_video/accordion_lower_video/see_all_extend/see_all_collapse/close_video_modal
     *
     * serviceId - Type: string. Desc: -
     *
     * videoId - Type: string. Desc: -
     * @param {bookingsVideoTutorialsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsVideoTutorialsClick = function(params) {
        return this.bi.log(__assign({
            evid: 638
        }, params));
    };
    /**
     * @typedef {Object} bookingsParticipantsAddNewClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {number} exsitingParticipants - number of exsiting Participants - already in the session
     * @property {string} location - {upper_button,middle_button}
     * @property {number} maxParticipants - number of Maximum Participants
     * @property {GUID} biToken - null
     * @property {string} origin - {waiting_list}
     * @property {string} serviceId - -
     * @property {string} sessionId - --
     * @property {string} type - {course, class}
     **/
    /**
     * Name: Bookings > add new participant click. Evid: 162.
     * Event description: click on add Participants - available also from the app - to be separated by the browser name.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * exsitingParticipants - Type: numeric. Desc: number of exsiting Participants - already in the session
     *
     * location - Type: string. Desc: {upper_button,middle_button}
     *
     * maxParticipants - Type: numeric. Desc: number of Maximum Participants
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: {waiting_list}
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: --
     *
     * type - Type: string. Desc: {course, class}
     * @param {bookingsParticipantsAddNewClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsParticipantsAddNewClick = function(params) {
        return this.bi.log(__assign({
            evid: 162
        }, params));
    };
    /**
     * @typedef {Object} bookingsWidgetSelectStaffParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - instance_id
     * @property {GUID} biToken - msid
     * @property {string} pageName - staff_panel_widget_settings
     * @property {string} selection - {edit,manage_link,show,hide}
     **/
    /**
     * Name: bookings > staff widget > select staff. Evid: 379.
     * Event description: Select staff in Staff Widget Settings.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageName - Type: string. Desc: staff_panel_widget_settings
     *
     * selection - Type: string. Desc: {edit,manage_link,show,hide}
     * @param {bookingsWidgetSelectStaffParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsWidgetSelectStaff = function(params) {
        return this.bi.log(__assign({
            evid: 379
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffPageDeleteVcAccountParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} current_platform - {zoom/custom link}
     * @property {GUID} biToken - msid
     * @property {GUID} staffId - null if default account
     **/
    /**
     * Name: Bookings > Staff Page > Delete VC Account. Evid: 469.
     * Event description: Sent when a user tries to delete VC account from the staff page.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * current_platform - Type: string. Desc: {zoom/custom link}
     *
     * biToken - Type: guid. Desc: msid
     *
     * staffId - Type: guid. Desc: null if default account
     * @param {bookingsStaffPageDeleteVcAccountParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffPageDeleteVcAccount = function(params) {
        return this.bi.log(__assign({
            evid: 469
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInCancelClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> cancel clicked. Evid: 259.
     * Event description: When user clicks on cancel in the self check in screen.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInCancelClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInCancelClicked = function(params) {
        return this.bi.log(__assign({
            evid: 259
        }, params));
    };
    /**
     * @typedef {Object} bookingsSettingsElementChangedParams
     * @property {string} appName - {Widget/Calendar/List}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} element - field/element that was changed
     * @property {GUID} biToken - msid
     * @property {string} platformName - {ADI/Editor}
     * @property {string} selection - {square,round,non}
     * @property {string} tabName - optional {Layouts/Design/Text...}
     **/
    /**
     * Name: Bookings --> Settings - Element changed. Evid: 330.
     * Event description: Bookings --> Settings - Element changed (in ADI or Editor).
    
     * appName - Type: string. Desc: {Widget/Calendar/List}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * element - Type: string. Desc: field/element that was changed
     *
     * biToken - Type: guid. Desc: msid
     *
     * platformName - Type: string. Desc: {ADI/Editor}
     *
     * selection - Type: string. Desc: {square,round,non}
     *
     * tabName - Type: string. Desc: optional {Layouts/Design/Text...}
     * @param {bookingsSettingsElementChangedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSettingsElementChanged = function(params) {
        return this.bi.log(__assign({
            evid: 330
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppSettingsSaveParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {string} component_type - {availability,display_settings}
     * @property {boolean} groupByCategories - true - if the toggle was switched to on and the other way arround
     * @property {GUID} biToken - f1903b54-7c75-4730-b664-909b9926a7b8
     * @property {string} params - params json format
     **/
    /**
     * Name: Bookings --> OneApp --> Settings --> save. Evid: 295.
     * Event description: save one of the settings components.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * component_type - Type: string. Desc: {availability,display_settings}
     *
     * groupByCategories - Type: bool. Desc: true - if the toggle was switched to on and the other way arround
     *
     * biToken - Type: guid. Desc: f1903b54-7c75-4730-b664-909b9926a7b8
     *
     * params - Type: string. Desc: params json format
     * @param {bookingsOneAppSettingsSaveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppSettingsSave = function(params) {
        return this.bi.log(__assign({
            evid: 295
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffClickOnDeleteIconParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} referal_info - -
     * @property {string} staffid - -
     **/
    /**
     * Name: Bookings > staff > click on delete icon. Evid: 331.
     * Event description: when the user clicks on the garbage can icon in the staff page. https://screencast.com/t/YBsumDwswGes.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * referal_info - Type: string. Desc: -
     *
     * staffid - Type: string. Desc: -
     * @param {bookingsStaffClickOnDeleteIconParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffClickOnDeleteIcon = function(params) {
        return this.bi.log(__assign({
            evid: 331
        }, params));
    };
    /**
     * @typedef {Object} bookingsServicesRenameStaffSucessParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} type - {private,group}
     **/
    /**
     * Name: bookings >services> rename_staff.sucess. Evid: 219.
     * Event description: http://prntscr.com/ddj218.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * type - Type: string. Desc: {private,group}
     * @param {bookingsServicesRenameStaffSucessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServicesRenameStaffSucess = function(params) {
        return this.bi.log(__assign({
            evid: 219
        }, params));
    };
    /**
     * @typedef {Object} bookingsPackagesCreateServiceFirstPopupOpenParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > packages > create service first popup. open. Evid: 204.
     * Event description: create service first popup. open  http://prntscr.com/d44vpb.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsPackagesCreateServiceFirstPopupOpenParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsPackagesCreateServiceFirstPopupOpen = function(params) {
        return this.bi.log(__assign({
            evid: 204
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsSelfCheckInClickDoneParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> self check in -> click done. Evid: 264.
     * Event description: When user clicks on the i'm here button after choosing a name..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsSelfCheckInClickDoneParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsSelfCheckInClickDone = function(params) {
        return this.bi.log(__assign({
            evid: 264
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarFilterModalFilterParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} filterByClient - true if some filter was made on client
     * @property {boolean} filterByLocation - true if some filter was made on location
     * @property {boolean} filterByOccupancy - true if some filter was made on occupancy
     * @property {boolean} filterBySessionType - true if some filter was made on session type
     * @property {boolean} filterByStaff - true if some filter was made on staff
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > calendar > filter modal - filter. Evid: 424.
     * Event description: user clicked filter from filter modal.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * filterByClient - Type: bool. Desc: true if some filter was made on client
     *
     * filterByLocation - Type: bool. Desc: true if some filter was made on location
     *
     * filterByOccupancy - Type: bool. Desc: true if some filter was made on occupancy
     *
     * filterBySessionType - Type: bool. Desc: true if some filter was made on session type
     *
     * filterByStaff - Type: bool. Desc: true if some filter was made on staff
     *
     * biToken - Type: guid.
     * @param {bookingsCalendarFilterModalFilterParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarFilterModalFilter = function(params) {
        return this.bi.log(__assign({
            evid: 424
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveChangesPopupLeaveWoSavingClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} referralInfo - on what page the user is on currently
     * @property {string} targetInfo - target page
     **/
    /**
     * Name: bookings >save changes popup.leave w\o saving. click. Evid: 228.
     * Event description: http://prntscr.com/dqjv88.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * referralInfo - Type: string. Desc: on what page the user is on currently
     *
     * targetInfo - Type: string. Desc: target page
     * @param {bookingsSaveChangesPopupLeaveWoSavingClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveChangesPopupLeaveWoSavingClick = function(params) {
        return this.bi.log(__assign({
            evid: 228
        }, params));
    };
    /**
     * @typedef {Object} bookingsServiceListQuickLinksClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     * @property {string} page_name - service_list, calendar
     **/
    /**
     * Name: bookings > BO > quick links. click. Evid: 361.
     * Event description: Clicking on the button that opens the dropdown list. https://zpl.io/a3D4ne8.
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     *
     * page_name - Type: string. Desc: service_list, calendar
     * @param {bookingsServiceListQuickLinksClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsServiceListQuickLinksClick = function(params) {
        return this.bi.log(__assign({
            evid: 361
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppFullCalendarViewClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} referral_info - {one_app_service_list, one_app_quick_action}
     **/
    /**
     * Name: Bookings --> OneApp --> Full calendar view click. Evid: 288.
     * Event description: Click on the button to access the full calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {one_app_service_list, one_app_quick_action}
     * @param {bookingsOneAppFullCalendarViewClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppFullCalendarViewClick = function(params) {
        return this.bi.log(__assign({
            evid: 288
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetAlignmentSelectionParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - {title,desc, summary}
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - null
     * @property {string} referralInfo - null
     * @property {string} selection - null
     **/
    /**
     * Name: bookings > app_set.alignment_selection. Evid: 127.
     * Event description: only in widget and service_page.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: {title,desc, summary}
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string.
     *
     * referralInfo - Type: string.
     *
     * selection - Type: string.
     * @param {bookingsAppSetAlignmentSelectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetAlignmentSelection = function(params) {
        return this.bi.log(__assign({
            evid: 127
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddParticipantAddNewContactFailureParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} errorReason - error_reason
     * @property {GUID} instance_id - instance_id
     * @property {GUID} msid - msid
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings > Add participant > Add new contact Failure. Evid: 637.
     * Event description: When a user wants to add a new participant that don't have a contact. and when adding a contact the it fail to update the contacts mail..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * errorReason - Type: string. Desc: error_reason
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * msid - Type: guid. Desc: msid
     *
     * biToken - Type: guid.
     * @param {bookingsAddParticipantAddNewContactFailureParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddParticipantAddNewContactFailure = function(params) {
        return this.bi.log(__assign({
            evid: 637
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppContinueBroadcast100PeopleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {number} numParticipants - how many participants will receive the message
     * @property {GUID} service_id - service_id
     **/
    /**
     * Name: Bookings --> OneApp --> Continue Broadcast > 100 people. Evid: 343.
     * Event description: Click on "continue" after choosing to send a broadcast to > 100 people. https://www.screencast.com/t/8AVcH3GYL0.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * numParticipants - Type: numeric. Desc: how many participants will receive the message
     *
     * service_id - Type: guid. Desc: service_id
     * @param {bookingsOneAppContinueBroadcast100PeopleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppContinueBroadcast100People = function(params) {
        return this.bi.log(__assign({
            evid: 343
        }, params));
    };
    /**
     * @typedef {Object} bookingsSettingsNavigationClickParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - -
     * @property {GUID} biToken - -
     * @property {string} selection - {calendar, services}
     * @property {GUID} customer_id - -
     **/
    /**
     * Name: Bookings > settings navigation click. Evid: 313.
     * Event description: click on "back to inbox" from the calendar.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: -
     *
     * selection - Type: string. Desc: {calendar, services}
     *
     * customer_id - Type: guid. Desc: -
     * @param {bookingsSettingsNavigationClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSettingsNavigationClick = function(params) {
        return this.bi.log(__assign({
            evid: 313
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffChangeStaffMemberWorkingHourRadioButtonParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} selection - { same (defult, set (staff hours)}
     **/
    /**
     * Name: bookings > staff > change staff member working hour radio button. Evid: 186.
     * Event description: change selection in the staff working hour radio button
    http://prntscr.com/bom4r9.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string. Desc: { same (defult, set (staff hours)}
     * @param {bookingsStaffChangeStaffMemberWorkingHourRadioButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffChangeStaffMemberWorkingHourRadioButton = function(params) {
        return this.bi.log(__assign({
            evid: 186
        }, params));
    };
    /**
     * @typedef {Object} bookingsCompareServiceTypesClickParams
     * @property {string} bookingsPlatform - new_bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} linkUrl - link to KB
     * @property {string} location - service_form
     * @property {GUID} biToken - msid
     * @property {string} serviceId - {service_id}
     * @property {string} toggle_value - {ind,class/course}
     * @property {string} type - {ind,class/course}
     **/
    /**
     * Name: bookings > "compare service types".click. Evid: 392.
     * Event description: Edit confirmation email/click on "show me" to go to the automations page.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * linkUrl - Type: string. Desc: link to KB
     *
     * location - Type: string. Desc: service_form
     *
     * biToken - Type: guid. Desc: msid
     *
     * serviceId - Type: string. Desc: {service_id}
     *
     * toggle_value - Type: string. Desc: {ind,class/course}
     *
     * type - Type: string. Desc: {ind,class/course}
     * @param {bookingsCompareServiceTypesClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCompareServiceTypesClick = function(params) {
        return this.bi.log(__assign({
            evid: 392
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppScreenRenderedParams
     * @property {string} appName - app_name
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - Bookings business_id
     * @property {GUID} biToken - msid
     * @property {string} pageName - page_name
     * @property {string} previousPage - previous_page
     **/
    /**
     * Name: Bookings --> OneApp --> screen rendered. Evid: 314.
     * Event description: when specific Bookings screen was rendered OneApp..
    
     * appName - Type: string. Desc: app_name
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: Bookings business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * pageName - Type: string. Desc: page_name
     *
     * previousPage - Type: string. Desc: previous_page
     * @param {bookingsOneAppScreenRenderedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppScreenRendered = function(params) {
        return this.bi.log(__assign({
            evid: 314
        }, params));
    };
    /**
     * @typedef {Object} bookingsSaveCustomVcLinkOapNotifyParticipantsParams
     * @property {string} action_type - {edit/restore}
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - null
     * @property {boolean} notifyChecked - notify participants
     **/
    /**
     * Name: bookings->oap vc link > notify participants modal. Evid: 473.
     * Event description: sent after the users choose whether to notify participants on change of VC link to session - One App Only!.
    
     * action_type - Type: string. Desc: {edit/restore}
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid.
     *
     * notifyChecked - Type: bool. Desc: notify participants
     * @param {bookingsSaveCustomVcLinkOapNotifyParticipantsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsSaveCustomVcLinkOapNotifyParticipants = function(params) {
        return this.bi.log(__assign({
            evid: 473
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppSetDesignTabChangeStyleParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {string} element - {page_title,button_text,text,page background...}
     * @property {boolean} isPreview - null
     * @property {GUID} biToken - null
     * @property {string} page_name - {services,calendar,info,confirmation, members_area}NULL for widget
     * @property {string} parameter - {opacity,color,font, slider,width,radius,box,underline}
     * @property {string} referralInfo - {NULL= app settings, widget}
     * @property {string} pagetype - {private/group} NULL for widget or membersArea
     **/
    /**
     * Name: bookings > app_set.design_tab.change_style. Evid: 167.
     * Event description: change color,font or opacity in any element in the app settings - sent only if the element was changed.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * element - Type: string. Desc: {page_title,button_text,text,page background...}
     *
     * isPreview - Type: bool.
     *
     * biToken - Type: guid.
     *
     * page_name - Type: string. Desc: {services,calendar,info,confirmation, members_area}NULL for widget
     *
     * parameter - Type: string. Desc: {opacity,color,font, slider,width,radius,box,underline}
     *
     * referralInfo - Type: string. Desc: {NULL= app settings, widget}
     *
     * pagetype - Type: string. Desc: {private/group} NULL for widget or membersArea
     * @param {bookingsAppSetDesignTabChangeStyleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppSetDesignTabChangeStyle = function(params) {
        return this.bi.log(__assign({
            evid: 167
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarFilterApptByStaffMemberParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     **/
    /**
     * Name: bookings > calendar>filter_appt_by_staff_member. Evid: 174.
     * Event description: filter calendar appointments by a staff member- one or more. sent only when the selection is changed..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     * @param {bookingsCalendarFilterApptByStaffMemberParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarFilterApptByStaffMember = function(params) {
        return this.bi.log(__assign({
            evid: 174
        }, params));
    };
    /**
     * @typedef {Object} bookingsAddSessionsFromTheCalendarModalContinueClickParams
     * @property {string} bookingsPlatform - new_bookings_server
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {GUID} service_id - service_id
     * @property {string} triggerBy - {service_form_save_service,service_form_add_session}
     * @property {string} type - Service type {class, course}
     **/
    /**
     * Name: Bookings --> add sessions from the calendar modal --> continue.click. Evid: 394.
     * Event description: Clicking on continue to calendar.
    
     * bookingsPlatform - Type: string. Desc: new_bookings_server
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * service_id - Type: guid. Desc: service_id
     *
     * triggerBy - Type: string. Desc: {service_form_save_service,service_form_add_session}
     *
     * type - Type: string. Desc: Service type {class, course}
     * @param {bookingsAddSessionsFromTheCalendarModalContinueClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAddSessionsFromTheCalendarModalContinueClick = function(params) {
        return this.bi.log(__assign({
            evid: 394
        }, params));
    };
    /**
     * @typedef {Object} bookingsStaffSyncInviteModalClickParams
     * @property {string} bookingsPlatform - -
     * @property {GUID} businessId - -
     * @property {string} clickType - {cancel, exit, send, message focus}
     * @property {GUID} biToken - -
     * @property {GUID} staffId - staff_id of the resource that the invite is sent to
     **/
    /**
     * Name: bookings > staff > sync invite modal >click. Evid: 614.
     * Event description: sync calendar invite modal, sending an invite using inbox..
    
     * bookingsPlatform - Type: string. Desc: -
     *
     * businessId - Type: guid. Desc: -
     *
     * clickType - Type: string. Desc: {cancel, exit, send, message focus}
     *
     * biToken - Type: guid. Desc: -
     *
     * staffId - Type: guid. Desc: staff_id of the resource that the invite is sent to
     * @param {bookingsStaffSyncInviteModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsStaffSyncInviteModalClick = function(params) {
        return this.bi.log(__assign({
            evid: 614
        }, params));
    };
    /**
     * @typedef {Object} bookingsClubsGroupSessionsNewParticipantSaveClickedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} msid - meta site id
     * @property {GUID} biToken - null
     **/
    /**
     * Name: Bookings>clubs>group sessions -> New participant -> Save clicked. Evid: 249.
     * Event description: When user clicks on save after filling details of new participant..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * msid - Type: guid. Desc: meta site id
     *
     * biToken - Type: guid.
     * @param {bookingsClubsGroupSessionsNewParticipantSaveClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsClubsGroupSessionsNewParticipantSaveClicked = function(params) {
        return this.bi.log(__assign({
            evid: 249
        }, params));
    };
    /**
     * @typedef {Object} bookingsRestoreDefaultVcLinkNotExistsParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {boolean} notifyChecked - notify participants
     * @property {string} selection - {cancel/agree}
     **/
    /**
     * Name: bookings -> restore default vc link not exists. Evid: 474.
     * Event description: sent when a user tries to restore the default vc link for a session but it does not exists.
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * notifyChecked - Type: bool. Desc: notify participants
     *
     * selection - Type: string. Desc: {cancel/agree}
     * @param {bookingsRestoreDefaultVcLinkNotExistsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsRestoreDefaultVcLinkNotExists = function(params) {
        return this.bi.log(__assign({
            evid: 474
        }, params));
    };
    /**
     * @typedef {Object} bookingsAppointmentPendingApprovalDeclineApproveRescheduleParams
     * @property {string} action - decline/reschedule/approve
     * @property {string} appointmentId - session_id
     * @property {string} bookingId - booking_id
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} categoryId - -
     * @property {string} contactId - -
     * @property {boolean} mobileOneApp - Null\F = desktop\mobile non app
     * @property {GUID} biToken - msid
     * @property {string} referral_info - {appointment_pending_approval}
     * @property {GUID} service_id - service_id
     * @property {string} type - service type (currently only private)
     **/
    /**
     * Name: Bookings --> appointment pending approval --> decline/approve/reschedule. Evid: 360.
     * Event description: Decline/approve button for appointment pending approval modal.
    
     * action - Type: string. Desc: decline/reschedule/approve
     *
     * appointmentId - Type: string. Desc: session_id
     *
     * bookingId - Type: string. Desc: booking_id
     *
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * categoryId - Type: string. Desc: -
     *
     * contactId - Type: string. Desc: -
     *
     * mobileOneApp - Type: bool. Desc: Null\F = desktop\mobile non app
     *
     * biToken - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {appointment_pending_approval}
     *
     * service_id - Type: guid. Desc: service_id
     *
     * type - Type: string. Desc: service type (currently only private)
     * @param {bookingsAppointmentPendingApprovalDeclineApproveRescheduleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsAppointmentPendingApprovalDeclineApproveReschedule = function(params) {
        return this.bi.log(__assign({
            evid: 360
        }, params));
    };
    /**
     * @typedef {Object} bookingsMobileAppsSpecificParticipantModalClickParams
     * @property {string} bookingsPlatform - bookings_platform
     * @property {GUID} businessId - business_id
     * @property {string} contactId - null
     * @property {GUID} biToken - msid
     * @property {GUID} participant_id - participant member Id
     * @property {string} selection - Mark as No-Show / View Contact / View Booking Details / Remove from Session
     * @property {GUID} service_id - null
     * @property {string} sessionId - --
     * @property {string} type - service type (class, course, appointment)
     **/
    /**
     * Name: Bookings --> Mobile apps --> specific participant modal --> click. Evid: 624.
     * Event description: Tap on a participant from the "manage participants" page, and then this modal will open. This event will be sent with every click in the modal..
    
     * bookingsPlatform - Type: string. Desc: bookings_platform
     *
     * businessId - Type: guid. Desc: business_id
     *
     * contactId - Type: string.
     *
     * biToken - Type: guid. Desc: msid
     *
     * participant_id - Type: guid. Desc: participant member Id
     *
     * selection - Type: string. Desc: Mark as No-Show / View Contact / View Booking Details / Remove from Session
     *
     * service_id - Type: guid.
     *
     * sessionId - Type: string. Desc: --
     *
     * type - Type: string. Desc: service type (class, course, appointment)
     * @param {bookingsMobileAppsSpecificParticipantModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsMobileAppsSpecificParticipantModalClick = function(params) {
        return this.bi.log(__assign({
            evid: 624
        }, params));
    };
    /**
     * @typedef {Object} bookingsOneAppBannerDismissParams
     * @property {string} bannerType - {invite_to_service}
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - business_id
     * @property {GUID} biToken - msid
     * @property {string} screenName - {owner_class_empty, owner_class, owner_private, member_success_screen}
     **/
    /**
     * Name: Bookings --> OneApp --> Banner dismiss. Evid: 316.
     * Event description: Click on dismiss banner.
    
     * bannerType - Type: string. Desc: {invite_to_service}
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid. Desc: business_id
     *
     * biToken - Type: guid. Desc: msid
     *
     * screenName - Type: string. Desc: {owner_class_empty, owner_class, owner_private, member_success_screen}
     * @param {bookingsOneAppBannerDismissParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsOneAppBannerDismiss = function(params) {
        return this.bi.log(__assign({
            evid: 316
        }, params));
    };
    /**
     * @typedef {Object} bookingsCalendarChangeTimezoneClickParams
     * @property {string} bookingsPlatform - Null if old platform
     * @property {GUID} businessId - -
     * @property {GUID} biToken - msid
     **/
    /**
     * Name: bookings > calendar> change timezone.click. Evid: 363.
     * Event description: click on change time zone in calendar.
    
     * bookingsPlatform - Type: string. Desc: Null if old platform
     *
     * businessId - Type: guid. Desc: -
     *
     * biToken - Type: guid. Desc: msid
     * @param {bookingsCalendarChangeTimezoneClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsCalendarChangeTimezoneClick = function(params) {
        return this.bi.log(__assign({
            evid: 363
        }, params));
    };
    /**
     * @typedef {Object} bookingsResetToOriginalDesignClick429Params
     * @property {string} appName - -
     * @property {string} bookingsPlatform - bookings_new_platform
     * @property {GUID} businessId - []
     * @property {string} items - items restored to default
     * @property {GUID} biToken - []
     * @property {string} sectionName - -
     * @property {string} tabName - -
     **/
    /**
     * Name: bookings > reset to original design.click. Evid: 429.
     * Event description: click on "Reset to original design".
    
     * appName - Type: string. Desc: -
     *
     * bookingsPlatform - Type: string. Desc: bookings_new_platform
     *
     * businessId - Type: guid. Desc: []
     *
     * items - Type: string. Desc: items restored to default
     *
     * biToken - Type: guid. Desc: []
     *
     * sectionName - Type: string. Desc: -
     *
     * tabName - Type: string. Desc: -
     * @param {bookingsResetToOriginalDesignClick429Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsResetToOriginalDesignClick429 = function(params) {
        return this.bi.log(__assign({
            evid: 429
        }, params));
    };
    /**
     * @typedef {Object} bookingsBackOfficeOpenedParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {boolean} fromFeed - null
     * @property {number} loadingTime - in miliseconds . BO loading time. try-->open
     * @property {GUID} biToken - null
     * @property {string} origin - null
     * @property {string} pageView - The page that the BO was opened on- {calendar,save_service,popup, business_info}
     * @property {boolean} setup_status_business_info - null
     * @property {boolean} setup_status_calendar - null
     * @property {boolean} setup_status_services - null
     **/
    /**
     * Name: bookings > back_office_opened. Evid: 133.
     * Event description: Back office opened.
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * fromFeed - Type: bool.
     *
     * loadingTime - Type: numeric. Desc: in miliseconds . BO loading time. try-->open
     *
     * biToken - Type: guid.
     *
     * origin - Type: string.
     *
     * pageView - Type: string. Desc: The page that the BO was opened on- {calendar,save_service,popup, business_info}
     *
     * setup_status_business_info - Type: bool.
     *
     * setup_status_calendar - Type: bool.
     *
     * setup_status_services - Type: bool.
     * @param {bookingsBackOfficeOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsBackOfficeOpened = function(params) {
        return this.bi.log(__assign({
            evid: 133
        }, params));
    };
    /**
     * @typedef {Object} bookingsEditParams
     * @property {string} appointmentId - -
     * @property {GUID} bookingId - -
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} categoryId - -
     * @property {boolean} isMainParticipant - relevant for participant only- T=main, F- another participant
     * @property {GUID} biToken - null
     * @property {string} referal_info - {calendar_groups_session, calendar_individual_session, services_list,appt, staff, staff_availability_service, staff_availability_after_show_service_availability, staff_availability_calendar_pimple, staff_availability_staff_card, one_app_services_tab, one_app_group_session, one_app_individual_session,calendar_block_session, calendar_Course_session}
     * @property {string} serviceId - -
     * @property {string} sessionId - only when referal_info=appointment-->appointment_id for new server platform
     * @property {GUID} staffId - staff_id
     * @property {string} type - {ind, groups,course,block}
     **/
    /**
     * Name: Bookings > Edit. Evid: 117.
     * Event description: edit click - also relevant to OneApp.
    
     * appointmentId - Type: string. Desc: -
     *
     * bookingId - Type: guid. Desc: -
     *
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * categoryId - Type: guid. Desc: -
     *
     * isMainParticipant - Type: bool. Desc: relevant for participant only- T=main, F- another participant
     *
     * biToken - Type: guid.
     *
     * referal_info - Type: string. Desc: {calendar_groups_session, calendar_individual_session, services_list,appt, staff, staff_availability_service, staff_availability_after_show_service_availability, staff_availability_calendar_pimple, staff_availability_staff_card, one_app_services_tab, one_app_group_session, one_app_individual_session,calendar_block_session, calendar_Course_session}
     *
     * serviceId - Type: string. Desc: -
     *
     * sessionId - Type: string. Desc: only when referal_info=appointment-->appointment_id for new server platform
     *
     * staffId - Type: guid. Desc: staff_id
     *
     * type - Type: string. Desc: {ind, groups,course,block}
     * @param {bookingsEditParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsEdit = function(params) {
        return this.bi.log(__assign({
            evid: 117
        }, params));
    };
    /**
     * @typedef {Object} bookingsGetServiceIdParams
     * @property {string} bookingsPlatform - null
     * @property {GUID} businessId - null
     * @property {GUID} biToken - null
     * @property {string} service_id - -
     **/
    /**
     * Name: bookings > get_service_id. Evid: 141.
     * Event description: after a new service was added (saved) send the service id. service id is created only on save event and not on creation (only in NEW)..
    
     * bookingsPlatform - Type: string.
     *
     * businessId - Type: guid.
     *
     * biToken - Type: guid.
     *
     * service_id - Type: string. Desc: -
     * @param {bookingsGetServiceIdParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bookingsGetServiceId = function(params) {
        return this.bi.log(__assign({
            evid: 141
        }, params));
    };
    return Logger;
}());
export {
    Logger
};
export default init;
export function getLoggerConf() {
    return {
        src: 16,
        endpoint: 'wixboost-users',
    };
}
//# sourceMappingURL=index.js.map