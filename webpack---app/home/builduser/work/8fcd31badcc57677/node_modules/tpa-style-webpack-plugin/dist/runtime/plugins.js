var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import {
    parenthesisAreBalanced
} from './utils/utils';
var paramsRegex = /,(?![^(]*(?:\)|}))/g;
var Plugins = /** @class */ (function() {
    function Plugins() {
        this.resetPlugins();
    }
    Plugins.prototype.addCssFunction = function(funcName, func) {
        this.cssFunctions[funcName] = wrapWithValueProvider(func);
        this.updateRegex();
    };
    Plugins.prototype.addDeclarationReplacer = function(func) {
        this.declarationReplacers.push(func);
    };
    Plugins.prototype.resetPlugins = function() {
        this.cssFunctions = {};
        this.declarationReplacers = [];
        this.regex = undefined;
    };
    Plugins.prototype.isSupportedFunction = function(str) {
        return this.regex.test(str);
    };
    Plugins.prototype.getFunctionSignature = function(str) {
        var groups = this.regex.exec(str);
        if (groups) {
            return {
                funcName: groups[1],
                args: this.extractArguments(groups[2]),
            };
        }
        return null;
    };
    Plugins.prototype.extractArguments = function(argsString) {
        var result = argsString.split(paramsRegex).reduce(function(acc, currentPart) {
            acc.tmpParts = acc.tmpParts.concat(currentPart);
            var tmpStr = acc.tmpParts.join(',');
            if (parenthesisAreBalanced(tmpStr)) {
                acc.args.push(tmpStr);
                acc.tmpParts.length = 0;
            }
            return acc;
        }, {
            args: [],
            tmpParts: []
        });
        if (result.tmpParts.length > 0) {
            throw new Error("'" + argsString + "' contains unbalanced parenthesis.");
        }
        return result.args;
    };
    Plugins.prototype.updateRegex = function() {
        this.regex = new RegExp("(" + Object.keys(this.cssFunctions).join('|') + ")\\((.*)\\)");
    };
    return Plugins;
}());
export {
    Plugins
};

function wrapWithValueProvider(fnToWrap) {
    return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return function(tpaParams) {
            return fnToWrap.apply(void 0, __spreadArrays(args.map(function(fn) {
                return fn(tpaParams);
            }), [tpaParams]));
        };
    };
}
//# sourceMappingURL=plugins.js.map