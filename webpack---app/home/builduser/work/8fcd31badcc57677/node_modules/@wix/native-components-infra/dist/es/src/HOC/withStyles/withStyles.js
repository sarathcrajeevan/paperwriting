import {
    __assign,
    __extends,
    __spreadArrays
} from "tslib";
import * as React from 'react';
import * as _ from 'lodash';
// For editor-flow projects, this package is being replaced with private @tpa-style-webpack-plugin.
import {
    getProcessedCss,
    getStaticCss
} from 'tpa-style-webpack-plugin/runtime';
import * as utils from '../../constants/constants';
export var getProcessedCssMemoized = _.memoize(getProcessedCss);
export var getStaticCssMemoized = _.memoize(getStaticCss, function(_a) {
    var prefixSelector = (_a === void 0 ? {} : _a).prefixSelector;
    return prefixSelector;
});
export var withStyles = function(Component, options) {
    var cssFiles = [].concat(options.cssPath || []);
    var rtlCssFiles = [].concat(options.rtlCssPath || []);
    var ltrCssFiles = [].concat(options.ltrCssPath || []);
    var shouldUseFiles = rtlCssFiles.length;
    return /** @class */ (function(_super) {
        __extends(WithStyles, _super);

        function WithStyles(props) {
            var _this = _super.call(this, props) || this;
            _this.tokenForCiPoliceRule = 'a221ab11-8d7e-4f36-bf44-fd8f380d96ee';
            _this.numOfLoaded = 0;
            _this.cssFilesToLoad = __spreadArrays(cssFiles, (props.isRTL ? rtlCssFiles : ltrCssFiles));
            var linksLoaded = true;
            if (utils.canUseDom()) {
                _this.numOfLoaded = document.querySelectorAll("." + ((props.host && props.host.id) || props.id) + " link").length;
                linksLoaded = _this.numOfLoaded === _this.cssFilesToLoad.length;
            }
            _this.state = {
                linksLoaded: linksLoaded
            };
            _this.markAsLoaded = _this.markAsLoaded.bind(_this);
            _this.isInSite = props.host && props.host.viewMode === 'Site';
            return _this;
        }
        WithStyles.prototype.componentDidMount = function() {
            for (var i = 0; i < document.styleSheets.length; i++) {
                if (typeof document.styleSheets[i].href === 'string') {
                    var filePath = document.styleSheets[i].href.replace(this.props.cssBaseUrl, '');
                    if (this.cssFilesToLoad.indexOf(filePath) > -1) {
                        this.markAsLoaded();
                    }
                }
            }
        };
        WithStyles.prototype.markAsLoaded = function() {
            this.numOfLoaded++;
            if (this.numOfLoaded >= this.cssFilesToLoad.length) {
                this.setState({
                    linksLoaded: true
                });
            }
        };
        WithStyles.prototype.render = function() {
            var _this = this;
            var _a = this.props,
                isRTL = _a.isRTL,
                isMobile = _a.isMobile,
                cssBaseUrl = _a.cssBaseUrl,
                host = _a.host,
                prefixStaticCss = _a.prefixStaticCss;
            var style = this.props.style || (host && host.style);
            var styleId = (host && host.id) || this.props.id;
            var prefixSelector = styleId ? "." + styleId : '';
            var getProcessedCssFunc = options.enableMemoization && this.isInSite ? getProcessedCssMemoized : getProcessedCss;
            var getStaticCssFunc = options.enableMemoization && this.isInSite ? getStaticCssMemoized : getStaticCss;
            var css = getProcessedCssFunc(style, {
                prefixSelector: prefixSelector,
                isRTL: !!isRTL,
                isMobile: !!isMobile,
                strictMode: !!options.strictMode,
            }, options.defaults);
            var staticCss = getStaticCssFunc(prefixStaticCss && prefixSelector ? {
                prefixSelector: prefixSelector
            } : undefined);
            var wrapperStyles = host.shouldSetHeightOnWrapper ? {
                height: '100%'
            } : {}; // when experiment bv_ooiHeight100P is merged always set height 100%
            return (React.createElement("div", {
                    className: styleId,
                    style: wrapperStyles
                },
                cssBaseUrl && shouldUseFiles ?
                this.cssFilesToLoad.map(function(fileName) {
                    return (React.createElement("link", {
                        href: "" + cssBaseUrl + fileName,
                        rel: "stylesheet",
                        type: "text/css",
                        key: fileName,
                        onLoad: _this.markAsLoaded
                    }));
                }) :
                null,
                staticCss && !shouldUseFiles && React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: staticCss
                    }
                }),
                React.createElement("style", {
                    dangerouslySetInnerHTML: {
                        __html: css
                    }
                }),
                shouldUseFiles && this.state.linksLoaded ? React.createElement(Component, __assign({}, this.props)) : null, !shouldUseFiles && React.createElement(Component, __assign({}, this.props))));
        };
        return WithStyles;
    }(React.Component));
};
//# sourceMappingURL=withStyles.js.map