import {
    window,
    utils,
    isSiteMode,
    isSEOMode,
    GALLERY_CONSTS,
} from 'pro-gallery-lib';

function shouldChangeActiveElement() {
    return (isSiteMode() || isSEOMode()) && !utils.isMobile() && window.document;
}
export function onAnchorFocus(_a) {
    var itemContainer = _a.itemContainer,
        enableExperimentalFeatures = _a.enableExperimentalFeatures,
        itemAnchor = _a.itemAnchor;
    if (shouldChangeActiveElement() && enableExperimentalFeatures) {
        /* Relevant only for Screen-Reader cases:
             When we navigate on the accessibility tree, screen readers stops and focuses on the <a> tag,
             so it will not go deeper to the item-container keyDown event */
        var activeElement = window.document.activeElement;
        if (activeElement === itemAnchor) {
            itemContainer.focus();
        }
    }
}

function isThisGalleryElementInFocus(className, galleryId) {
    var activeElement = window.document.activeElement;
    return (String(activeElement.className).includes(className) &&
        !!window.document.querySelector("#pro-gallery-" + galleryId + " #" + String(activeElement.id)));
}
export function changeActiveElementIfNeeded(_a) {
    var prevProps = _a.prevProps,
        currentProps = _a.currentProps,
        itemContainer = _a.itemContainer;
    try {
        if (shouldChangeActiveElement() &&
            window.document.activeElement.className) {
            var isGalleryItemInFocus = isThisGalleryElementInFocus('gallery-item-container', currentProps.galleryId);
            var isShowMoreInFocus = isThisGalleryElementInFocus('show-more', currentProps.galleryId);
            if (isGalleryItemInFocus || isShowMoreInFocus) {
                if (currentProps.thumbnailHighlightId !==
                    prevProps.thumbnailHighlightId &&
                    currentProps.thumbnailHighlightId === currentProps.id) {
                    // if the highlighted thumbnail changed and it is the same as this itemview's
                    itemContainer.focus();
                } else if (currentProps.activeIndex !== prevProps.activeIndex &&
                    currentProps.activeIndex === currentProps.idx) {
                    //check if activeIndex has changed to the current item
                    itemContainer.focus();
                }
            }
        }
    } catch (e) {
        console.error('Could not set focus to active element', e);
    }
}
export function shouldCreateVideoPlaceholder(options) {
    return (options.enableVideoPlaceholder &&
        (!utils.isSingleItemHorizontalDisplay(options) ||
            options.videoPlay !== GALLERY_CONSTS.videoPlay.AUTO));
}
export function extractTextItemContent(html) {
    var span = document.createElement('span');
    span.innerHTML = html;
    var content = span.innerText;
    return content === null || content === void 0 ? void 0 : content.trim();
}
//# sourceMappingURL=itemHelper.js.map