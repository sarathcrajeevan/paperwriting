import {
    __assign,
    __extends,
    __rest
} from "tslib";
/* eslint-disable prettier/prettier */
import React from 'react';
import {
    GALLERY_CONSTS,
    utils
} from 'pro-gallery-lib';
import ImageRenderer from './imageRenderer';
var ImageItem = /** @class */ (function(_super) {
    __extends(ImageItem, _super);

    function ImageItem(props) {
        var _this = _super.call(this, props) || this;
        _this.getImageContainer = _this.getImageContainer.bind(_this);
        _this.getImageContainerClassNames =
            _this.getImageContainerClassNames.bind(_this);
        _this.getImageElement = _this.getImageElement.bind(_this);
        _this.state = {
            isHighResImageLoaded: false,
        };
        _this.handleHighResImageLoad = _this.handleHighResImageLoad.bind(_this);
        return _this;
    }
    ImageItem.prototype.componentDidMount = function() {
        try {
            if (typeof this.props.actions.setItemLoaded === 'function') {
                this.props.actions.setItemLoaded();
            }
        } catch (e) {
            console.error(e);
        }
    };
    ImageItem.prototype.handleHighResImageLoad = function() {
        this.setState({
            isHighResImageLoaded: true
        });
        try {
            this.props.actions.setItemLoaded();
        } catch (e) {
            console.error('Failed to load high res image', e);
        }
    };
    ImageItem.prototype.getImageContainerClassNames = function() {
        var _a = this.props,
            options = _a.options,
            isTransparent = _a.isTransparent;
        var isHighResImageLoaded = this.state.isHighResImageLoaded;
        var imageContainerClassNames = [
            'gallery-item-content',
            'image-item',
            'gallery-item-visible',
            'gallery-item',
            'gallery-item-preloaded',
            options.cubeImages && options.cubeType === 'fit' ?
            'grid-fit' :
            '',
            options.imageLoadingMode === GALLERY_CONSTS.loadingMode.COLOR && !isTransparent ?
            "load-with-color " + (isHighResImageLoaded ? 'image-loaded' : '') :
            '',
        ].join(' ');
        return imageContainerClassNames;
    };
    ImageItem.prototype.getImageContainer = function(imageRenderer, classNames, extraNodes) {
        var _a = this.props,
            imageDimensions = _a.imageDimensions,
            id = _a.id,
            actions = _a.actions;
        return (React.createElement("div", {
                className: classNames,
                onTouchStart: actions.handleItemMouseDown,
                onTouchEnd: actions.handleItemMouseUp,
                key: 'image_container-' + id,
                "data-hook": 'image-item',
                style: imageDimensions
            },
            imageRenderer(),
            extraNodes));
    };
    ImageItem.prototype.getImageAnimationOverlay = function() {
        var _a = this.props,
            imageDimensions = _a.imageDimensions,
            options = _a.options,
            createUrl = _a.createUrl,
            id = _a.id;
        var imageAnimationUrl = null;
        switch (options.scrollAnimation) {
            case GALLERY_CONSTS.scrollAnimations.BLUR:
                imageAnimationUrl = createUrl(GALLERY_CONSTS.urlSizes.RESIZED, GALLERY_CONSTS.urlTypes.LOW_RES);
                break;
            case GALLERY_CONSTS.scrollAnimations.MAIN_COLOR:
                imageAnimationUrl = createUrl(GALLERY_CONSTS.urlSizes.PIXEL, GALLERY_CONSTS.urlTypes.HIGH_RES);
                break;
        }
        return (imageAnimationUrl && (React.createElement("div", {
            key: 'image_container-overlay-' + id,
            "data-hook": 'image-item-overlay',
            style: __assign(__assign({}, imageDimensions), {
                backgroundImage: "url(" + imageAnimationUrl + ")",
                backgroundSize: 'cover',
                pointerEvents: 'none',
                position: 'absolute',
                top: 0,
                left: 0
            })
        })));
    };
    ImageItem.prototype.getImageElement = function() {
        var _this = this;
        var _a = this.props,
            calculatedAlt = _a.calculatedAlt,
            imageDimensions = _a.imageDimensions,
            createUrl = _a.createUrl,
            id = _a.id,
            idx = _a.idx,
            _b = _a.settings,
            settings = _b === void 0 ? {} : _b,
            options = _a.options,
            gotFirstScrollEvent = _a.gotFirstScrollEvent,
            isTransparent = _a.isTransparent;
        var isHighResImageLoaded = this.state.isHighResImageLoaded;
        var imageProps = settings &&
            settings.imageProps &&
            typeof settings.imageProps === 'function' ?
            settings.imageProps(id) :
            {};
        // eslint-disable-next-line no-unused-vars
        var marginLeft = imageDimensions.marginLeft,
            marginTop = imageDimensions.marginTop,
            imageSizing = __rest(imageDimensions, ["marginLeft", "marginTop"]);
        var image = function() {
            var imagesComponents = [];
            var blockDownloadStyles = utils.isMobile() && !_this.props.options.allowContextMenu ?
                {
                    '-webkit-user-select': 'none',
                    '-webkit-touch-callout': 'none',
                } :
                {};
            var preloadStyles = _this.props.isPrerenderMode ?
                {
                    width: '100%',
                    height: '100%',
                } :
                {};
            if (!isHighResImageLoaded && gotFirstScrollEvent && !isTransparent) {
                var preload = null;
                var preloadProps = __assign({
                    className: 'gallery-item-visible gallery-item gallery-item-preloaded',
                    key: 'gallery-item-image-img-preload',
                    'data-hook': 'gallery-item-image-img-preload',
                    loading: 'eager'
                }, imageProps);
                switch (options.imageLoadingMode) {
                    case GALLERY_CONSTS.loadingMode.BLUR:
                        preload = (React.createElement(ImageRenderer, __assign({
                            alt: "",
                            key: 'image_preload_blur-' + id,
                            src: createUrl(GALLERY_CONSTS.urlSizes.RESIZED, GALLERY_CONSTS.urlTypes.LOW_RES),
                            style: __assign(__assign(__assign({}, imageSizing), preloadStyles), blockDownloadStyles)
                        }, preloadProps)));
                        break;
                    case GALLERY_CONSTS.loadingMode.MAIN_COLOR:
                        preload = (React.createElement(ImageRenderer, __assign({
                            alt: "",
                            key: 'image_preload_main_color-' + id,
                            src: createUrl(GALLERY_CONSTS.urlSizes.PIXEL, GALLERY_CONSTS.urlTypes.HIGH_RES),
                            style: __assign(__assign(__assign({}, imageSizing), preloadStyles), blockDownloadStyles)
                        }, preloadProps)));
                        break;
                }
                imagesComponents.push(preload);
            }
            var shouldRenderHighResImages = !_this.props.isPrerenderMode;
            var src = createUrl(GALLERY_CONSTS.urlSizes.MULTI, GALLERY_CONSTS.urlTypes.HIGH_RES);
            var highres = (React.createElement(ImageRenderer, __assign({
                key: 'image_highres-' + id,
                className: "gallery-item-visible gallery-item gallery-item-preloaded",
                "data-hook": "gallery-item-image-img",
                "data-idx": idx,
                src: src,
                alt: calculatedAlt ? calculatedAlt : 'untitled image',
                onLoad: _this.handleHighResImageLoad,
                style: __assign(__assign(__assign({}, imageSizing), blockDownloadStyles), (!shouldRenderHighResImages && preloadStyles))
            }, imageProps)));
            imagesComponents.push(highres);
            return imagesComponents;
        };
        return image;
    };
    ImageItem.prototype.render = function() {
        var imageRenderer = this.getImageElement();
        var imageContainerClassNames = this.getImageContainerClassNames() + " " + (this.props.extraClasses || '');
        var animationOverlay = this.props.overlay || this.getImageAnimationOverlay();
        var renderedItem = this.getImageContainer(imageRenderer, imageContainerClassNames, animationOverlay);
        return renderedItem;
    };
    return ImageItem;
}(React.Component));
/* eslint-enable prettier/prettier */
export default ImageItem;
//# sourceMappingURL=imageItem.js.map