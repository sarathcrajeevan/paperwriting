import {
    __assign,
    __awaiter,
    __extends,
    __generator
} from "tslib";
/* eslint-disable prettier/prettier */
import React from 'react';
import {
    utils,
    isEditMode
} from 'pro-gallery-lib';
import {
    shouldCreateVideoPlaceholder
} from '../itemHelper';
import PlayBackground from '../../svgs/components/play_background';
import PlayTriangle from '../../svgs/components/play_triangle';
import VideoItemPlaceholder from './videoItemPlaceholder';
var videoPlayButton = (React.createElement("div", null,
    React.createElement("i", {
            key: "play-triangle",
            "data-hook": "play-triangle",
            className: 'gallery-item-video-play-triangle play-triangle '
        },
        React.createElement(PlayTriangle, null)),
    React.createElement("i", {
            key: "play-bg",
            "data-hook": "play-background",
            className: 'gallery-item-video-play-background play-background '
        },
        React.createElement(PlayBackground, null))));
var VideoItemWrapper = /** @class */ (function(_super) {
    __extends(VideoItemWrapper, _super);

    function VideoItemWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.mightPlayVideo = _this.mightPlayVideo.bind(_this);
        _this.createVideoPlaceholder =
            _this.createVideoPlaceholder.bind(_this);
        _this.state = {
            VideoItemLoaded: false
        };
        return _this;
    }
    VideoItemWrapper.prototype.mightPlayVideo = function() {
        var _a = this.props.options,
            videoPlay = _a.videoPlay,
            itemClick = _a.itemClick;
        var hasLink = this.props.hasLink;
        if (this.props.isVideoPlaceholder) {
            return false;
        }
        if (videoPlay === 'hover' || videoPlay === 'auto') {
            return true;
        } else if (itemClick === 'nothing') {
            return true;
        } else if (itemClick === 'link' && !hasLink) {
            return true;
        }
        // }
        return false;
    };
    VideoItemWrapper.prototype.createVideoPlaceholder = function(showVideoPlayButton) {
        var props = utils.pick(this.props, [
            'alt',
            'title',
            'description',
            'id',
            'idx',
            'options',
            'createUrl',
            'settings',
            'actions',
        ]);
        return (React.createElement(VideoItemPlaceholder, __assign({}, props, {
            key: "videoPlaceholder",
            imageDimensions: this.props.imageDimensions,
            isThumbnail: !!this.props.thumbnailHighlightId,
            id: this.props.idx,
            videoPlayButton: showVideoPlayButton && !this.mightPlayVideo() && videoPlayButton
        })));
    };
    VideoItemWrapper.prototype.componentDidMount = function() {
        return __awaiter(this, void 0, void 0, function() {
            var VideoItem, e_1;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!!isEditMode()) return [3 /*break*/ , 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/ ,
                            import (
                                /* webpackChunkName: "proGallery_videoItem" */
                                './videoItem')
                        ];
                    case 2:
                        VideoItem = _a.sent();
                        this.VideoItem = VideoItem.default;
                        if (this.mightPlayVideo()) {
                            this.setState({
                                VideoItemLoaded: true
                            });
                        }
                        return [3 /*break*/ , 4];
                    case 3:
                        e_1 = _a.sent();
                        console.error('Failed to fetch VideoItem');
                        return [3 /*break*/ , 4];
                    case 4:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    VideoItemWrapper.prototype.render = function() {
        var hover = this.props.hover;
        var showVideoPlayButton = !this.props.hidePlay && this.props.options.showVideoPlayButton;
        var videoPlaceholder = this.createVideoPlaceholder(showVideoPlayButton);
        var VideoItem = this.VideoItem;
        if (!this.mightPlayVideo() || !VideoItem) {
            return (React.createElement("div", null,
                shouldCreateVideoPlaceholder(this.props.options) && videoPlaceholder,
                hover));
        }
        return (React.createElement(VideoItem, __assign({}, this.props, {
            videoPlaceholder: videoPlaceholder,
            videoPlayButton: showVideoPlayButton && videoPlayButton
        })));
    };
    return VideoItemWrapper;
}(React.Component));
export default VideoItemWrapper;
/* eslint-enable prettier/prettier */
//# sourceMappingURL=videoItemWrapper.js.map