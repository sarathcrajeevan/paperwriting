import {
    __assign
} from "tslib";
import {
    GALLERY_CONSTS,
    utils
} from 'pro-gallery-lib';
export function getContainerStyle(options) {
    return __assign({}, ((options.imageInfoType ===
        GALLERY_CONSTS.infoType.ATTACHED_BACKGROUND ||
        GALLERY_CONSTS.hasHoverPlacement(options.titlePlacement)) && __assign(__assign({}, getBorderStyle(options.itemBorderRadius, options.itemBorderWidth, options.itemBorderColor)), boxShadow(options))));
}

function boxShadow(options) {
    var _boxShadow = {};
    if (options.itemEnableShadow) {
        var itemShadowBlur = options.itemShadowBlur,
            itemShadowDirection = options.itemShadowDirection,
            itemShadowSize = options.itemShadowSize;
        var alpha = ((-1 * (Number(itemShadowDirection) - 90)) / 360) * 2 * Math.PI;
        var shadowX = Math.round(itemShadowSize * Math.cos(alpha));
        var shadowY = Math.round(-1 * itemShadowSize * Math.sin(alpha));
        _boxShadow = {
            boxShadow: shadowX + "px " + shadowY + "px " + itemShadowBlur + "px " + utils.formatColor(options.itemShadowOpacityAndColor),
        };
    }
    return _boxShadow;
}
export function getImageStyle(options) {
    return __assign({}, (!GALLERY_CONSTS.hasHoverPlacement(options.titlePlacement) &&
        (options.imageInfoType === GALLERY_CONSTS.infoType.NO_BACKGROUND ||
            options.imageInfoType ===
            GALLERY_CONSTS.infoType.SEPARATED_BACKGROUND) && __assign({}, getBorderStyle(options.itemBorderRadius, options.itemBorderWidth, options.itemBorderColor))));
}

function getBorderStyle(borderRadius, borderWidth, borderColor) {
    return __assign(__assign({
        overflow: 'hidden'
    }, (borderRadius > 0 && {
        borderRadius: borderRadius
    })), (borderWidth > 0 && {
        borderWidth: borderWidth + 'px',
        borderColor: utils.formatColor(borderColor),
        borderStyle: 'solid',
    }));
}
export function getOuterInfoStyle(placement, options, mediaHeight, textBoxHeight) {
    var styles = __assign(__assign({}, (GALLERY_CONSTS.hasExternalHorizontalPlacement(placement) && {
        height: mediaHeight,
        float: GALLERY_CONSTS.isExternalRightPlacement(placement) ?
            'right' :
            'left',
    })), (GALLERY_CONSTS.hasExternalVerticalPlacement(placement) && {
        height: textBoxHeight,
        boxSizing: 'content-box',
    }));
    if (options.imageInfoType === GALLERY_CONSTS.infoType.SEPARATED_BACKGROUND) {
        return __assign(__assign(__assign(__assign({}, styles), getBorderStyle(options.textBoxBorderRadius, options.textBoxBorderWidth, options.textBoxBorderColor)), (GALLERY_CONSTS.hasExternalAbovePlacement(placement) && {
            marginBottom: options.textImageSpace,
        })), (GALLERY_CONSTS.hasExternalBelowPlacement(placement) && {
            marginTop: options.textImageSpace,
        }));
    }
    return styles;
}

function getInnerInfoStylesAboveOrBelow(options, infoHeight) {
    return {
        width: '100%',
        height: infoHeight,
    };
}

function getInnerInfoStylesRightOrLeft(options, infoWidth) {
    return {
        height: '100%',
        width: infoWidth,
    };
}
export function getInnerInfoStyle(placement, options, infoHeight, infoWidth) {
    var commonStyles = __assign(__assign({}, ((options.imageInfoType ===
            GALLERY_CONSTS.infoType.SEPARATED_BACKGROUND ||
            options.imageInfoType === GALLERY_CONSTS.infoType.ATTACHED_BACKGROUND) &&
        options.textBoxFillColor &&
        options.textBoxFillColor.value && {
            backgroundColor: options.textBoxFillColor.value,
        })), {
        overflow: 'hidden',
        boxSizing: 'border-box'
    });
    var infoAboveOrBelow = GALLERY_CONSTS.hasExternalVerticalPlacement(placement);
    var infoRightOrLeft = GALLERY_CONSTS.hasExternalHorizontalPlacement(placement);
    return __assign(__assign(__assign({}, commonStyles), (infoAboveOrBelow &&
        getInnerInfoStylesAboveOrBelow(options, infoHeight))), (infoRightOrLeft && getInnerInfoStylesRightOrLeft(options, infoWidth)));
}
//# sourceMappingURL=itemViewStyleProvider.js.map