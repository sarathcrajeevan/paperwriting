import {
    __assign,
    __extends
} from "tslib";
import React, {
    Component
} from 'react';
import {
    GALLERY_CONSTS
} from 'pro-gallery-lib';
import ImageRenderer from '../item/imageRenderer';

function withMagnified(WrappedComponent) {
    return /** @class */ (function(_super) {
        __extends(class_1, _super);

        function class_1(props) {
            var _this = _super.call(this, props) || this;
            _this.onMouseMove = _this.onMouseMove.bind(_this);
            _this.onMouseDown = _this.onMouseDown.bind(_this);
            _this.onMouseUp = _this.onMouseUp.bind(_this);
            _this.isMagnifiedBiggerThanContainer =
                _this.isMagnifiedBiggerThanContainer.bind(_this);
            _this.toggleMagnify = _this.toggleMagnify.bind(_this);
            _this.getMagnifyInitialPos = _this.getMagnifyInitialPos.bind(_this);
            _this.getBoundrys = _this.getBoundrys.bind(_this);
            _this.getMagnifiedDimensions = _this.getMagnifiedDimensions.bind(_this);
            _this.containerRef = null;
            _this.state = {
                shouldMagnify: false,
                x: 0,
                y: 0,
            };
            return _this;
        }
        class_1.prototype.onDragStart = function(e) {
            e.preventDefault();
        };
        class_1.prototype.onMouseMove = function(e) {
            if (this.dragStarted) {
                var _a = this.getMagnifiedDimensions(),
                    magnifiedWidth = _a.magnifiedWidth,
                    magnifiedHeight = _a.magnifiedHeight;
                this.isDragging = true;
                var _b = this.props.style,
                    cubedWidth = _b.cubedWidth,
                    cubedHeight = _b.cubedHeight;
                var clientY = e.clientY,
                    clientX = e.clientX;
                var _c = this.getBoundrys(),
                    boundryY = _c.boundryY,
                    boundryX = _c.boundryX;
                this.setState({
                    x: Math.max(-boundryX, Math.min(this.dragStartX - clientX, magnifiedWidth - cubedWidth)),
                    y: Math.max(-boundryY, Math.min(this.dragStartY - clientY, magnifiedHeight - cubedHeight)),
                });
            }
        };
        class_1.prototype.onMouseDown = function(e) {
            var clientX = e.clientX,
                clientY = e.clientY;
            var _a = this.state,
                x = _a.x,
                y = _a.y,
                shouldMagnify = _a.shouldMagnify;
            if (!shouldMagnify) {
                this.setState(this.getMagnifyInitialPos(e));
            } else {
                this.dragStartX = x + clientX;
                this.dragStartY = y + clientY;
                this.dragStarted = true;
            }
        };
        class_1.prototype.onMouseUp = function() {
            if (!this.isDragging) {
                this.toggleMagnify();
            }
            this.dragStarted = false;
            this.isDragging = false;
        };
        class_1.prototype.toggleMagnify = function(bool) {
            var shouldMagnify = this.state.shouldMagnify;
            if (typeof bool === 'boolean') {
                this.setState({
                    shouldMagnify: bool
                });
            } else {
                this.setState({
                    shouldMagnify: !shouldMagnify
                });
            }
        };
        class_1.prototype.getMagnifiedDimensions = function() {
            var _a = this.props,
                _b = _a.style,
                innerHeight = _b.innerHeight,
                innerWidth = _b.innerWidth,
                behaviourParams = _a.options.behaviourParams;
            var magnificationValue = behaviourParams.item.content.magnificationValue;
            return {
                magnifiedHeight: innerHeight * magnificationValue,
                magnifiedWidth: innerWidth * magnificationValue,
            };
        };
        class_1.prototype.getPreloadImage = function() {
            var _a = this.props,
                createUrl = _a.createUrl,
                id = _a.id,
                style = _a.style,
                imageDimensions = _a.imageDimensions,
                options = _a.options;
            var innerWidth = style.innerWidth,
                innerHeight = style.innerHeight;
            var marginTop = imageDimensions.marginTop,
                marginLeft = imageDimensions.marginLeft;
            var _b = this.state,
                shouldMagnify = _b.shouldMagnify,
                x = _b.x,
                y = _b.y;
            var magnificationValue = options.behaviourParams.item.content.magnificationValue;
            var src = createUrl(GALLERY_CONSTS.urlSizes.RESIZED, GALLERY_CONSTS.urlTypes.HIGH_RES);
            var scale = shouldMagnify ? magnificationValue : 1;
            return (React.createElement(ImageRenderer, {
                alt: "",
                key: 'magnified-item-preload-' + id,
                className: "magnified-item-preload",
                src: src,
                style: {
                    width: innerWidth,
                    height: innerHeight,
                    position: 'relative',
                    zIndex: 1,
                    opacity: shouldMagnify ? 1 : 0,
                    transform: "scale(" + scale + ")",
                    transformOrigin: (x + marginLeft) / (magnificationValue - 1) + "px " + (y + marginTop) / (magnificationValue - 1) + "px",
                    transition: "transform 0.3s ease" + (shouldMagnify ? '' : ', opacity 0.1s ease 0.3s'),
                }
            }));
        };
        class_1.prototype.getHighResImage = function() {
            var _a = this.props,
                createMagnifiedUrl = _a.createMagnifiedUrl,
                id = _a.id,
                alt = _a.alt,
                options = _a.options;
            var _b = this.getMagnifiedDimensions(),
                magnifiedWidth = _b.magnifiedWidth,
                magnifiedHeight = _b.magnifiedHeight;
            var src = createMagnifiedUrl(options.behaviourParams.item.content.magnificationValue);
            return (React.createElement(ImageRenderer, {
                key: "magnified-item-" + id,
                className: "magnified-item",
                "data-hook": "magnified-item",
                src: src,
                alt: alt ? alt : 'untitled image',
                id: id,
                style: {
                    width: magnifiedWidth,
                    height: magnifiedHeight,
                    position: 'absolute',
                }
            }));
        };
        class_1.prototype.isMagnifiedBiggerThanContainer = function(itemStyle) {
            var _a = this.getMagnifiedDimensions(),
                magnifiedWidth = _a.magnifiedWidth,
                magnifiedHeight = _a.magnifiedHeight;
            var cubedWidth = itemStyle.cubedWidth,
                cubedHeight = itemStyle.cubedHeight;
            return cubedWidth < magnifiedWidth || cubedHeight < magnifiedHeight;
        };
        class_1.prototype.getMagnifyInitialPos = function(e) {
            var clientX = e.clientX,
                clientY = e.clientY;
            var style = this.props.style;
            var _a = this.getMagnifiedDimensions(),
                magnifiedWidth = _a.magnifiedWidth,
                magnifiedHeight = _a.magnifiedHeight;
            var cubedWidth = style.cubedWidth,
                cubedHeight = style.cubedHeight;
            var _b = this.containerRef.getBoundingClientRect(),
                top = _b.top,
                left = _b.left;
            var x = ((clientX - left) / cubedWidth) * magnifiedWidth - (clientX - left);
            var y = ((clientY - top) / cubedHeight) * magnifiedHeight - (clientY - top);
            var _c = this.getBoundrys(),
                boundryY = _c.boundryY,
                boundryX = _c.boundryX;
            return {
                x: Math.max(-boundryX, Math.min(x, magnifiedWidth - cubedWidth)),
                y: Math.max(-boundryY, Math.min(y, magnifiedHeight - cubedHeight)),
            };
        };
        class_1.prototype.getBoundrys = function() {
            var style = this.props.style;
            var _a = this.getMagnifiedDimensions(),
                magnifiedWidth = _a.magnifiedWidth,
                magnifiedHeight = _a.magnifiedHeight;
            var cubedWidth = style.cubedWidth,
                cubedHeight = style.cubedHeight;
            var boundryY = magnifiedHeight < cubedHeight ?
                cubedHeight / 2 - magnifiedHeight / 2 :
                0;
            var boundryX = magnifiedWidth < cubedWidth ? cubedWidth / 2 - magnifiedWidth / 2 : 0;
            return {
                boundryY: boundryY,
                boundryX: boundryX,
            };
        };
        class_1.prototype.getContainerStyle = function() {
            var shouldMagnify = this.state.shouldMagnify;
            var style = this.props.style;
            var cubedWidth = style.cubedWidth,
                cubedHeight = style.cubedHeight;
            return {
                width: cubedWidth,
                height: cubedHeight,
                position: 'relative',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                cursor: shouldMagnify ? 'zoom-out' : 'zoom-in',
            };
        };
        class_1.prototype.getMagnifiedImageStyle = function() {
            var _a = this.state,
                shouldMagnify = _a.shouldMagnify,
                x = _a.x,
                y = _a.y;
            return {
                zIndex: 2,
                position: 'absolute',
                top: 0,
                left: 0,
                transform: "translate(" + -x + "px, " + -y + "px)",
                opacity: shouldMagnify ? 1 : 0,
                transition: 'opacity 0.1s ease',
                transitionDelay: shouldMagnify ? '0.3s' : 'none',
            };
        };
        class_1.prototype.render = function() {
            var _this = this;
            var shouldMagnify = this.state.shouldMagnify;
            var itemClick = this.props.options.itemClick;
            if (itemClick !== GALLERY_CONSTS.itemClick.MAGNIFY) {
                return React.createElement(WrappedComponent, __assign({}, this.props));
            }
            return (React.createElement("div", {
                    ref: function(ref) {
                        return (_this.containerRef = ref);
                    },
                    className: 'magnified-item-container',
                    style: this.getContainerStyle(),
                    onDragStart: this.onDragStart,
                    onMouseMove: this.onMouseMove,
                    onMouseDown: this.onMouseDown,
                    onMouseUp: this.onMouseUp
                },
                React.createElement(WrappedComponent, __assign({}, this.props)),
                this.getPreloadImage(),
                React.createElement("div", {
                    className: 'magnified-images',
                    style: this.getMagnifiedImageStyle()
                }, shouldMagnify && this.getHighResImage())));
        };
        return class_1;
    }(Component));
}
export default withMagnified;
//# sourceMappingURL=withMagnified.js.map