import React from 'react';
import {
    utils,
    GALLERY_CONSTS
} from 'pro-gallery-lib';
var ARROWS_BASE_SIZE = {
    width: 23,
    height: 39,
};
var getArrowsSizeData = function(customNavArrowsRenderer, arrowsSize) {
    if (customNavArrowsRenderer) {
        return {
            navArrowsContainerWidth: arrowsSize,
            navArrowsContainerHeight: arrowsSize,
        };
    }
    var scalePercentage = arrowsSize / ARROWS_BASE_SIZE.width;
    var navArrowsContainerWidth = arrowsSize; // === ARROWS_BASE_SIZE.width * scalePercentage
    var navArrowsContainerHeight = ARROWS_BASE_SIZE.height * scalePercentage;
    return {
        navArrowsContainerWidth: navArrowsContainerWidth,
        navArrowsContainerHeight: navArrowsContainerHeight,
        scalePercentage: scalePercentage,
    };
};
export var getArrowsRenderData = function(arrowsDataRelevantArgs) {
    var customNavArrowsRenderer = arrowsDataRelevantArgs.customNavArrowsRenderer,
        arrowsColor = arrowsDataRelevantArgs.arrowsColor,
        arrowsSize = arrowsDataRelevantArgs.arrowsSize;
    var _a = getArrowsSizeData(customNavArrowsRenderer, arrowsSize),
        navArrowsContainerWidth = _a.navArrowsContainerWidth,
        navArrowsContainerHeight = _a.navArrowsContainerHeight,
        scalePercentage = _a.scalePercentage;
    if (customNavArrowsRenderer) {
        return {
            arrowRenderer: customNavArrowsRenderer,
            navArrowsContainerWidth: navArrowsContainerWidth,
            navArrowsContainerHeight: navArrowsContainerHeight,
        };
    }
    var svgStyle = {
        transform: "scale(" + scalePercentage + ")"
    };
    var svgInternalStyle = utils.isMobile() && (arrowsColor === null || arrowsColor === void 0 ? void 0 : arrowsColor.value) ? {
        fill: arrowsColor.value
    } : {};
    var arrowRenderer = function(position) {
        var _a = position === 'right' ?
            {
                d: 'M857.005,231.479L858.5,230l18.124,18-18.127,18-1.49-1.48L873.638,248Z',
                transform: 'translate(-855 -230)',
            } :
            {
                d: 'M154.994,259.522L153.477,261l-18.471-18,18.473-18,1.519,1.48L138.044,243Z',
                transform: 'translate(-133 -225)',
            },
            d = _a.d,
            transform = _a.transform;
        return (React.createElement("svg", {
                width: ARROWS_BASE_SIZE.width,
                height: ARROWS_BASE_SIZE.height,
                viewBox: "0 0 " + ARROWS_BASE_SIZE.width + " " + ARROWS_BASE_SIZE.height,
                style: svgStyle
            },
            React.createElement("path", {
                className: "slideshow-arrow",
                style: svgInternalStyle,
                d: d,
                transform: transform
            })));
    };
    return {
        arrowRenderer: arrowRenderer,
        navArrowsContainerWidth: navArrowsContainerWidth,
        navArrowsContainerHeight: navArrowsContainerHeight
    };
};
// Function that checks if the nav arrows parent-container is large enough for them
var arrowsWillFitPosition = function(arrowsWillFitPositionRelevantArgs) {
    var _a = arrowsWillFitPositionRelevantArgs.options,
        slideshowInfoSize = _a.slideshowInfoSize,
        arrowsVerticalPosition = _a.arrowsVerticalPosition,
        textBoxHeight = _a.textBoxHeight,
        arrowsSize = _a.arrowsSize;
    var isSlideshow = GALLERY_CONSTS.isLayout('SLIDESHOW')(arrowsWillFitPositionRelevantArgs.options);
    var height = arrowsWillFitPositionRelevantArgs.container.height;
    var customNavArrowsRenderer = arrowsWillFitPositionRelevantArgs.customNavArrowsRenderer;
    // Calc of Nav arrows container's height
    var navArrowsContainerHeight = getArrowsSizeData(customNavArrowsRenderer, arrowsSize).navArrowsContainerHeight;
    var infoHeight = isSlideshow ? slideshowInfoSize : textBoxHeight;
    var parentHeightByVerticalPosition = {
        INFO_CENTER: infoHeight,
        IMAGE_CENTER: height - infoHeight,
        ITEM_CENTER: height,
    };
    var parentHeight = parentHeightByVerticalPosition[arrowsVerticalPosition];
    return parentHeight >= navArrowsContainerHeight;
};
// function to Determine whether we should render the navigation arrows
export var shouldRenderNavArrows = function(props) {
    var shouldRenderArrowsRelevantArgs = getShouldRenderArrowsArgs(props);
    var showArrows = shouldRenderArrowsRelevantArgs.options.showArrows;
    var galleryWidth = shouldRenderArrowsRelevantArgs.container.galleryWidth;
    var isPrerenderMode = shouldRenderArrowsRelevantArgs.isPrerenderMode,
        galleryStructure = shouldRenderArrowsRelevantArgs.galleryStructure,
        customNavArrowsRenderer = shouldRenderArrowsRelevantArgs.customNavArrowsRenderer;
    var arrowsWillFitPositionRelevantArgs = {
        options: shouldRenderArrowsRelevantArgs.options,
        container: shouldRenderArrowsRelevantArgs.container,
        customNavArrowsRenderer: customNavArrowsRenderer,
    };
    var isGalleryWiderThanRenderedItems = galleryStructure.width <= galleryWidth;
    return (!!showArrows &&
        !isPrerenderMode &&
        arrowsWillFitPosition(arrowsWillFitPositionRelevantArgs) &&
        !isGalleryWiderThanRenderedItems);
};
var getShouldRenderArrowsArgs = function(props) {
    var isPrerenderMode = props.isPrerenderMode,
        galleryStructure = props.galleryStructure,
        customNavArrowsRenderer = props.customNavArrowsRenderer;
    return {
        options: props.options,
        container: props.container,
        isPrerenderMode: isPrerenderMode,
        galleryStructure: galleryStructure,
        customNavArrowsRenderer: customNavArrowsRenderer,
    };
};
//# sourceMappingURL=navigationArrowUtils.js.map