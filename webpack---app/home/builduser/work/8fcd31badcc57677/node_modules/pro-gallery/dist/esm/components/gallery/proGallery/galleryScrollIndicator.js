import {
    __extends
} from "tslib";
import React from 'react';
import {
    utils,
    GALLERY_CONSTS
} from 'pro-gallery-lib';
import {
    cssScrollHelper
} from '../../helpers/cssScrollHelper';
var ScrollIndicator = /** @class */ (function(_super) {
    __extends(ScrollIndicator, _super);

    function ScrollIndicator(props) {
        var _this = _super.call(this) || this;
        _this.state = {
            scrollTop: 0,
            scrollLeft: 0,
        };
        _this.debouncedOnScroll = utils.debounce(props.onScroll, 50);
        return _this;
    }
    ScrollIndicator.prototype.removeScrollListener = function() {
        if (this.scrollEventListenerSet) {
            var scrollingElement = this.props.scrollingElement;
            try {
                scrollingElement
                    .vertical()
                    .removeEventListener('scroll', this.onVerticalScroll);
            } catch (e) {
                //
            }
            try {
                var scrollDirection = this.props.scrollDirection;
                if (scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
                    scrollingElement
                        .horizontal()
                        .removeEventListener('scroll', this.onHorizontalScroll);
                }
            } catch (e) {
                //
            }
            this.scrollEventListenerSet = false;
        }
    };
    ScrollIndicator.prototype.initScrollListener = function() {
        var _this = this;
        if (this.scrollEventListenerSet) {
            this.removeScrollListener();
        }
        this.scrollEventListenerSet = true;
        var scrollingElement = this.props.scrollingElement;
        //Horizontal Scroll
        this.onHorizontalScrollTransition = function(_a) {
            var detail = _a.detail;
            var step = Math.round(detail);
            if (step >= 0) {
                if (_this.props.scrollDirection ===
                    GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
                    _this.setState({
                        scrollLeft: _this.state.scrollLeft + step,
                    });
                }
            }
        };
        this.onHorizontalScroll = function(e) {
            _this.props.setGotFirstScrollIfNeeded();
            var target = e.currentTarget || e.target || e;
            var left = target && (target.scrollX || target.scrollLeft || target.x);
            if (_this.props.isRTL) {
                left = Math.abs(left); //this.props.totalWidth - left;
            }
            // console.log('[RTL SCROLL] onHorizontalScroll: ', left);
            if (left >= 0) {
                if (_this.props.scrollDirection ===
                    GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
                    _this.setState({
                        scrollTop: left,
                        scrollLeft: left,
                    });
                    _this.props.getMoreItemsIfNeeded(left);
                    _this.debouncedOnScroll({
                        left: left
                    });
                }
            }
        };
        if (this.props.scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
            try {
                scrollingElement
                    .horizontal()
                    .addEventListener('scroll', this.onHorizontalScroll);
                scrollingElement
                    .horizontal()
                    .addEventListener('scrollTransition', this.onHorizontalScrollTransition);
            } catch (e) {
                console.error(e);
            }
        }
        //Vertical Scroll
        this.onVerticalScroll = function(e) {
            _this.props.setGotFirstScrollIfNeeded();
            var target = e.currentTarget || e.target || e;
            var top = target && (target.scrollY || target.scrollTop || target.y);
            // console.log('[RTL SCROLL] onVerticalScroll: ', left);
            if (top >= 0) {
                _this.setState({
                    scrollTop: top,
                });
                if (_this.props.scrollDirection === GALLERY_CONSTS.scrollDirection.VERTICAL) {
                    _this.props.getMoreItemsIfNeeded(top);
                }
                _this.debouncedOnScroll({
                    top: top
                });
            }
        };
        try {
            scrollingElement
                .vertical()
                .addEventListener('scroll', this.onVerticalScroll);
        } catch (e) {
            console.error(e);
        }
    };
    ScrollIndicator.prototype.componentWillUnmount = function() {
        this.removeScrollListener();
    };
    ScrollIndicator.prototype.componentDidMount = function() {
        this.initScrollListener();
    };
    ScrollIndicator.prototype.UNSAFE_componentWillReceiveProps = function(nextProps) {
        var didChange = false;
        for (var _i = 0, _a = [
                'id',
                'scrollDirection',
                'isRTL',
                'totalWidth',
                'scrollBase',
            ]; _i < _a.length; _i++) {
            var prop = _a[_i];
            if (nextProps[prop] !== this.props[prop]) {
                didChange = true;
                break;
            }
        }
        if (didChange) {
            this.initScrollListener();
        }
    };
    ScrollIndicator.prototype.render = function() {
        var verticalScrollBase = this.props.scrollDirection === GALLERY_CONSTS.scrollDirection.VERTICAL &&
            this.props.scrollBase > 0 ?
            this.props.scrollBase :
            0;
        var scrollTopWithoutBase = this.state.scrollTop - verticalScrollBase;
        var id = this.props.id;
        return (React.createElement("div", {
            key: "css-scroll-indicator",
            "data-hook": "css-scroll-indicator",
            "data-scroll-base": verticalScrollBase,
            "data-scroll-top": this.state.scrollTop,
            className: cssScrollHelper.calcScrollClasses(id, scrollTopWithoutBase),
            style: {
                display: 'none'
            }
        }));
    };
    return ScrollIndicator;
}(React.Component));
export default ScrollIndicator;
//# sourceMappingURL=galleryScrollIndicator.js.map