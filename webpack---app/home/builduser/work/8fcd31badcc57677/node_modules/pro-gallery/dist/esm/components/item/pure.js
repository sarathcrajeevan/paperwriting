import {
    __assign
} from "tslib";
export {
    getSlideAnimationStyles,
    getCustomInfoRendererProps,
    getLinkParams
};
import {
    GALLERY_CONSTS,
    utils,
    isSEOMode
} from 'pro-gallery-lib';

function getSlideAnimationStyles(_a) {
    var idx = _a.idx,
        activeIndex = _a.activeIndex,
        options = _a.options,
        container = _a.container;
    var isRTL = options.isRTL,
        slideAnimation = options.slideAnimation;
    var baseStyles = {
        position: 'absolute',
        display: 'block',
    };
    switch (slideAnimation) {
        case GALLERY_CONSTS.slideAnimations.FADE:
            return __assign(__assign({}, baseStyles), {
                transition: "opacity 600ms ease",
                opacity: activeIndex === idx ? 1 : 0
            });
        case GALLERY_CONSTS.slideAnimations.DECK:
            {
                var rtlFix = isRTL ? 1 : -1;
                if (activeIndex < idx) {
                    //the slides behind the deck
                    return __assign(__assign({}, baseStyles), {
                        transition: "opacity .2s ease 600ms",
                        zIndex: -1,
                        opacity: 0
                    });
                } else if (activeIndex === idx) {
                    return __assign(__assign({}, baseStyles), {
                        zIndex: 0,
                        transition: "transform 600ms ease",
                        transform: "translateX(0)"
                    });
                } else if (activeIndex > idx) {
                    return __assign(__assign({}, baseStyles), {
                        zIndex: 1,
                        transition: "transform 600ms ease",
                        transform: "translateX(" + rtlFix * Math.round(container.width) + "px)"
                    });
                }
                break;
            }
        default:
            return {};
    }
}

function getCustomInfoRendererProps(props) {
    return __assign(__assign({}, props), {
        isMobile: utils.isMobile()
    });
}

function getLinkParams(_a) {
    var directLink = _a.directLink,
        options = _a.options,
        directShareLink = _a.directShareLink,
        noFollowForSEO = _a.noFollowForSEO;
    var isSEO = isSEOMode();
    if (options.itemClick === GALLERY_CONSTS.itemClick.LINK) {
        var _b = directLink || {},
            url = _b.url,
            target = _b.target;
        var shouldUseNofollow = isSEO && noFollowForSEO;
        var shouldUseDirectLink = !!(url && target);
        var seoLinkParams = shouldUseNofollow ? {
            rel: 'nofollow'
        } : {};
        var linkParams = shouldUseDirectLink ?
            __assign({
                href: url,
                target: target
            }, seoLinkParams) : {};
        return linkParams;
    } else if (options.itemClick === GALLERY_CONSTS.itemClick.FULLSCREEN ||
        options.itemClick === GALLERY_CONSTS.itemClick.EXPAND) {
        // place share link as the navigation item
        var url = directShareLink;
        var shouldUseDirectShareLink = !!url;
        var shouldUseNofollow = !options.shouldIndexDirectShareLinkInSEO;
        var seoLinkParams = shouldUseNofollow ? {
            rel: 'nofollow'
        } : {};
        var linkParams = shouldUseDirectShareLink ?
            __assign({
                href: url,
                'data-cancel-link': true
            }, seoLinkParams) : {};
        return linkParams;
    }
}
//# sourceMappingURL=pure.js.map