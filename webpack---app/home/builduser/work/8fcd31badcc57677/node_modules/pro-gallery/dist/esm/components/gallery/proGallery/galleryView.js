import {
    __assign,
    __extends
} from "tslib";
/* eslint-disable prettier/prettier */
import React from 'react';
import {
    window,
    utils,
    GALLERY_CONSTS
} from 'pro-gallery-lib';
import GalleryDebugMessage from './galleryDebugMessage';
import itemView from '../../item/itemView.js';
var GalleryView = /** @class */ (function(_super) {
    __extends(GalleryView, _super);

    function GalleryView(props) {
        var _this = _super.call(this, props) || this;
        _this.handleKeys = _this.handleKeys.bind(_this);
        _this.showMoreItems = _this.showMoreItems.bind(_this);
        _this.createGalleryConfig = _this.createGalleryConfig.bind(_this);
        _this.screenLogs = _this.screenLogs.bind(_this);
        _this.createGallery = _this.createGallery.bind(_this);
        _this.id = Date.now() + '|' + Math.floor(Math.random() * 10000);
        _this.state = {
            activeIndex: 0,
        };
        return _this;
    }
    GalleryView.prototype.handleKeys = function(e) {
        var activeItemIdx = window.document.activeElement.getAttribute('data-idx');
        if (activeItemIdx) {
            var findNeighborItem = this.props.actions.findNeighborItem ||
                this.props.galleryStructure.findNeighborItem ||
                (function() {}); //temp change for tests to pass
            var idx = Number(activeItemIdx);
            var newIdx = -1;
            switch (e.keyCode || e.charCode) {
                case 38: //up
                    newIdx = findNeighborItem(idx, 'up');
                    break;
                case 37: //left
                    newIdx = findNeighborItem(idx, this.props.options.isRTL ? 'right' : 'left');
                    break;
                case 40: //down
                    newIdx = findNeighborItem(idx, 'down');
                    if ((this.props.totalItemsCount - 1) === newIdx && newIdx === this.state.activeIndex) {
                        // If we are on the last item in the gallery and we pressed the down arrow
                        // we want to move the focus to the out0fGallery element
                        e.stopPropagation();
                        utils.focusGalleryElement(this.props.outOfViewComponent);
                        return false;
                    }
                    break;
                case 39: //right
                    newIdx = findNeighborItem(idx, this.props.options.isRTL ? 'left' : 'right');
                    break;
                case 27: //esc
                    e.stopPropagation();
                    utils.focusGalleryElement(this.props.galleryContainerRef);
                    return false;
            }
            //if nextIdx is below the lastVisibleItemIdx (higher idx), we will ignore the findNeighborItem answer and stay on the same item
            if (newIdx > this.lastVisibleItemIdx()) {
                newIdx = idx;
            }
            if (newIdx >= 0) {
                e.preventDefault();
                e.stopPropagation();
                utils.setStateAndLog(this, 'Set Gallery Current Item', {
                    activeIndex: newIdx,
                });
                return false;
            }
        }
        return true;
    };
    GalleryView.prototype.lastVisibleItemIdxInHeight = function(height) {
        for (var i = this.props.galleryStructure.items.length - 1; i >= 0; i--) {
            var item = this.props.galleryStructure.items[i];
            var isVisible = item.offset.top < height;
            if (isVisible) {
                return i;
            }
        }
        return this.items.length - 1;
    };
    GalleryView.prototype.lastVisibleItemIdx = function() {
        //the item must be visible and above the show more button
        return this.lastVisibleItemIdxInHeight(this.props.container.galleryHeight - 100);
    };
    GalleryView.prototype.showMoreItems = function() {
        var _this = this;
        var _a;
        if ((_a = this.props.settings) === null || _a === void 0 ? void 0 : _a.isAccessible) {
            // tal - I left this check since we do not want to focus the last item in non-accessibility mode
            //find the last visible item and focus on it
            try {
                var lastItemIdx = this.lastVisibleItemIdx();
                utils.setStateAndLog(this, 'Focus on Last Gallery Item', {
                    activeIndex: lastItemIdx + 1,
                }, function() {
                    _this.props.actions.toggleLoadMoreItems();
                });
            } catch (e) {
                console.warn('Cannot find item to focus', e);
            }
        } else {
            this.props.actions.toggleLoadMoreItems();
        }
    };
    GalleryView.prototype.createGallery = function(showMore) {
        var _a = this.props,
            options = _a.options,
            settings = _a.settings,
            container = _a.container,
            galleryStructure = _a.galleryStructure,
            getVisibleItems = _a.getVisibleItems;
        var galleryConfig = this.createGalleryConfig();
        var showMoreContainerHeight = 138; //according to the scss
        var debugMsg = React.createElement(GalleryDebugMessage, __assign({}, this.props.debug));
        var galleryHeight;
        if (showMore) {
            galleryHeight = container.galleryHeight - showMoreContainerHeight;
        } else {
            galleryHeight = galleryStructure.height + 'px';
        }
        var galleryStructureItems = getVisibleItems(galleryStructure.galleryItems, container);
        var layout = galleryStructureItems.map(function(item, index) {
            return React.createElement(itemView, item.renderProps(__assign(__assign({}, galleryConfig), {
                visible: item.isVisible,
                key: "itemView-" + item.id + "-" + index
            })));
        });
        return (React.createElement("div", {
                id: this.props.galleryContainerId,
                className: 'pro-gallery inline-styles ' +
                    (options.scrollDirection ===
                        GALLERY_CONSTS.scrollDirection.HORIZONTAL ?
                        ' one-row slider hide-scrollbars ' :
                        '') +
                    ((settings === null || settings === void 0 ? void 0 : settings.isAccessible) ? ' accessible ' : '') +
                    (options.isRTL ? ' rtl ' : ' ltr '),
                style: {
                    height: galleryHeight,
                    overflowX: 'hidden',
                },
                onKeyDown: this.handleKeys
            },
            React.createElement("div", {
                    id: "pro-gallery-margin-container",
                    style: {
                        margin: options.layoutParams.gallerySpacing + 'px',
                        height: galleryHeight,
                        width: this.props.container.galleryWidth - options.imageMargin,
                        overflow: 'visible',
                        position: 'relative',
                    }
                },
                debugMsg,
                layout)));
    };
    GalleryView.prototype.createGalleryConfig = function() {
        return {
            scrollingElement: this.props.scrollingElement,
            scroll: this.props.scroll,
            container: this.props.container,
            options: this.props.options,
            settings: this.props.settings,
            activeIndex: this.state.activeIndex,
            customComponents: this.props.customComponents,
            galleryId: this.props.id,
            gotFirstScrollEvent: this.props.gotFirstScrollEvent,
            playingVideoIdx: this.props.playingVideoIdx,
            noFollowForSEO: this.props.noFollowForSEO,
            isPrerenderMode: this.props.isPrerenderMode,
            firstUserInteractionExecuted: this.props.firstUserInteractionExecuted,
            enableExperimentalFeatures: this.props.enableExperimentalFeatures,
            actions: {
                eventsListener: this.props.actions.eventsListener,
            },
        };
    };
    GalleryView.prototype.screenLogs = function() {
        return utils.shouldDebug('screenLogs') ? (React.createElement("div", {
                className: "screen-logs"
            },
            "URL width: ",
            utils.parseGetParam('width'),
            ", Container:",
            ' ',
            JSON.stringify(this.props.container.galleryWidth),
            ", window.document.body.clientWidth ",
            document.body.clientWidth,
            ", window.innerWidth ",
            window.innerWidth,
            ", window.screen.width:",
            ' ',
            window.screen.width)) : ('');
    };
    GalleryView.prototype.createShowMoreButton = function() {
        if (typeof this.props.customComponents.customLoadMoreRenderer === 'function') {
            return (React.createElement("div", {
                onClick: this.showMoreItems
            }, this.props.customComponents.customLoadMoreRenderer(this.props)));
        }
        var options = this.props.options;
        var showMoreButton = false;
        var buttonState = this.props.displayShowMore;
        var shouldShowButton = buttonState &&
            this.props.galleryStructure.height > this.props.container.height;
        if (shouldShowButton) {
            var buttonText = options.loadMoreButtonText || 'Load More';
            showMoreButton = (React.createElement("div", {
                    className: 'show-more-container' +
                        (utils.isMobile() ? ' pro-gallery-mobile-indicator' : '')
                },
                React.createElement("button", {
                    tabIndex: utils.getTabIndex('loadMoreButton'),
                    id: 'show-more-' + this.props.id,
                    className: "show-more",
                    onClick: this.showMoreItems,
                    onMouseDown: function(e) {
                        return e.preventDefault();
                    },
                    "data-hook": "show-more",
                    "aria-label": buttonText
                }, buttonText)));
        }
        return showMoreButton;
    };
    //-----------------------------------------| RENDER |--------------------------------------------//
    GalleryView.prototype.render = function() {
        if (utils.isVerbose()) {
            console.count('galleryView render');
            console.time('Rendering Gallery took ');
            console.log('[DEBUG_RENDER] GalleryView options', this.props.options);
            console.log('[DEBUG_RENDER] GalleryView props changed', utils.printableObjectsDiff(this.lastProps || {}, this.props));
            this.lastProps = __assign({}, this.props);
            console.log('[DEBUG_RENDER] GalleryView state changed', utils.printableObjectsDiff(this.lastState || {}, this.state));
            this.lastState = __assign({}, this.state);
            this.renderCount = (this.renderCount || 0) + 1;
        }
        var showMore = this.createShowMoreButton();
        var gallery = this.createGallery(showMore);
        if (utils.isVerbose()) {
            console.timeEnd('Rendering Gallery took ');
        }
        var screenLogs = this.screenLogs();
        return (React.createElement("div", __assign({
                className: 'pro-gallery-parent-container',
                key: "pro-gallery-" + this.id
            }, utils.getAriaAttributes({
                proGalleryRole: this.props.proGalleryRole,
                proGalleryRegionLabel: this.props.proGalleryRegionLabel
            })),
            screenLogs,
            gallery,
            showMore));
    };
    return GalleryView;
}(React.Component));
export default GalleryView;
/* eslint-enable prettier/prettier */
//# sourceMappingURL=galleryView.js.map