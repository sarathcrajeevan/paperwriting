import {
    __assign,
    __extends
} from "tslib";
/* eslint-disable prettier/prettier */
import React from 'react';
var TextItem = /** @class */ (function(_super) {
    __extends(TextItem, _super);

    function TextItem(props) {
        var _this = _super.call(this, props) || this;
        if (typeof _this.props.actions.setItemLoaded === 'function') {
            _this.props.actions.setItemLoaded();
        }
        return _this;
    }
    TextItem.prototype.getTextDimensions = function() {
        var _a = this.props,
            style = _a.style,
            options = _a.options,
            cropRatio = _a.cropRatio,
            imageDimensions = _a.imageDimensions;
        var isVerticalItem = style.ratio < cropRatio - 0.01;
        var marginLeft = imageDimensions.marginLeft,
            marginTop = imageDimensions.marginTop;
        //text dimensions include scaling
        var textHeight = (isVerticalItem ?
            style.height / style.maxHeight :
            style.width / style.maxWidth) * style.maxHeight;
        var textWidth = (!isVerticalItem ?
            style.width / style.maxWidth :
            style.height / style.maxHeight) * style.maxWidth;
        var translate = options.cubeType === 'fit' ?
            '0, 0' :
            Math.round((style.width - textWidth) / 2) + "px, " + Math.round((style.height - textHeight) / 2) + "px";
        var scale = isVerticalItem ?
            style.height / style.maxHeight :
            style.width / style.maxWidth;
        var transform = "translate(" + translate + ") scale(" + scale + ")";
        var scaledMarginLeft = Math.round(marginLeft / scale);
        var scaledMarginTop = Math.round(marginTop / scale);
        return {
            width: style.maxWidth + 'px',
            height: style.maxHeight + 'px',
            marginLeft: scaledMarginLeft,
            marginTop: scaledMarginTop,
            transformOrigin: -scaledMarginLeft + "px " + -scaledMarginTop + "px",
            WebkitTransform: transform,
            MsTransform: transform,
            OTransform: transform,
            transform: transform,
        };
    };
    TextItem.prototype.processInnerhtml = function(html) {
        // Remove html class name from inner html elements
        // In older version of the text editor we used font themes (set as classes). Without the iframe it clashes with Santa's css
        try {
            return html.replace(/class="font_\d+"/gm, '');
        } catch (e) {
            return html;
        }
    };
    TextItem.prototype.render = function() {
        var _a = this.props,
            id = _a.id,
            options = _a.options,
            html = _a.html,
            style = _a.style,
            actions = _a.actions,
            imageDimensions = _a.imageDimensions;
        var processedHtml = this.processInnerhtml(html);
        var dimensions = this.getTextDimensions();
        var htmlParam = {
            dangerouslySetInnerHTML: {
                __html: processedHtml
            }
        };
        var changeBgColor = {
            style: Object.assign(dimensions, options.cubeType === 'fit' ? {
                backgroundColor: style.bgColor
            } : {}),
        };
        var attributes = __assign(__assign({}, htmlParam), changeBgColor);
        var itemContentStyle = {
            height: imageDimensions && !this.props.isPrerenderMode ?
                imageDimensions.height :
                'inherit',
            backgroundColor: options.cubeType !== 'fit' ? style.bgColor : 'inherit',
        };
        if (imageDimensions && imageDimensions.borderRadius) {
            itemContentStyle.borderRadius = imageDimensions.borderRadius;
        }
        return (React.createElement("div", {
                className: 'gallery-item-content',
                style: itemContentStyle
            },
            React.createElement("div", __assign({
                className: 'gallery-item-visible gallery-item gallery-item-loaded text-item',
                key: 'item-text-' + id,
                onTouchStart: actions.handleItemMouseDown,
                onTouchEnd: actions.handleItemMouseUp,
                "data-hook": "text-item"
            }, attributes))));
    };
    return TextItem;
}(React.Component));
export default TextItem;
/* eslint-enable prettier/prettier */
//# sourceMappingURL=textItem.js.map