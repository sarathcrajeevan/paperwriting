import {
    __awaiter,
    __generator
} from "tslib";
import {
    capitalizeFirstLetters
} from '../utils';
import {
    PageMap,
    STORAGE_PAGINATION_KEY
} from '@wix/wixstores-client-core/dist/es/src/constants';
var NavigationService = /** @class */ (function() {
    function NavigationService(_a) {
        var _this = this;
        var siteStore = _a.siteStore;
        this.getPagePath = function(productName, translations) {
            return __awaiter(_this, void 0, void 0, function() {
                var path, siteStructure, homepage, referringPageId, refferingPage;
                var _this = this;
                return __generator(this, function(_a) {
                    switch (_a.label) {
                        case 0:
                            path = [];
                            return [4 /*yield*/ , this.siteStore.siteApis.getSiteStructure({
                                includePageId: true
                            })];
                        case 1:
                            siteStructure = _a.sent();
                            homepage = siteStructure.pages.find(function(p) {
                                return p.isHomePage;
                            });
                            if (homepage) {
                                path.push(this.toPagePath(homepage, true));
                            }
                            if (this.siteStore.isSSR()) {
                                return [2 /*return*/ , path];
                            }
                            referringPageId = this.navigationContext.pageId;
                            if (referringPageId) {
                                refferingPage = siteStructure.pages.find(function(p) {
                                    var notHomepage = !p.isHomePage;
                                    var notSelf = p.id !== _this.siteStore.siteApis.currentPage.id;
                                    var matchRef = p.id === referringPageId;
                                    return notHomepage && notSelf && matchRef;
                                });
                                if (refferingPage) {
                                    path.push(this.toPagePath(refferingPage, true));
                                }
                            }
                            if (path.length === 0) {
                                return [2 /*return*/ , []];
                            }
                            if (productName) {
                                path.push(this.toPagePath({
                                    name: productName,
                                    url: null,
                                    isHomePage: false,
                                    id: null
                                }, false));
                            }
                            path[0].name = translations.BREADCRUMBS_HOME;
                            path[0].url = this.siteStore.location.baseUrl;
                            return [2 /*return*/ , path];
                    }
                });
            });
        };
        this.siteStore = siteStore;
    }
    NavigationService.prototype.getContextualProductSlugs = function() {
        if (this.siteStore.isEditorMode()) {
            return [];
        }
        return this.navigationContext.paginationMap;
    };
    NavigationService.prototype.navigateToProductPage = function(_a) {
        var urlPart = _a.urlPart;
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
                return [2 /*return*/ , this.siteStore.navigate({
                    sectionId: PageMap.PRODUCT,
                    queryParams: undefined,
                    state: urlPart,
                })];
            });
        });
    };
    NavigationService.prototype.toPagePath = function(page, transformName) {
        return {
            name: transformName ? capitalizeFirstLetters(page.name) : page.name,
            url: page.url && "" + this.siteStore.location.baseUrl + page.url,
            sdkLink: {
                pageId: page.id,
                type: 'PageLink'
            },
        };
    };
    Object.defineProperty(NavigationService.prototype, "navigationContext", {
        get: function() {
            var context;
            try {
                context = JSON.parse(this.siteStore.storage.local.getItem(STORAGE_PAGINATION_KEY));
            } catch (_a) {
                //
            }
            return context !== null && context !== void 0 ? context : {
                pageId: undefined,
                paginationMap: []
            };
        },
        enumerable: false,
        configurable: true
    });
    return NavigationService;
}());
export {
    NavigationService
};
//# sourceMappingURL=NavigationService.js.map