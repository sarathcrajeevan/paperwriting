import i18next from 'i18next';
export function i18n(_ref, _temp) {
    var locale = _ref.locale,
        asyncMessagesLoader = _ref.asyncMessagesLoader,
        messages = _ref.messages,
        _ref$useSuspense = _ref.useSuspense,
        useSuspense = _ref$useSuspense === void 0 ? false : _ref$useSuspense,
        wait = _ref.wait,
        _ref$disableAutoInit = _ref.disableAutoInit,
        disableAutoInit = _ref$disableAutoInit === void 0 ? false : _ref$disableAutoInit,
        bindI18n = _ref.bindI18n;

    var _ref2 = _temp === void 0 ? {
            polyfill: {
                isLoading: false
            }
        } : _temp,
        icu = _ref2.icu,
        polyfill = _ref2.polyfill;

    if (asyncMessagesLoader === undefined && messages === undefined) {
        console.error('[@wix/wix-i18n-config]seems like you forgot to provide messages loading strategy you must provide one of: asyncMessagesLoader or messages');
    }

    var config = {
        // Initial language
        lng: locale,
        // Fallback language
        fallbackLng: 'en',
        // Don't use a key separator (no support for nested translation objects)
        keySeparator: false,
        react: {
            useSuspense: useSuspense,
            bindI18n: bindI18n,
            wait: wait
        },
        // our own internal param
        _polyfill: polyfill
    };
    var i18nInstance = i18next.createInstance(disableAutoInit ? config : undefined); // icu is optional since this function can be called from initI18n or initI18nWithoutICU modules

    if (icu) {
        i18nInstance.use(icu);
    }

    if (asyncMessagesLoader) {
        i18nInstance.use({
            type: 'backend',
            read: function read(language, namespace, callback) {
                // We configure how i18next should fetch a translation resource when it
                // needs it: We use Webpack's dynamic imports to fetch resources without
                // increasing our bundle size.
                //
                // See https://webpack.js.org/guides/code-splitting/#dynamic-imports for
                // more information.
                return asyncMessagesLoader(language).then(function(translation) {
                    return callback(null, translation);
                })["catch"](function(error) {
                    return callback(error, null);
                });
            }
        });
    }

    if (messages) {
        var _config$resources;

        config.resources = (_config$resources = {}, _config$resources[locale] = {
            translation: messages
        }, _config$resources);
    }

    if (!disableAutoInit) {
        i18nInstance.init(config);
    }

    return i18nInstance;
}