import {
    __spreadArrays
} from "tslib";
import {
    ConverterType
} from './serializer/domain';
import {
    schemaSerializer
} from './serializer/serializer';
import {
    protobufConverters
} from './serializer/protobuf-converters/converters';
import {
    typeToConverterSet
} from './serializer/utils';
var ambassadorConverters = typeToConverterSet(__spreadArrays(protobufConverters));
export function serializer(rootSchema, depSchemas) {
    if (depSchemas === void 0) {
        depSchemas = {};
    }
    var transform = schemaSerializer(rootSchema, depSchemas, ambassadorConverters);
    return {
        fromJSON: function(jsonOrString) {
            var jsonOrText = safeJsonParse(jsonOrString) || jsonOrString;
            return transform(jsonOrText, ConverterType.FROM_JSON);
        },
        toJSON: function(json) {
            return transform(json, ConverterType.TO_JSON);
        },
    };
}

function safeJsonParse(someString) {
    try {
        return JSON.parse(someString);
    } catch (error) {}
}
//# sourceMappingURL=ambassador-index.js.map