"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var color_1 = require("./color");
var font_1 = require("./font");
/*

  A helper to render styles according to presets (from settings saved in storage).
  This helps to prevent blinking which is caused when one style is rendered in server
  and another one is rendered after document is loaded.

*/
var StyleService = /** @class */ (function() {
    function StyleService(_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a,
            _c = _b.inEditor,
            inEditor = _c === void 0 ? true : _c,
            _d = _b.styleParams,
            styleParams = _d === void 0 ? {} : _d,
            _e = _b.siteTextPresets,
            siteTextPresets = _e === void 0 ? {} : _e,
            _f = _b.siteColors,
            siteColors = _f === void 0 ? [] : _f,
            _g = _b.fontCssUrls,
            fontCssUrls = _g === void 0 ? [] : _g;
        this.SCOPES = {
            COLORS: 'colors',
            FONTS: 'fonts',
            NUMBERS: 'numbers',
        };
        this.fontCssUrls = [];
        // Saved styleParams
        this.getStyleParam = function(path) {
            return _.get(_this.styleParams, path);
        };
        this.getStyleParamByScope = function(wixParam, scope) {
            return _this.getStyleParam(scope + "." + wixParam);
        };
        // Returns color from saved wix color palette
        this.getSiteColor = function(reference) {
            return _.find(_this.siteColors, {
                reference: reference
            });
        };
        // Returns value from wix site text presets (default fonts)
        this.getSiteTextPreset = function(themeName) {
            return _.get(_this.siteTextPresets, themeName);
        };
        // Renders a directive to comply with wix-style (angular 1 style)
        this.renderStyleDirective = function(wixParam, defaultValue) {
            return wixParam ? "{{ style." + wixParam + " " + defaultValue + " }}" : "{{ " + defaultValue + " }}";
        };
        // Render object { property, prefix, suffix } to css string
        this.toCSS = function(_a, color) {
            var property = _a.property,
                _b = _a.prefix,
                prefix = _b === void 0 ? '' : _b,
                _c = _a.suffix,
                suffix = _c === void 0 ? '' : _c;
            var cssValue = [prefix, color.toString(), suffix].filter(function(s) {
                return s.length > 0;
            }).join(' ');
            return property + ": " + (color && cssValue);
        };
        // Renders saved fonts urls
        this.getFontsUrls = function() {
            return _(__spreadArrays([_.get(_this.styleParams, 'googleFontsCssUrl')], _this.fontCssUrls))
                .filter(function(url) {
                    return !!url;
                })
                .map(function(url) {
                    return "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + url + "\"/>";
                })
                .value()
                .join('\n');
        };
        this.isStyleValue = function(value) {
            return !_.isNil(value) && value !== false;
        };
        // Render style.value if the style is an object (colors, fonts) or compute value from an object
        // Render style if the style is a primitive value (numbers)
        this.renderStyleValue = function(style) {
            if (_.isObjectLike(style)) {
                return font_1.isFontWithoutValue(style) ? font_1.calculateFont(style) : style.value;
            }
            return _this.isStyleValue(style) && style;
        };
        // Returns either saved style if it's saved or default if param was not saved
        // Worst case, if no styles were saved, fallback to directive
        this.renderLiveSiteStyle = function(savedStyle, defaultStyle, directive) {
            if (_this.isStyleValue(savedStyle)) {
                return _this.renderStyleValue(savedStyle);
            }
            if (_this.isStyleValue(defaultStyle)) {
                return _this.renderStyleValue(defaultStyle);
            }
            return directive;
        };
        // Default getter by scope
        this.renderDefaultByScope = function(scope, defaultValue) {
            return (scope === _this.SCOPES.COLORS && _this.getSiteColor(defaultValue)) ||
                (scope === _this.SCOPES.FONTS && _this.getSiteTextPreset(defaultValue)) ||
                (scope === _this.SCOPES.NUMBERS && defaultValue);
        };
        // Render directive in editor or saved style in live site
        this.renderStyle = function(wixParam, defaultValue, scope) {
            var savedStyle = _this.getStyleParamByScope(wixParam, scope);
            var defaultStyle = _this.renderDefaultByScope(scope, defaultValue);
            var directive = _this.renderStyleDirective(wixParam, defaultValue);
            return _this.inEditor ?
                directive :
                _this.renderLiveSiteStyle(savedStyle, defaultStyle, directive);
        };
        // Colors with opacity
        this.renderColorWithFixedOpacity = function(color, opacity) {
            return !_.isNil(color) && color_1.calculateColor(color, opacity);
        };
        // Always applies initial fixedOpacity or initialOpacity for default value only
        this.renderSavedOrDefaultColorWithOpacity = function(wixParam, defaultColorReference, initialOpacity, fixedOpacity) {
            var savedColor = _this.getStyleParamByScope(wixParam, _this.SCOPES.COLORS);
            var defaultColor = _this.getSiteColor(defaultColorReference);
            var color = _this.renderLiveSiteStyle(savedColor, defaultColor);
            if (fixedOpacity) {
                return _this.renderColorWithFixedOpacity(color, fixedOpacity);
            }
            return !_.isNil(savedColor) ? color : _this.renderColorWithFixedOpacity(color, initialOpacity);
        };
        this.renderSiteColorWithOpacity = function(defaultColorReference, opacity) {
            var color = _this.renderStyleValue(_this.renderDefaultByScope(_this.SCOPES.COLORS, defaultColorReference));
            return color && color_1.calculateColor(color, opacity);
        };
        // Fonts with initial size
        this.fontToFixedSize = function(font, size) {
            return "\n    " + font + ";\n    font-size: " + size + "px;\n    font-style: normal;";
        };
        this.renderFontWithFixedSize = function(defaultThemeName, initialFontSize) {
            var defaultStyle = _this.renderStyleValue(_this.getSiteTextPreset(defaultThemeName));
            return defaultStyle && _this.fontToFixedSize(defaultStyle, initialFontSize);
        };
        // Public
        this.renderColor = function(wixParam, defaultColorReference) {
            return _this.renderStyle(wixParam, defaultColorReference, _this.SCOPES.COLORS);
        };
        this.renderFont = function(wixParam, defaultFontThemeName) {
            return _this.renderStyle(wixParam, defaultFontThemeName, _this.SCOPES.FONTS);
        };
        this.renderNumber = function(wixParam, defaultValue) {
            return _this.renderStyle(wixParam, defaultValue, _this.SCOPES.NUMBERS);
        };
        this.renderFixedColor = function(colorReference) {
            return _this.renderStyle(null, colorReference, _this.SCOPES.COLORS);
        };
        this.renderFixedFont = function(fontPresetName) {
            return _this.renderStyle(null, fontPresetName, _this.SCOPES.FONTS);
        };
        this.getUploadedFontFaces = function() {
            return (_this.styleParams && _this.styleParams.uploadFontFaces) || [];
        };
        this.renderFontUrls = function() {
            return _this.getFontsUrls();
        };
        // These helpers renders no directives because the mapping in editor should be done customly in frontend (this service can be used)
        // That is because custom opacity and font-sizes can't be rendered with directives
        this.renderColorWithOpacity = function(wixParam, css, defaultColorReference, initialOpacity, fixedOpacity) {
            return wixParam ?
                _this.toCSS(css, _this.renderSavedOrDefaultColorWithOpacity(wixParam, defaultColorReference, initialOpacity, fixedOpacity)) :
                _this.toCSS(css, _this.renderSiteColorWithOpacity(defaultColorReference, fixedOpacity || initialOpacity));
        };
        this.renderFontWithInitialSize = function(wixParam, defaultThemeName, initialFontSize) {
            var savedStyle = _this.renderStyleValue(_this.getStyleParamByScope(wixParam, _this.SCOPES.FONTS));
            var defaultStyle = _this.renderFontWithFixedSize(defaultThemeName, initialFontSize);
            var styleDirective = _this.fontToFixedSize(_this.renderStyleDirective(wixParam, defaultThemeName), initialFontSize);
            return _this.renderLiveSiteStyle(savedStyle, defaultStyle, styleDirective);
        };
        this.inEditor = inEditor;
        this.styleParams = styleParams;
        this.siteTextPresets = siteTextPresets;
        this.siteColors = siteColors;
        this.fontCssUrls = fontCssUrls;
    }
    return StyleService;
}());
exports.StyleService = StyleService;
//# sourceMappingURL=style.js.map