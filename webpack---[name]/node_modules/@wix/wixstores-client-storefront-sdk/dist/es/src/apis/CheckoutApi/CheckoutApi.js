import {
    __assign,
    __awaiter,
    __extends,
    __generator,
    __rest
} from "tslib";
import {
    query as getCheckoutQuery
} from '../../graphql/getCheckout.graphql';
import {
    query as markCheckoutAsCompletedQuery
} from '../../graphql/markCheckoutAsCompleted.graphql';
import {
    query as setCartShippingOption
} from '../../graphql/setCartShippingOption.graphql';
import {
    query as setCartShippingAddressesForFastFlowEstimation
} from '../../graphql/setCartShippingAddressesForFastFlowEstimation.graphql';
import {
    query as submitPaymentMutation
} from '../../graphql/submitPayment.graphql';
import {
    query as setCartAddressesAndDestinationFromSingleAddress
} from '../../graphql/setCartAddressesAndDestinationFromSingleAddress.graphql';
import {
    query as setCartBillingAddress
} from '../../graphql/setCartBillingAddress.graphql';
import {
    query as setCartShippingAddressAndDestination
} from '../../graphql/setCartShippingAddressAndDestination.graphql';
import {
    query as createCheckoutFromCartMutation
} from '../../graphql/createCheckoutFromCart.graphql';
import {
    BaseApi
} from '../BaseApi';
import {
    GraphQLOperations,
    RemoteSourceTypes
} from '../constants';
import {
    ChannelType,
} from '@wix/wixstores-graphql-schema-node';
import {
    mapCommandAddressToCheckoutLegacyAddress
} from '../helpers/mapCommandAddressToCheckoutAddress';
var CheckoutApi = /** @class */ (function(_super) {
    __extends(CheckoutApi, _super);

    function CheckoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckoutApi.prototype.fetchCheckout = function(variables) {
        return __awaiter(this, void 0, void 0, function() {
            var response;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.fetch({
                            variables: variables,
                            query: getCheckoutQuery,
                            operationName: GraphQLOperations.GetCheckout,
                        }, RemoteSourceTypes.NodeReadWrite, true)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/ , response.data.checkout];
                }
            });
        });
    };
    CheckoutApi.prototype.createCheckout = function(cartId) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.mutate({
                            variables: {
                                params: {
                                    cartId: cartId,
                                    channelType: ChannelType.WEB
                                }
                            },
                            query: createCheckoutFromCartMutation,
                            operationName: GraphQLOperations.CreateCheckout,
                        })];
                    case 1:
                        return [2 /*return*/ , (_a.sent()).cart.createCheckout.checkoutId];
                }
            });
        });
    };
    CheckoutApi.prototype.markCheckoutAsCompleted = function(variables) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: markCheckoutAsCompletedQuery,
                            operationName: GraphQLOperations.MarkCheckoutAsCompleted,
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    CheckoutApi.prototype.setCartAddress = function(cartId, address, checkoutId) {
        return __awaiter(this, void 0, void 0, function() {
            var variables;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        variables = {
                            cartId: cartId,
                            address: mapCommandAddressToCheckoutLegacyAddress(address),
                            checkoutId: checkoutId,
                        };
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: setCartAddressesAndDestinationFromSingleAddress,
                            operationName: GraphQLOperations.SetCartAddressesAndDestinationFromSingleAddress,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    CheckoutApi.prototype.setCartShippingAddressesForFastFlowEstimation = function(cartId, address, checkoutId) {
        return __awaiter(this, void 0, void 0, function() {
            var variables;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        variables = {
                            cartId: cartId,
                            checkoutId: checkoutId,
                            address: {
                                country: address.country,
                                subdivision: address.subdivision,
                                zipCode: address.zipCode,
                            },
                        };
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: setCartShippingAddressesForFastFlowEstimation,
                            operationName: GraphQLOperations.SetCartShippingAddressesForFastFlowEstimation,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    CheckoutApi.prototype.placeOrder = function(_a) {
        var cartId = _a.cartId,
            checkoutId = _a.checkoutId,
            rest = __rest(_a, ["cartId", "checkoutId"]);
        return __awaiter(this, void 0, void 0, function() {
            var variables;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        variables = __assign({
                            cartId: cartId,
                            checkoutId: checkoutId
                        }, rest);
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: submitPaymentMutation,
                            operationName: GraphQLOperations.SubmitPayment,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [2 /*return*/ , (_b.sent()).checkout.submitPayment];
                }
            });
        });
    };
    CheckoutApi.prototype.setCartBillingAddress = function(cartId, billingAddress, checkoutId) {
        return __awaiter(this, void 0, void 0, function() {
            var variables;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        variables = {
                            cartId: cartId,
                            address: mapCommandAddressToCheckoutLegacyAddress(billingAddress),
                            checkoutId: checkoutId,
                        };
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: setCartBillingAddress,
                            operationName: GraphQLOperations.SetCartBillingAddress,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    CheckoutApi.prototype.setCartShippingAddressAndDestination = function(cartId, shippingAddress, checkoutId) {
        return __awaiter(this, void 0, void 0, function() {
            var variables;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        variables = {
                            cartId: cartId,
                            address: mapCommandAddressToCheckoutLegacyAddress(shippingAddress),
                            checkoutId: checkoutId,
                        };
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: setCartShippingAddressAndDestination,
                            operationName: GraphQLOperations.SetCartShippingAddressAndDestination,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    CheckoutApi.prototype.setShippingOption = function(variables) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.mutate({
                            variables: variables,
                            query: setCartShippingOption,
                            operationName: GraphQLOperations.SetCartShippingOption,
                        })];
                    case 1:
                        // eslint-disable-next-line @typescript-eslint/tslint/config
                        return [2 /*return*/ , (_a.sent()).checkout.setShippingOption.cartService.cart];
                }
            });
        });
    };
    return CheckoutApi;
}(BaseApi));
export {
    CheckoutApi
};
//# sourceMappingURL=CheckoutApi.js.map