"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubscriptionService = void 0;
var tslib_1 = require("tslib");
var _ = tslib_1.__importStar(require("lodash"));
var type_1 = require("./type");
var SubscriptionService = /** @class */ (function() {
    function SubscriptionService(subscriptionPlans, oneTimePurchaseInfo) {
        var _this = this;
        this.subscriptionPlans = subscriptionPlans;
        this.oneTimePurchaseInfo = oneTimePurchaseInfo;
        this.getSubscriptionPlans = function() {
            if (!_this.subscriptionPlans || !_this.subscriptionPlans.list || _this.subscriptionPlans.list.length === 0) {
                return [];
            }
            if (!_.isNil(_this.subscriptionPlans.oneTimePurchase)) {
                var oneTimePurchaseIndex = _this.oneTimePurchaseInfo.place === 0 ? 0 : _this.subscriptionPlans.list.length;
                return _this.getPlansListWithOneTimePurchaseAtIndex(_this.subscriptionPlans.list, oneTimePurchaseIndex);
            } else {
                return _this.subscriptionPlans.list.map(_this.mapSubscriptionDtoToSubscriptionPlan);
            }
        };
        this.getSubscriptionPlansView = function(product, selectedVariantId, selectedSubscriptionPlanId) {
            var _a, _b, _c;
            var selectedVariant = product.productItems.find(function(item) {
                return item.id === selectedVariantId;
            });
            var productSubscription = (_a = selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.subscriptionPlans) !== null && _a !== void 0 ? _a : product.subscriptionPlans;
            return _this.subscriptionBuilder(productSubscription, (_b = product.subscriptionPlans) === null || _b === void 0 ? void 0 : _b.oneTimePurchase, (_c = selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.formattedPrice) !== null && _c !== void 0 ? _c : undefined, selectedSubscriptionPlanId);
        };
    }
    SubscriptionService.prototype.mapSubscriptionDtoToSubscriptionPlan = function(item) {
        return {
            formattedPrice: item.formattedPrice,
            id: item.id,
            price: item.price,
            name: item.name,
            isOneTimePurchase: false,
            tagline: item.tagline,
            frequency: item.frequency,
            duration: item.duration,
        };
    };
    SubscriptionService.prototype.getPlansListWithOneTimePurchaseAtIndex = function(list, index, price) {
        return tslib_1.__spread(list.slice(0, index).map(this.mapSubscriptionDtoToSubscriptionPlan), [{
            name: this.oneTimePurchaseInfo.label,
            formattedPrice: price !== null && price !== void 0 ? price : this.oneTimePurchaseInfo.price,
            isOneTimePurchase: true,
        }], list.slice(index).map(this.mapSubscriptionDtoToSubscriptionPlan));
    };
    SubscriptionService.prototype.subscriptionBuilder = function(productSubscription, oneTimePurchase, selectedVariantFormattedPrice, selectedSubscriptionPlanId) {
        if (!productSubscription || !productSubscription.list || productSubscription.list.length === 0) {
            return [];
        }
        if (!_.isNil(oneTimePurchase)) {
            var oneTimePurchaseIndex = this.oneTimePurchaseInfo.place === 0 ? 0 : productSubscription.list.length;
            var listWithOneTimePurchaseAtIndex = this.getPlansListWithOneTimePurchaseAtIndex(productSubscription.list, oneTimePurchaseIndex, selectedVariantFormattedPrice);
            return this.getSubscriptionOptionsFormattedForProps(listWithOneTimePurchaseAtIndex, selectedSubscriptionPlanId);
        } else {
            var listWithoutOneTimePurchase = productSubscription.list.map(this.mapSubscriptionDtoToSubscriptionPlan);
            return this.getSubscriptionOptionsFormattedForProps(listWithoutOneTimePurchase, selectedSubscriptionPlanId);
        }
    };
    SubscriptionService.prototype.getSubscriptionOptionsFormattedForProps = function(subscriptionOptions, selectedSubscriptionPlanId) {
        var _this = this;
        return subscriptionOptions.map(function(plan) {
            var isSelected = !!((selectedSubscriptionPlanId && selectedSubscriptionPlanId === plan.id) ||
                (selectedSubscriptionPlanId && !plan.id && selectedSubscriptionPlanId === 'one-time-purchase'));
            return {
                id: plan.id ? plan.id : 'one-time-purchase',
                name: plan.name,
                tagline: plan.tagline,
                frequency: _this.getPriceSectionText(plan.frequency, plan.duration),
                formattedPrice: plan.formattedPrice,
                isSelected: isSelected,
            };
        });
    };
    SubscriptionService.prototype.getPriceSectionText = function(frequency, duration) {
        var exactFrequency;
        var autoRenewText = 'auto-renew';
        switch (frequency) {
            case type_1.SubscriptionOptionFrequency.WEEK:
                exactFrequency = duration ? duration + " weeks" : autoRenewText;
                return "weekly / " + exactFrequency;
            case type_1.SubscriptionOptionFrequency.MONTH:
                exactFrequency = duration ? duration + " months" : autoRenewText;
                return "monthly / " + exactFrequency;
            case type_1.SubscriptionOptionFrequency.YEAR:
                exactFrequency = duration ? duration + " years" : autoRenewText;
                return "yearly / " + exactFrequency;
            default:
                return undefined;
        }
    };
    SubscriptionService.prototype.hasPlans = function() {
        return this.getSubscriptionPlans().length > 0;
    };
    SubscriptionService.prototype.hasActualPlanSelected = function(userInputs) {
        return userInputs.subscriptionPlan.length > 0 && !this.isOneTimePurchaseSelected(userInputs);
    };
    Object.defineProperty(SubscriptionService.prototype, "shouldShowSubscriptionPlans", {
        get: function() {
            return this.hasPlans();
        },
        enumerable: false,
        configurable: true
    });
    SubscriptionService.prototype.shouldShowSubscribeButton = function(userInputs) {
        return this.getSubscriptionPlans().length > 0 && !this.isOneTimePurchaseSelected(userInputs);
    };
    SubscriptionService.prototype.isOneTimePurchaseSelected = function(userInputs) {
        return userInputs.subscriptionPlan.length > 0 && _.get(userInputs.subscriptionPlan, ['0']).isOneTimePurchase;
    };
    SubscriptionService.prototype.setOneTimePurchasePlace = function(place) {
        this.oneTimePurchaseInfo.place = place;
    };
    SubscriptionService.prototype.hasOneTimePurchase = function() {
        return this.subscriptionPlans.oneTimePurchase !== null;
    };
    SubscriptionService.prototype.isBreakableToPaymentOptions = function(userInputs) {
        if (!this.hasPlans()) {
            return true;
        }
        return this.hasOneTimePurchase() && !this.hasActualPlanSelected(userInputs);
    };
    return SubscriptionService;
}());
exports.SubscriptionService = SubscriptionService;
//# sourceMappingURL=SubscriptionService.js.map