var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = {
    endpoint: 'ec-site'
};
var init = function(webOrMobileLogger) {
    return function(userConfig) {
        if (userConfig === void 0) {
            userConfig = {};
        }
        var defaults = userConfig.defaults,
            restOfConfig = __rest(userConfig, ["defaults"]);
        var config = __assign(__assign({}, defaultConfig), restOfConfig);
        var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
        var logger = getLogger(factoryInstance);
        return defaults ? logger.util.updateDefaults(defaults) : logger;
    };
};
export var initCustomLogger = function(factoryInstance) {
    return getLogger(factoryInstance);
};
var getLogger = function(biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function() {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function(defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function(logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({
                src: 130
            });
        this.bi = biLoggerClientFactoryInstance.logger({
            endpoint: 'ec-site'
        });
    };
    /**
     * @typedef {Object} clickOnBackInCheckoutProcessParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: click on 'back' in checkout process. Evid: 170.
     * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * previousStage - Type: string. Desc: the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {clickOnBackInCheckoutProcessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnBackInCheckoutProcess = function(params) {
        return this.bi.log(__assign({
            evid: 170
        }, params));
    };
    /**
     * @typedef {Object} updatedCartItemQuantitySfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - number of items in the cart
     * @property {string} origin - origin
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     **/
    /**
     * Name: Updated cart item quantity SF. Evid: 116.
     * Event description: Updated cart item quantity.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: number of items in the cart
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     * @param {updatedCartItemQuantitySfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.updatedCartItemQuantitySf = function(params) {
        return this.bi.log(__assign({
            evid: 116
        }, params));
    };
    /**
     * @typedef {Object} clickOnAddToCartParams
     * @property {string} appName - app_name
     * @property {string} buttonType - buy now / add to cart / subscribe now
     * @property {GUID} checkoutId - checkout_id
     * @property {number} quantity - added product quntety
     * @property {boolean} hasOptions - does the product have options
     * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
     * @property {string} navigationClick - mini-cart / cart  / none / checkout
     * @property {string} options - a json containing the options selected for the product
     * @property {string} origin - origin
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     * @property {string} productType - digital / physical
     * @property {GUID} uuid - uuid
     * @property {string} viewMode - editor / site / preview
     **/
    /**
     * Name: Click on add to cart. Evid: 63.
     * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'.
    
     * appName - Type: string. Desc: app_name
     *
     * buttonType - Type: string. Desc: buy now / add to cart / subscribe now
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * quantity - Type: numeric. Desc: added product quntety
     *
     * hasOptions - Type: bool. Desc: does the product have options
     *
     * isNavigateCart - Type: bool. Desc: true if the button redirect to cart (mobile or without cart icon), false otherwise
     *
     * navigationClick - Type: string. Desc: mini-cart / cart  / none / checkout
     *
     * options - Type: string. Desc: a json containing the options selected for the product
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     *
     * productType - Type: string. Desc: digital / physical
     *
     * uuid - Type: guid. Desc: uuid
     *
     * viewMode - Type: string. Desc: editor / site / preview
     * @param {clickOnAddToCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnAddToCart = function(params) {
        return this.bi.log(__assign({
            evid: 63
        }, params));
    };
    /**
     * @typedef {Object} clickOnAddNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isOwner - true for owner false for member. since june 2019
     * @property {string} origin - OA StoreFront
     **/
    /**
     * Name: Click on add note to seller SF. Evid: 121.
     * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
     *
     * origin - Type: string. Desc: OA StoreFront
     * @param {clickOnAddNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnAddNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 121
        }, params));
    };
    /**
     * @typedef {Object} checkoutPageSpecificStageExpandedParams
     * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} hasGiftCard - payment stage only - true  if visitor sees the Gift Card Checkbox
     * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
     * @property {boolean} isGiftCardApplied - payment stage only  - true if giftcard is already applied on load
     * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {string} origin - 'OA StoreFront' (for OneApp)
     * @property {GUID} owner_id - uuid of site owner
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} shippingMethodType - shipping /store pickup / none
     * @property {string} shippingStatus - data on shipping status from shipping service, only relevant after shipping details were field
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: checkout page -> specific stage expanded. Evid: 37.
     * Event description: when a new stage is expanded and another collapse.
    When all data is visible. since june 2019 is sent also from OneApp.
    
     * additionalRequiredField - Type: string. Desc: only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
     *
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * hasGiftCard - Type: bool. Desc: payment stage only - true  if visitor sees the Gift Card Checkbox
     *
     * isFirstTimeUsage - Type: bool. Desc: True If the user sees this stage for the first time, false if it's from edit click
     *
     * isGiftCardApplied - Type: bool. Desc: payment stage only  - true if giftcard is already applied on load
     *
     * isCartPaidOnlyWithGiftCard - Type: bool. Desc: True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * origin - Type: string. Desc: 'OA StoreFront' (for OneApp)
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     *
     * shippingStatus - Type: string. Desc: data on shipping status from shipping service, only relevant after shipping details were field
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {checkoutPageSpecificStageExpandedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutPageSpecificStageExpanded = function(params) {
        return this.bi.log(__assign({
            evid: 37
        }, params));
    };
    /**
     * @typedef {Object} clickToAddCouponParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} origin - shopping cart / checkout
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Click to add Coupon. Evid: 111.
     * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * origin - Type: string. Desc: shopping cart / checkout
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {clickToAddCouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickToAddCoupon = function(params) {
        return this.bi.log(__assign({
            evid: 111
        }, params));
    };
    /**
     * @typedef {Object} clickPlaceOrderWithSubscriptionParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} default_state - true if was turned on by default by merchant settings
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} origin - OA StoreFront
     **/
    /**
     * Name: Click Place order with Subscription. Evid: 58.
     * Event description: if "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * default_state - Type: bool. Desc: true if was turned on by default by merchant settings
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * origin - Type: string. Desc: OA StoreFront
     * @param {clickPlaceOrderWithSubscriptionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickPlaceOrderWithSubscription = function(params) {
        return this.bi.log(__assign({
            evid: 58
        }, params));
    };
    /**
     * @typedef {Object} errorInCheckoutParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
     * @property {string} field - Icon text, button text, out of stock...
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} message - validation error
     * @property {string} origin - OA StoreFront
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: Error in checkout. Evid: 24.
     * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront').
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * errorMessage - Type: string. Desc: right now only relevant for minimum order, no message = NULL
     *
     * field - Type: string. Desc: Icon text, button text, out of stock...
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * message - Type: string. Desc: validation error
     *
     * origin - Type: string. Desc: OA StoreFront
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {errorInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.errorInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 24
        }, params));
    };
    /**
     * @typedef {Object} updateClickedInSelectYourShippingDestinationPopupSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} hasZipCode - true if the destination was saved with zip code, else false
     * @property {string} shippingDestinationCountry - shipping destination country
     * @property {string} shippingDestinationState - shipping destination state
     **/
    /**
     * Name: update clicked in select your shipping destination popup SF. Evid: 125.
     * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * hasZipCode - Type: bool. Desc: true if the destination was saved with zip code, else false
     *
     * shippingDestinationCountry - Type: string. Desc: shipping destination country
     *
     * shippingDestinationState - Type: string. Desc: shipping destination state
     * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.updateClickedInSelectYourShippingDestinationPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 125
        }, params));
    };
    /**
     * @typedef {Object} clickOnEditCartParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} origin - null
     **/
    /**
     * Name: click on edit cart. Evid: 171.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * origin - Type: string.
     * @param {clickOnEditCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnEditCart = function(params) {
        return this.bi.log(__assign({
            evid: 171
        }, params));
    };
    /**
     * @typedef {Object} membersAddressInCheckoutWasChangedParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {string} origin - addresses list / add address / edit address
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: members -> address in checkout was changed. Evid: 48.
     * Event description: when address was changed in the checkout.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * origin - Type: string. Desc: addresses list / add address / edit address
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {membersAddressInCheckoutWasChangedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.membersAddressInCheckoutWasChanged = function(params) {
        return this.bi.log(__assign({
            evid: 48
        }, params));
    };
    /**
     * @typedef {Object} shippingAddressSetParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isChecked - is billing address the same as delivery address
     * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Shipping address set. Evid: 161.
     * Event description: Shipping address set. since june 2019 is also sentt from OneApp (origin =OA StoreFront).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isChecked - Type: bool. Desc: is billing address the same as delivery address
     *
     * isFormValid - Type: bool. Desc: is form valid (all mandatory fields are compatible)
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {shippingAddressSetParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.shippingAddressSet = function(params) {
        return this.bi.log(__assign({
            evid: 161
        }, params));
    };
    /**
     * @typedef {Object} saveNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} is_empty - is text field empty
     * @property {string} origin - origin
     **/
    /**
     * Name: Save note to seller SF. Evid: 122.
     * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * is_empty - Type: bool. Desc: is text field empty
     *
     * origin - Type: string. Desc: origin
     * @param {saveNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.saveNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 122
        }, params));
    };
    /**
     * @typedef {Object} viewCartPageSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {string} checkoutType - in viewer / out of viewer
     * @property {number} itemsCount - number of items in the cart
     * @property {boolean} isContinueShopping - show continue shopping link in cart
     * @property {boolean} isDeliveryRates - show delivery rates in cart
     * @property {boolean} isFullWidth - is the full width setting in the cart on / off
     * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
     * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
     * @property {boolean} is_note - show add a note to seller in cart
     * @property {boolean} isOwner - true for owner false for member. since june 2019
     * @property {boolean} isPickupAvailable - is pickup available
     * @property {boolean} is_promo_code - show/hide promo code (coupon) in the cart & checkout
     * @property {boolean} isShippingCalculated - is the shipping estimation is calculated
     * @property {boolean} isTaxCosts - show tax costs in cart
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} lineItemsCount - number of line items in cart
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
     * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} shippingReason - the reason why the shipping is not calculated (unknown = POS/digital cart)
     * @property {GUID} siteMemberId - member guid
     * @property {GUID} uuid - uuid
     * @property {string} viewMode - editor / site / preview
     * @property {GUID} visitorId - visitorId
     **/
    /**
     * Name: view cart page SF. Evid: 124.
     * Event description: view cart page. since june 2019 also for OneApp Store front.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * checkoutType - Type: string. Desc: in viewer / out of viewer
     *
     * itemsCount - Type: numeric. Desc: number of items in the cart
     *
     * isContinueShopping - Type: bool. Desc: show continue shopping link in cart
     *
     * isDeliveryRates - Type: bool. Desc: show delivery rates in cart
     *
     * isFullWidth - Type: bool. Desc: is the full width setting in the cart on / off
     *
     * is_member - Type: bool. Desc: true is the visitor signed in as a member, false otherwise
     *
     * isMembersInstalled - Type: bool. Desc: true if members app installed on site, false otherwise
     *
     * is_note - Type: bool. Desc: show add a note to seller in cart
     *
     * isOwner - Type: bool. Desc: true for owner false for member. since june 2019
     *
     * isPickupAvailable - Type: bool. Desc: is pickup available
     *
     * is_promo_code - Type: bool. Desc: show/hide promo code (coupon) in the cart & checkout
     *
     * isShippingCalculated - Type: bool. Desc: is the shipping estimation is calculated
     *
     * isTaxCosts - Type: bool. Desc: show tax costs in cart
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * lineItemsCount - Type: numeric. Desc: number of line items in cart
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
     *
     * origin - Type: string. Desc: add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * shippingReason - Type: string. Desc: the reason why the shipping is not calculated (unknown = POS/digital cart)
     *
     * siteMemberId - Type: guid. Desc: member guid
     *
     * uuid - Type: guid. Desc: uuid
     *
     * viewMode - Type: string. Desc: editor / site / preview
     *
     * visitorId - Type: guid. Desc: visitorId
     * @param {viewCartPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.viewCartPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 124
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutClickApplyParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - null
     **/
    /**
     * Name: gift card checkout -> click Apply. Evid: 529.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool.
     * @param {giftCardCheckoutClickApplyParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutClickApply = function(params) {
        return this.bi.log(__assign({
            evid: 529
        }, params));
    };
    /**
     * @typedef {Object} serverlessEventPlaygroundParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {string} paymentCategory - CreditCard/Ewallet
     * @property {string} paymentMethod - authorize-net/Stripe
     **/
    /**
     * Name: Select payment category cashier. Evid: 200.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * paymentCategory - Type: string. Desc: CreditCard/Ewallet
     *
     * paymentMethod - Type: string. Desc: authorize-net/Stripe
     * @param {serverlessEventPlaygroundParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.serverlessEventPlayground = function(params) {
        return this.bi.log(__assign({
            evid: 200
        }, params));
    };
    /**
     * @typedef {Object} clickOnCheckoutParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {string} origin - origin
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} shippingMethodType - shipping /store pickup / none
     **/
    /**
     * Name: Click on checkout. Evid: 114.
     * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * origin - Type: string. Desc: origin
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     * @param {clickOnCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 114
        }, params));
    };
    /**
     * @typedef {Object} removeACouponParams
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - null
     * @property {string} couponId - coupon_id
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} origin - null
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Remove a coupon. Evid: 118.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string.
     *
     * couponId - Type: string. Desc: coupon_id
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {removeACouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.removeACoupon = function(params) {
        return this.bi.log(__assign({
            evid: 118
        }, params));
    };
    /**
     * @typedef {Object} checkoutPageLoadParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {string} catalogAppId - list of all catalog app ids
     * @property {GUID} checkoutId - checkout_id
     * @property {string} checkoutType - in viewer / out of viewer
     * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
     * @property {number} dintinctNumItems - count distinct item_id
     * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     * @property {string} first_stage - first stage open in checkout page
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} isPolicy - has policies in checkout
     * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} itemsQuantity - sum of total items quantity
     * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     * @property {number} numLineItems - total number of line items
     * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {boolean} savedAddress - true if the member has saved address
     * @property {string} shippingCountry - buyer country code when viewing the checkout
     * @property {string} shippingMethodType - shipping /store pickup / none
     **/
    /**
     * Name: Checkout page load. Evid: 36.
     * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * catalogAppId - Type: string. Desc: list of all catalog app ids
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * checkoutType - Type: string. Desc: in viewer / out of viewer
     *
     * customFieldsTitle - Type: string. Desc: title of custom field (can be a list if there is more than one field
     *
     * dintinctNumItems - Type: numeric. Desc: count distinct item_id
     *
     * dintinctNumItemsPerCatalog - Type: string. Desc: Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}
     *
     * first_stage - Type: string. Desc: first stage open in checkout page
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * isPolicy - Type: bool. Desc: has policies in checkout
     *
     * is_promo_code - Type: bool. Desc: is promo code (coupon) option visible in the cart & checkout
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * itemsQuantity - Type: numeric. Desc: sum of total items quantity
     *
     * itemsQuantityPerCatalog - Type: string. Desc: Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}
     *
     * numLineItems - Type: numeric. Desc: total number of line items
     *
     * numLineItemsPerCatalog - Type: string. Desc: Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * origin - Type: string. Desc: the component / page that the visitor came from to the checkout, like product page, cart page, etc.
     *
     * originType - Type: string. Desc: the type of flow that lead to the checkout, like buy now, paypal, etc.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     *
     * shippingCountry - Type: string. Desc: buyer country code when viewing the checkout
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     * @param {checkoutPageLoadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.checkoutPageLoad = function(params) {
        return this.bi.log(__assign({
            evid: 36
        }, params));
    };
    /**
     * @typedef {Object} clickLogoutInCheckoutParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
     * @property {GUID} owner_id - null
     * @property {boolean} savedAddress - true if the member has saved address
     **/
    /**
     * Name: click logout in checkout. Evid: 601.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool. Desc: true if the visitor signed in as a member, false otherwise
     *
     * owner_id - Type: guid.
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     * @param {clickLogoutInCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickLogoutInCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 601
        }, params));
    };
    /**
     * @typedef {Object} clickOnContinueShoppingFromCartParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     **/
    /**
     * Name: Click on continue shopping from cart. Evid: 120.
     * Event description: cart - click on continue shopping.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     * @param {clickOnContinueShoppingFromCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnContinueShoppingFromCart = function(params) {
        return this.bi.log(__assign({
            evid: 120
        }, params));
    };
    /**
     * @typedef {Object} clickPlaceOrderParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - coupon_code
     * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {string} giftCardCode - null
     * @property {string} giftCardId - gift_card_id
     * @property {boolean} hasCustomField - null
     * @property {boolean} hasPaymentMethod - true / false
     * @property {boolean} is_member - null
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {boolean} isPremium - null
     * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
     * @property {GUID} owner_id - null
     * @property {string} paymentMethod - authorize-net/Stripe
     * @property {GUID} siteMemberId - null
     **/
    /**
     * Name: Click Place order. Evid: 168.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string. Desc: coupon_code
     *
     * customFieldMandatory - Type: bool. Desc: true - if custom field was mandatory on checkout
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * giftCardCode - Type: string.
     *
     * giftCardId - Type: string. Desc: gift_card_id
     *
     * hasCustomField - Type: bool.
     *
     * hasPaymentMethod - Type: bool. Desc: true / false
     *
     * is_member - Type: bool.
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * isPremium - Type: bool.
     *
     * numOfLineItems - Type: numeric. Desc: number of line items (# of products) in cart included the product just added
     *
     * owner_id - Type: guid.
     *
     * paymentMethod - Type: string. Desc: authorize-net/Stripe
     *
     * siteMemberId - Type: guid.
     * @param {clickPlaceOrderParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickPlaceOrder = function(params) {
        return this.bi.log(__assign({
            evid: 168
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutClickOnCheckboxParams
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {boolean} isMember - null
     * @property {string} value - behavior type
     **/
    /**
     * Name: gift card checkout -> click on checkbox. Evid: 527.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * isMember - Type: bool.
     *
     * value - Type: string. Desc: behavior type
     * @param {giftCardCheckoutClickOnCheckboxParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutClickOnCheckbox = function(params) {
        return this.bi.log(__assign({
            evid: 527
        }, params));
    };
    /**
     * @typedef {Object} couponAppliedParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} name - null
     * @property {string} couponCode - null
     * @property {string} couponId - null
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - null
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     * @property {number} total_long - null
     * @property {string} type - null
     **/
    /**
     * Name: Coupon applied. Evid: 119.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * name - Type: string.
     *
     * couponCode - Type: string.
     *
     * couponId - Type: string.
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool.
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     *
     * total_long - Type: numeric.
     *
     * type - Type: string.
     * @param {couponAppliedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.couponApplied = function(params) {
        return this.bi.log(__assign({
            evid: 119
        }, params));
    };
    /**
     * @typedef {Object} clickOnReturnToCheckoutInLogoutModalParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - null
     * @property {boolean} is_member - null
     * @property {GUID} owner_id - null
     * @property {boolean} savedAddress - null
     * @property {GUID} siteMemberId - null
     **/
    /**
     * Name: Click on return to checkout in logout modal. Evid: 603.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string.
     *
     * is_member - Type: bool.
     *
     * owner_id - Type: guid.
     *
     * savedAddress - Type: bool.
     *
     * siteMemberId - Type: guid.
     * @param {clickOnReturnToCheckoutInLogoutModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnReturnToCheckoutInLogoutModal = function(params) {
        return this.bi.log(__assign({
            evid: 603
        }, params));
    };
    /**
     * @typedef {Object} deliveryMethodSetParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} optionscount - number of payment options
     * @property {number} selectedoptionindex - index of selected option
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} methodType - pickup/not pickup
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {GUID} owner_id - uuid of site owner
     * @property {string} shippingRuleOptions - all the shipping types presented in the modal
     * @property {string} selectedoptiontype - type of option selected
     **/
    /**
     * Name: Delivery method set. Evid: 163.
     * Event description: Click on continue to payment (on web) since June 2019 also sent from OneApp (leads to "Review Order" (placeOrder) screen).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * optionscount - Type: numeric. Desc: number of payment options
     *
     * selectedoptionindex - Type: numeric. Desc: index of selected option
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * methodType - Type: string. Desc: pickup/not pickup
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * shippingRuleOptions - Type: string. Desc: all the shipping types presented in the modal
     *
     * selectedoptiontype - Type: string. Desc: type of option selected
     * @param {deliveryMethodSetParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.deliveryMethodSet = function(params) {
        return this.bi.log(__assign({
            evid: 163
        }, params));
    };
    /**
     * @typedef {Object} clickApplyCouponParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - coupon_code
     * @property {boolean} isMember - true if visitor is member
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} origin - shopping cart / checkout
     * @property {GUID} owner_id - uuid of site owner
     **/
    /**
     * Name: Click 'Apply' Coupon. Evid: 112.
     * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string. Desc: coupon_code
     *
     * isMember - Type: bool. Desc: true if visitor is member
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * origin - Type: string. Desc: shopping cart / checkout
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     * @param {clickApplyCouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickApplyCoupon = function(params) {
        return this.bi.log(__assign({
            evid: 112
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutCodeAppliedParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} giftCardId - null
     * @property {boolean} isCartPaidOnlyWithGiftCard - null
     * @property {boolean} isMember - null
     **/
    /**
     * Name: gift card checkout -> code applied. Evid: 535.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * giftCardId - Type: string.
     *
     * isCartPaidOnlyWithGiftCard - Type: bool.
     *
     * isMember - Type: bool.
     * @param {giftCardCheckoutCodeAppliedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutCodeApplied = function(params) {
        return this.bi.log(__assign({
            evid: 535
        }, params));
    };
    /**
     * @typedef {Object} bisRequestIsAlreadyCreatedErrorParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {GUID} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {string} options - map of strings of the options chosen in the requested item
     **/
    /**
     * Name: BIS - Request is already created error. Evid: 27.
     * Event description: When a user clicks the submit button after a request is already made. and he gets an error for it.
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: guid. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * options - Type: string. Desc: map of strings of the options chosen in the requested item
     * @param {bisRequestIsAlreadyCreatedErrorParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisRequestIsAlreadyCreatedError = function(params) {
        return this.bi.log(__assign({
            evid: 27
        }, params));
    };
    /**
     * @typedef {Object} removedProductFromCartSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - origin
     * @property {string} origin - number of items in the cart
     * @property {GUID} owner_id - id of site's owner. since june 2019
     * @property {string} productId - product_id
     * @property {string} productType - digital / physical
     **/
    /**
     * Name: Removed product from cart SF. Evid: 115.
     * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view).
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: origin
     *
     * origin - Type: string. Desc: number of items in the cart
     *
     * owner_id - Type: guid. Desc: id of site's owner. since june 2019
     *
     * productId - Type: string. Desc: product_id
     *
     * productType - Type: string. Desc: digital / physical
     * @param {removedProductFromCartSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.removedProductFromCartSf = function(params) {
        return this.bi.log(__assign({
            evid: 115
        }, params));
    };
    /**
     * @typedef {Object} deleteNoteToSellerSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {GUID} checkoutId - checkout_id
     **/
    /**
     * Name: Delete note to seller SF. Evid: 123.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * checkoutId - Type: guid. Desc: checkout_id
     * @param {deleteNoteToSellerSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.deleteNoteToSellerSf = function(params) {
        return this.bi.log(__assign({
            evid: 123
        }, params));
    };
    /**
     * @typedef {Object} clickOnShippingDestinationInCartPageSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - null
     * @property {string} shippingDestinationCountry - null
     * @property {string} shippingDestinationState - shipping destination state
     **/
    /**
     * Name: Click on shipping destination in cart page SF. Evid: 223.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid.
     *
     * shippingDestinationCountry - Type: string.
     *
     * shippingDestinationState - Type: string. Desc: shipping destination state
     * @param {clickOnShippingDestinationInCartPageSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnShippingDestinationInCartPageSf = function(params) {
        return this.bi.log(__assign({
            evid: 223
        }, params));
    };
    /**
     * @typedef {Object} membersClickChangeInCheckoutStagesParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {string} stage - which stage in the wishlist installation process
     **/
    /**
     * Name: members -> click 'change' in checkout stages. Evid: 46.
     * Event description: click to 'change' autofill info in the checkout process.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * stage - Type: string. Desc: which stage in the wishlist installation process
     * @param {membersClickChangeInCheckoutStagesParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.membersClickChangeInCheckoutStages = function(params) {
        return this.bi.log(__assign({
            evid: 46
        }, params));
    };
    /**
     * @typedef {Object} clickOnCheckoutWithEWalletParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
     * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor
     * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     * @property {string} origin - origin
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} shippingMethodType - shipping /store pickup / none
     * @property {string} type - button / tooltip / banner
     **/
    /**
     * Name: Click on checkout with e-wallet. Evid: 113.
     * Event description: buyer clicks on checkout with e-wallwt in cart page.
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * is_with_ewallet_payment - Type: bool. Desc: does the store has an ewallet payment connected (and displaying in cart)
     *
     * is_with_offline_payment - Type: bool. Desc: does the store has an offline payment connected
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor
     *
     * orig_shipping_method - Type: string. Desc: current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
     *
     * origin - Type: string. Desc: origin
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * shippingMethodType - Type: string. Desc: shipping /store pickup / none
     *
     * type - Type: string. Desc: button / tooltip / banner
     * @param {clickOnCheckoutWithEWalletParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnCheckoutWithEWallet = function(params) {
        return this.bi.log(__assign({
            evid: 113
        }, params));
    };
    /**
     * @typedef {Object} giftCardCheckoutRemoveCodeParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} giftCardId - null
     * @property {boolean} isMember - null
     **/
    /**
     * Name: gift card checkout -> remove Code. Evid: 536.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * giftCardId - Type: string.
     *
     * isMember - Type: bool.
     * @param {giftCardCheckoutRemoveCodeParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.giftCardCheckoutRemoveCode = function(params) {
        return this.bi.log(__assign({
            evid: 536
        }, params));
    };
    /**
     * @typedef {Object} clickOnBackToPaypalParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} orig_shipping_method - null
     **/
    /**
     * Name: Click on Back to Paypal. Evid: 160.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * orig_shipping_method - Type: string.
     * @param {clickOnBackToPaypalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnBackToPaypal = function(params) {
        return this.bi.log(__assign({
            evid: 160
        }, params));
    };
    /**
     * @typedef {Object} clickToViewCartPageParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - null
     * @property {boolean} isNavigateCart - null
     * @property {boolean} isOwner - null
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     * @property {string} viewMode - null
     **/
    /**
     * Name: Click to view cart page. Evid: 130.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric.
     *
     * isNavigateCart - Type: bool.
     *
     * isOwner - Type: bool.
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     *
     * viewMode - Type: string.
     * @param {clickToViewCartPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickToViewCartPage = function(params) {
        return this.bi.log(__assign({
            evid: 130
        }, params));
    };
    /**
     * @typedef {Object} bisClickOnNotifyMeButtonToOpenModalParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {GUID} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {boolean} eligible - true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
     * @property {string} option - map of strings of the options chosen in the requested item
     * @property {string} origin - product page / quick view / gallery
     **/
    /**
     * Name: BIS - Click on notify me button to open modal. Evid: 25.
     * Event description: When a user clicks on notify me button to open modal.
    if eligible = true, then the modal should open
    if eligible = false, then the button is disabled and the user will get an error..
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: guid. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * eligible - Type: bool. Desc: true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
     *
     * option - Type: string. Desc: map of strings of the options chosen in the requested item
     *
     * origin - Type: string. Desc: product page / quick view / gallery
     * @param {bisClickOnNotifyMeButtonToOpenModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisClickOnNotifyMeButtonToOpenModal = function(params) {
        return this.bi.log(__assign({
            evid: 25
        }, params));
    };
    /**
     * @typedef {Object} clickContinueEWalletModalSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart id
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     * @property {number} itemsCount - Numbers of items in cart
     * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
     * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
     * @property {string} origin - origin
     * @property {string} paymet_providers - array of payment providers connected to the store
     * @property {string} productsList - json containing all product guids for products in the cart
     * @property {string} type - add / edit
     **/
    /**
     * Name: Click Continue e-wallet Modal SF. Evid: 225.
     * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout)..
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart id
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * itemsCount - Type: numeric. Desc: Numbers of items in cart
     *
     * num_of_paymet_providers - Type: numeric. Desc: How many payment providers does the store has connected
     *
     * num_of_shipping - Type: numeric. Desc: number of shipping choices presented to the visitor at the first time
     *
     * origin - Type: string. Desc: origin
     *
     * paymet_providers - Type: string. Desc: array of payment providers connected to the store
     *
     * productsList - Type: string. Desc: json containing all product guids for products in the cart
     *
     * type - Type: string. Desc: add / edit
     * @param {clickContinueEWalletModalSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickContinueEWalletModalSf = function(params) {
        return this.bi.log(__assign({
            evid: 225
        }, params));
    };
    /**
     * @typedef {Object} logoutModalInCheckoutLoadedParams
     * @property {string} appName - null
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} flowType - 'quick flow' / 'full flow'
     * @property {boolean} is_member - null
     * @property {GUID} owner_id - uuid of site owner
     * @property {boolean} savedAddress - true if the member has saved address
     **/
    /**
     * Name: logout modal in checkout loaded. Evid: 602.
     * Event description: logout modal loaded in checkout after member presses logout.
    
     * appName - Type: string.
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * flowType - Type: string. Desc: 'quick flow' / 'full flow'
     *
     * is_member - Type: bool.
     *
     * owner_id - Type: guid. Desc: uuid of site owner
     *
     * savedAddress - Type: bool. Desc: true if the member has saved address
     * @param {logoutModalInCheckoutLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.logoutModalInCheckoutLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 602
        }, params));
    };
    /**
     * @typedef {Object} cancelClickedInSelectYourShippingDestinationPopupSfParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - null
     * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
     * @property {GUID} checkoutId - checkout_id
     **/
    /**
     * Name: cancel clicked in select your shipping destination popup SF. Evid: 126.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid.
     *
     * cartType - Type: string. Desc: Digital/ Physical/ mixed (Digital &Physical)
     *
     * checkoutId - Type: guid. Desc: checkout_id
     * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.cancelClickedInSelectYourShippingDestinationPopupSf = function(params) {
        return this.bi.log(__assign({
            evid: 126
        }, params));
    };
    /**
     * @typedef {Object} errorWhenApplyingACouponParams
     * @property {string} appName - null
     * @property {GUID} cartId - null
     * @property {GUID} checkoutId - checkout_id
     * @property {string} couponCode - null
     * @property {string} errorCode - null
     * @property {boolean} isMember - null
     * @property {boolean} isOwner - null
     * @property {string} origin - null
     * @property {GUID} owner_id - null
     **/
    /**
     * Name: Error when applying a coupon. Evid: 117.
    
    
     * appName - Type: string.
     *
     * cartId - Type: guid.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * couponCode - Type: string.
     *
     * errorCode - Type: string.
     *
     * isMember - Type: bool.
     *
     * isOwner - Type: bool.
     *
     * origin - Type: string.
     *
     * owner_id - Type: guid.
     * @param {errorWhenApplyingACouponParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.errorWhenApplyingACoupon = function(params) {
        return this.bi.log(__assign({
            evid: 117
        }, params));
    };
    /**
     * @typedef {Object} paymentDetailsCompletedParams
     * @property {string} appName - app_name
     * @property {GUID} cartId - cart_id
     * @property {string} cartType - null
     * @property {GUID} checkoutId - checkout_id
     * @property {number} optionscount - number of payment options
     * @property {number} selectedoptionindex - null
     * @property {boolean} isOwner - true if visitor is the site owner
     * @property {string} paymentProvider - payment provider that was chosen
     **/
    /**
     * Name: Payment details completed. Evid: 177.
    
    
     * appName - Type: string. Desc: app_name
     *
     * cartId - Type: guid. Desc: cart_id
     *
     * cartType - Type: string.
     *
     * checkoutId - Type: guid. Desc: checkout_id
     *
     * optionscount - Type: numeric. Desc: number of payment options
     *
     * selectedoptionindex - Type: numeric.
     *
     * isOwner - Type: bool. Desc: true if visitor is the site owner
     *
     * paymentProvider - Type: string. Desc: payment provider that was chosen
     * @param {paymentDetailsCompletedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.paymentDetailsCompleted = function(params) {
        return this.bi.log(__assign({
            evid: 177
        }, params));
    };
    /**
     * @typedef {Object} bisClickOnTheSubmitButtonParams
     * @property {GUID} appId - the app Id of the catalog
     * @property {GUID} catalogInstanceId - In case of stores (store_id)
     * @property {GUID} catalogItemId - The guid of the requested item (product_guid / service_id..)
     * @property {boolean} isEmailValid - true - email is valid and trigger to created a request, false - email is not valid and an error is shown
     * @property {string} options - map of strings of the options chosen in the requested item
     **/
    /**
     * Name: BIS - Click on the submit button. Evid: 26.
     * Event description: When a user clicks on the submit button in 'notify me' modal
    If the input email is valid, then it triggers to create a request on the server.
    if the input email is not valid it will send an error.
    
     * appId - Type: guid. Desc: the app Id of the catalog
     *
     * catalogInstanceId - Type: guid. Desc: In case of stores (store_id)
     *
     * catalogItemId - Type: guid. Desc: The guid of the requested item (product_guid / service_id..)
     *
     * isEmailValid - Type: bool. Desc: true - email is valid and trigger to created a request, false - email is not valid and an error is shown
     *
     * options - Type: string. Desc: map of strings of the options chosen in the requested item
     * @param {bisClickOnTheSubmitButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.bisClickOnTheSubmitButton = function(params) {
        return this.bi.log(__assign({
            evid: 26
        }, params));
    };
    return Logger;
}());
export {
    Logger
};
export default init;
export function getLoggerConf() {
    return {
        src: 130,
        endpoint: 'ec-site',
    };
}
//# sourceMappingURL=index.js.map