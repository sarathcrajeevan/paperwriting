import {
    __assign
} from "tslib";
import {
    includes,
    isEqual,
    cloneDeep
} from 'lodash';
import {
    VariantsGenerator
} from './variantsGenerator';
var ProductOptionsService = /** @class */ (function() {
    function ProductOptionsService(_a) {
        var product = _a.product,
            _b = _a.shouldMutateSelections,
            shouldMutateSelections = _b === void 0 ? true : _b;
        this.variants = [];
        this.selectedVariant = null;
        this.isManagingVariants = product.isManageProductItems;
        this.shouldMutateSelections = shouldMutateSelections;
        this.variants = VariantsGenerator.fromProduct(product);
        this.answers = ProductOptionsService.generateInitialAnswers(product.options);
        this.updateSelections(product, this.answers);
        this.isOutOfStock = !product.isInStock;
    }
    ProductOptionsService.prototype.updateSelections = function(product, answers) {
        this.selectedVariant = this.getSelectedVariant(product, answers);
        if (this.shouldMutateSelections) {
            this.updateVariantsIndications(answers, product.options);
        }
    };
    ProductOptionsService.generateInitialAnswers = function(options) {
        return options.map(function(option) {
            return option.selections.length === 1 ? option.selections[0] : null;
        });
    };
    ProductOptionsService.prototype.getSelectedVariant = function(product, answers) {
        var _a;
        var result = null;
        if (!answers.includes(null)) {
            var answersIds_1 = answers.map(function(x) {
                return x.id;
            });
            var selected = product.productItems.filter(function(variant) {
                return isEqual(variant.optionsSelections, answersIds_1);
            });
            result = selected[0] || null;
            if (Array.isArray((_a = result === null || result === void 0 ? void 0 : result.subscriptionPlans) === null || _a === void 0 ? void 0 : _a.list)) {
                result.subscriptionPlans = result.subscriptionPlans.list.reduce(function(prev, current) {
                    var price = current.price,
                        formattedPrice = current.formattedPrice,
                        pricePerUnit = current.pricePerUnit,
                        formattedPricePerUnit = current.formattedPricePerUnit;
                    prev[current.id] = {
                        price: price,
                        formattedPrice: formattedPrice
                    };
                    if (pricePerUnit && formattedPricePerUnit) {
                        prev[current.id] = __assign(__assign({}, prev[current.id]), {
                            pricePerUnit: pricePerUnit,
                            formattedPricePerUnit: formattedPricePerUnit
                        });
                    }
                    return prev;
                }, {});
            }
        }
        return result;
    };
    /**
     * @deprecated
     */
    ProductOptionsService.prototype.updateVariantsIndications = function(answers, options) {
        var _this = this;
        var answersIds = answers.map(function(answer) {
            return (answer !== null ? answer.id : null);
        });
        options.forEach(function(option, optionIndex) {
            option.selections.forEach(function(optionSelection) {
                var modifiedAnswers = _this.getAnswersIdsLikeTheCurrentIsSelected(answersIds, optionIndex, optionSelection);
                optionSelection.isDisabled = !_this.hasInStock(modifiedAnswers);
                optionSelection.isVisible = _this.hasVisible(modifiedAnswers);
            });
        });
    };
    ProductOptionsService.prototype.getAnswersIdsLikeTheCurrentIsSelected = function(answersIds, optionIndex, optionSelection) {
        var modifiedAnswers = cloneDeep(answersIds);
        modifiedAnswers[optionIndex] = optionSelection.id;
        modifiedAnswers = modifiedAnswers.filter(function(answerId) {
            return answerId !== null;
        });
        return modifiedAnswers;
    };
    ProductOptionsService.prototype.hasVisible = function(answers) {
        if (this.isManagingVariants) {
            return this.variants.some(function(variant) {
                return variant.isVisible && answers.every(function(id) {
                    return includes(variant.optionsSelections, id);
                });
            });
        } else {
            return true;
        }
    };
    ProductOptionsService.prototype.hasInStock = function(answers) {
        if (this.isManagingVariants) {
            return this.variants.some(function(variant) {
                return variant.inventory.status === 'in_stock' && answers.every(function(id) {
                    return includes(variant.optionsSelections, id);
                });
            });
        } else {
            return !this.isOutOfStock;
        }
    };
    return ProductOptionsService;
}());
export {
    ProductOptionsService
};
//# sourceMappingURL=ProductOptionsService.js.map