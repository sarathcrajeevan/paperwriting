import {
    fill,
    isEqual,
    merge
} from 'lodash';
import {
    ProductInventoryStatus
} from '../types/product';
export var VariantsGenerator = {
    fromProduct: function(product) {
        var optionSelectionVariants;
        if (product.isManageProductItems) {
            optionSelectionVariants = VariantsGenerator.generateDefaultVariants(product);
            VariantsGenerator.applyManagedItems(optionSelectionVariants, product);
        } else {
            optionSelectionVariants = [];
        }
        return optionSelectionVariants;
    },
    generateDefaultVariants: function(product) {
        var optionSelectionVariants = [];
        var options = product.options;
        var indexArray = fill(Array(options.length), 0);
        var isFinished = false;
        while (!isFinished) {
            optionSelectionVariants.push(VariantsGenerator.getOptionSelectionVariant(indexArray, options, product));
            isFinished = VariantsGenerator.updateIndexArray(indexArray, options);
        }
        return optionSelectionVariants;
    },
    getOptionSelectionVariant: function(indexArray, options, product) {
        var newSelectionArray = [];
        for (var i = 0; i < options.length; i++) {
            newSelectionArray.push(options[i].selections[indexArray[i]].id);
        }
        return VariantsGenerator.getOptionSelectionVariantObject(newSelectionArray, product);
    },
    updateIndexArray: function(indexArray, options) {
        for (var i = indexArray.length - 1; i >= 0; i--) {
            indexArray[i]++;
            if (indexArray[i] >= options[i].selections.length) {
                indexArray[i] = 0;
            } else {
                return false;
            }
        }
        return true;
    },
    getOptionSelectionVariantObject: function(selectionOption, product) {
        return {
            optionsSelections: selectionOption,
            isVisible: true,
            price: product.price,
            formattedPrice: product.formattedPrice,
            sku: product.sku,
            inventory: {
                status: ProductInventoryStatus.IN_STOCK,
                quantity: 0,
            },
            surcharge: 0,
        };
    },
    applyManagedItems: function(optionSelectionVariants, product) {
        product.productItems.forEach(function(item) {
            var optionSelection = optionSelectionVariants.filter(function(option) {
                return isEqual(option.optionsSelections, item.optionsSelections);
            })[0];
            if (optionSelection) {
                merge(optionSelection, item);
            }
        });
        if (product.isTrackingInventory) {
            optionSelectionVariants
                .filter(function(variant) {
                    return variant.inventory.quantity <= 0;
                })
                .forEach(function(variant) {
                    return (variant.inventory.status = ProductInventoryStatus.OUT_OF_STOCK);
                });
        }
    },
};
//# sourceMappingURL=variantsGenerator.js.map