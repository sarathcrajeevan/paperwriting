var SeoProductBuilder = /** @class */ (function() {
    function SeoProductBuilder(product, storeInfo) {
        this.data = {};
        this.data.additionalInfoSections = this.getAdditionalInfo(product.additionalInfo);
        this.data.customTextFields = this.getCustomTextFields(product.customTextFields);
        this.data.description = this.getDescription(product.description);
        this.data.discount = this.getDiscount(product.discount);
        this.data.id = product.id;
        this.data.manageVariants = product.isManageProductItems;
        this.data.media = this.getMedia(product.media);
        this.data.name = product.name;
        this.data.numericId = product.createVersion;
        this.data.price = this.getPrice(product);
        this.data.productOptions = this.getProductOptions(product.options);
        this.data.productPageUrl = this.getPageUrl(product.pageUrl, storeInfo.productPageBaseUrl);
        this.data.productType = product.productType;
        this.data.productType = product.productType;
        this.data.ribbons = [{
            text: product.ribbon
        }];
        this.data.brand = product.brand;
        this.data.sku = product.sku;
        this.data.slug = product.urlPart;
        this.data.stock = this.getStock(product);
        this.data.visible = product.isVisible;
        this.data.weight = product.weight;
    }
    SeoProductBuilder.prototype.getDescription = function(description) {
        description = this.getDefaultValueIfNotDefined(description, '');
        return description.replace(/<(?:.|\n)*?>/gm, '').replace(/&nbsp;/gm, ' ');
    };
    SeoProductBuilder.prototype.getDefaultValueIfNotDefined = function(propValue, defaultValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
            return defaultValue;
        }
        return propValue;
    };
    SeoProductBuilder.prototype.getStock = function(product) {
        return {
            inStock: product.isInStock,
            quantity: product.inventory ? product.inventory.quantity : 0,
            trackInventory: product.isTrackingInventory,
        };
    };
    SeoProductBuilder.prototype.getPageUrl = function(pageUrl, baseUrl) {
        return {
            base: baseUrl,
            path: pageUrl,
        };
    };
    SeoProductBuilder.prototype.getProductOptions = function(options) {
        var _this = this;
        options = this.getDefaultValueIfNotDefined(options, []);
        return options.map(function(option) {
            return ({
                name: option.title,
                optionType: option.optionType,
                choices: _this.getDefaultValueIfNotDefined(option.selections, []).map(function(selection) {
                    return ({
                        description: selection.description,
                        inStock: true,
                        media: _this.getMedia(selection.linkedMediaItems, false),
                        value: selection.value,
                        visible: true,
                    });
                }),
            });
        });
    };
    SeoProductBuilder.prototype.getPrice = function(product) {
        var price = product.price,
            currency = product.currency,
            comparePrice = product.comparePrice,
            formattedPrice = product.formattedPrice,
            formattedComparePrice = product.formattedComparePrice;
        return {
            price: price,
            currency: currency,
            discountedPrice: comparePrice,
            formatted: {
                price: formattedPrice,
                discountedPrice: formattedComparePrice,
            },
        };
    };
    SeoProductBuilder.prototype.getDiscount = function(discount) {
        discount = this.getDefaultValueIfNotDefined(discount, {});
        var value = discount.value,
            type = discount.mode;
        return {
            type: type,
            value: value
        };
    };
    SeoProductBuilder.prototype.getMedia = function(media, sort) {
        if (sort === void 0) {
            sort = true;
        }
        media = this.getDefaultValueIfNotDefined(media, []);
        var items = media
            .sort(function(a, b) {
                return (sort ? a.index - b.index : 0);
            })
            .map(function(_a) {
                var id = _a.id,
                    height = _a.height,
                    width = _a.width,
                    fullUrl = _a.fullUrl,
                    mediaType = _a.mediaType,
                    title = _a.title,
                    altText = _a.altText,
                    videoFiles = _a.videoFiles,
                    thumbnailFullUrl = _a.thumbnailFullUrl;
                return {
                    id: id,
                    image: {
                        height: height,
                        width: width,
                        url: fullUrl,
                        alt: altText,
                    },
                    mediaType: mediaType,
                    thumbnail: {
                        height: 50,
                        width: 50,
                        url: thumbnailFullUrl || fullUrl,
                        alt: altText,
                    },
                    title: title,
                    video: {
                        files: videoFiles ?
                            videoFiles.map(function(video) {
                                return ({
                                    url: video.url,
                                    height: video.height,
                                    width: video.width
                                });
                            }) :
                            [],
                    },
                };
            });
        return {
            items: items,
            mainMedia: items[0],
        };
    };
    SeoProductBuilder.prototype.getAdditionalInfo = function(additionalInfo) {
        additionalInfo = this.getDefaultValueIfNotDefined(additionalInfo, []);
        return additionalInfo.map(function(_a) {
            var description = _a.description,
                title = _a.title;
            return ({
                description: description,
                title: title
            });
        });
    };
    SeoProductBuilder.prototype.getCustomTextFields = function(customTextFields) {
        customTextFields = this.getDefaultValueIfNotDefined(customTextFields, []);
        return customTextFields.map(function(_a) {
            var isMandatory = _a.isMandatory,
                inputLimit = _a.inputLimit,
                title = _a.title;
            return ({
                mandatory: isMandatory,
                maxLength: inputLimit,
                title: title,
            });
        });
    };
    SeoProductBuilder.prototype.get = function() {
        return this.data;
    };
    return SeoProductBuilder;
}());
export {
    SeoProductBuilder
};
//# sourceMappingURL=SeoItemData.builder.js.map