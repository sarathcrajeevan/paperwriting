"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.couponMapper = void 0;
var utils_1 = require("../utils");
var defenitions_1 = require("../defenitions");
var getDisplayData = function(displayDataDTO) {
    return displayDataDTO ?
        {
            name: displayDataDTO.name,
            formattedPrice: displayDataDTO.formattedPrice,
            mediaItem: displayDataDTO.mediaItem ? displayDataDTO.mediaItem.url : undefined,
        } :
        null;
};
var getCouponTypeValue = function(specification) {
    switch (specification.type) {
        case defenitions_1.CouponType.BuyXGetY:
            return {
                buyXGetY: specification.buyXGetY,
            };
        case defenitions_1.CouponType.FixedPrice:
            return {
                fixedPriceAmount: specification.fixedPriceAmount,
            };
        case defenitions_1.CouponType.PercentOff:
            return {
                percentOffRate: specification.percentOffRate,
            };
        case defenitions_1.CouponType.MoneyOff:
            return {
                moneyOffAmount: specification.moneyOffAmount,
            };
        case defenitions_1.CouponType.FreeShipping:
            return {
                freeShipping: specification.freeShipping,
            };
    }
};
exports.couponMapper = function(couponDTO, shouldConvertDbDriverDate) {
    if (shouldConvertDbDriverDate === void 0) {
        shouldConvertDbDriverDate = true;
    }
    var coupon = {
        _id: couponDTO.id,
        name: couponDTO.specification.name,
        code: couponDTO.specification.code,
        startTime: shouldConvertDbDriverDate ?
            utils_1.createWixCodeDateTimeObject.fromTimestamp(couponDTO.specification.startTime) :
            utils_1.isoDateFromTimestamp(couponDTO.specification.startTime),
        expirationTime: shouldConvertDbDriverDate ?
            utils_1.createWixCodeDateTimeObject.fromTimestamp(couponDTO.specification.expirationTime) :
            utils_1.isoDateFromTimestamp(couponDTO.specification.expirationTime),
        usageLimit: couponDTO.specification.usageLimit,
        limitPerCustomer: couponDTO.specification.limitPerCustomer,
        appliesToSubscriptions: couponDTO.specification.appliesToSubscriptions,
        active: !!couponDTO.specification.active,
        minimumSubtotal: couponDTO.specification.minimumSubtotal,
        scope: couponDTO.specification.scope,
        _dateCreated: shouldConvertDbDriverDate ?
            utils_1.createWixCodeDateTimeObject.fromTimestamp(couponDTO.dateCreated) :
            utils_1.isoDateFromTimestamp(couponDTO.dateCreated),
        numberOfUsages: couponDTO.numberOfUsages,
        expired: !!couponDTO.expired,
        displayData: getDisplayData(couponDTO.displayData),
        limitedToOneItem: !!couponDTO.specification.limitedToOneItem,
        type: couponDTO.specification.type,
        appId: couponDTO.appId,
    };
    return __assign(__assign({}, coupon), getCouponTypeValue(couponDTO.specification));
};
//# sourceMappingURL=coupons.mapper.js.map