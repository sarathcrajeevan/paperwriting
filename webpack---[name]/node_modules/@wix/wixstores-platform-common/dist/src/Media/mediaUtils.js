"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.types = exports.errors = exports.parseMediaItemUri = exports.isValidMediaItemUri = void 0;
var types = {
    IMAGE: 'image',
    DOCUMENT: 'document',
    VIDEO: 'video',
    AUDIO: 'audio',
    VECTOR: 'vector',
};
exports.types = types;
var errors = {
    empty_media_id: 'empty_media_id',
    empty_poster_id: 'empty_poster_id',
    bad_media_id: 'bad_media_id',
    unknown_media_type: 'unknown_media_type',
    missing_width_height: 'missing_width_height',
    non_string_media_id: 'non_string_media_id',
};
exports.errors = errors;
var matchers = {
    vector: /^wix:vector:\/\/v1\/([^\/]+)\/([^\/]*)$/,
    image: /^wix:image:\/\/v1\/([^\/]+)\/([^\/]+)#originWidth=([0-9]+)&originHeight=([0-9]+)(?:&watermark=([^\/]+))?$/,
    document: /^wix:document:\/\/v1\/([^\/]+)\/([^\/]+)$/,
    video: /^wix:video:\/\/v1\/([^\/]+)\/([^\/]+)#posterUri=([^\/]+)&posterWidth=([0-9]+)&posterHeight=([0-9]+)$/,
    audio: /^wix:audio:\/\/v1\/([^\/]+)\/([^\/]+)#duration=([0-9]+)$/,
    deprecated_video: /^wix:video:\/\/v1\/([^\/]+)\/([^\/]+)\/#posterUri=([^\/]+)&posterWidth=([0-9]+)&posterHeight=([0-9]+)$/,
    deprecated_image: /^image:\/\/v1\/([^\/]+)\/([0-9]+)_([0-9]+)\/([^\/]*)$/,
    deprecated_type: /^(image):/,
    type: /^wix:(\w+):/,
    splitExtension: /\.(?=[^.]+$)/,
    emptyTitle: /^_\./,
};
var matchersByType = {
    vector: [matchers.vector],
    image: [matchers.image, matchers.deprecated_image],
    document: [matchers.document],
    video: [matchers.video, matchers.deprecated_video],
    audio: [matchers.audio],
};
/**
 * return filename or an empty string
 */
function convertFilenameToTitle(filename) {
    return matchers.emptyTitle.test(filename) ? '' : decodeURI(filename);
}
/**
 * Parse an image MediaItem
 */
function parseImageItem(item) {
    var _a = item.match(matchers.image) || [],
        mediaId = _a[1],
        filename = _a[2],
        width = _a[3],
        height = _a[4],
        watermark = _a[5];
    var title = convertFilenameToTitle(filename);
    if (mediaId) {
        var parsed = {
            type: types.IMAGE,
            mediaId: mediaId,
            title: title,
            width: parseInt(width, 10),
            height: parseInt(height, 10),
            watermark: watermark,
        };
        return parsed;
    }
    return {
        error: errors.bad_media_id
    };
}

function parseDeprecatedImageItem(item) {
    var _a = item.match(matchers.deprecated_image) || [],
        mediaId = _a[1],
        width = _a[2],
        height = _a[3],
        filename = _a[4];
    var title = convertFilenameToTitle(filename);
    if (mediaId) {
        return {
            type: types.IMAGE,
            mediaId: mediaId,
            title: title,
            width: parseInt(width, 10),
            height: parseInt(height, 10),
        };
    }
    return {
        error: errors.bad_media_id
    };
}
/**
 * Parse a document MediaItem
 */
function parseDocumentItem(item) {
    var _a = item.match(matchers.document) || [],
        mediaId = _a[1],
        filename = _a[2];
    var title = convertFilenameToTitle(filename);
    if (mediaId) {
        return {
            type: types.DOCUMENT,
            mediaId: mediaId,
            title: title,
        };
    }
    return {
        error: errors.bad_media_id
    };
}
/**
 * Parse a vector MediaItem
 */
function parseVectorItem(item) {
    var _a = item.match(matchers.vector) || [],
        mediaId = _a[1],
        filename = _a[2];
    var title = convertFilenameToTitle(filename);
    if (mediaId) {
        return {
            type: types.VECTOR,
            mediaId: mediaId,
            title: title,
        };
    }
    return {
        error: errors.bad_media_id
    };
}
/**
 * Parse a video MediaItem
 */
function parseVideoItem(item) {
    var videoMatcher = matchers.deprecated_video.test(item) ? matchers.deprecated_video : matchers.video;
    var _a = item.match(videoMatcher) || [],
        mediaId = _a[1],
        filename = _a[2],
        posterId = _a[3],
        width = _a[4],
        height = _a[5];
    var title = convertFilenameToTitle(filename);
    if (mediaId && posterId) {
        return {
            type: types.VIDEO,
            mediaId: mediaId,
            posterId: posterId,
            width: parseInt(width, 10),
            height: parseInt(height, 10),
            title: title,
        };
    }
    return {
        error: errors.bad_media_id
    };
}
/**
 * Parse a audio MediaItem
 */
function parseAudioItem(item) {
    var _a = item.match(matchers.audio) || [],
        mediaId = _a[1],
        filename = _a[2],
        duration = _a[3];
    var title = convertFilenameToTitle(filename);
    if (mediaId) {
        return {
            type: types.AUDIO,
            mediaId: mediaId,
            title: title,
            duration: parseInt(duration, 10),
        };
    }
    return {
        error: errors.bad_media_id
    };
}
/**
 * Parse a media item url of one of the supported types
 */
function parseMediaItemUri(mediaItemUri) {
    if (mediaItemUri === void 0) {
        mediaItemUri = '';
    }
    if (typeof mediaItemUri !== 'string') {
        return {
            error: errors.non_string_media_id
        };
    }
    var _a = mediaItemUri.match(matchers.type) || [],
        type = _a[1];
    switch (type) {
        case types.IMAGE:
            return parseImageItem(mediaItemUri);
        case types.DOCUMENT:
            return parseDocumentItem(mediaItemUri);
        case types.VECTOR:
            return parseVectorItem(mediaItemUri);
        case types.VIDEO:
            return parseVideoItem(mediaItemUri);
        case types.AUDIO:
            return parseAudioItem(mediaItemUri);
        default:
            var _b = mediaItemUri.match(matchers.deprecated_type) || [],
                deprecatedType = _b[1];
            if (deprecatedType) {
                return parseDeprecatedImageItem(mediaItemUri);
            }
            return {
                error: errors.unknown_media_type
            };
    }
}
exports.parseMediaItemUri = parseMediaItemUri;
/**
 * Checks if a given url is a valid media item url
 */
function isValidMediaItemUri(mediaItemUri, type) {
    if (mediaItemUri === void 0) {
        mediaItemUri = '';
    }
    var typeMatchers = matchersByType[type];
    return typeMatchers && typeMatchers.some(function(matcher) {
        return matcher.test(mediaItemUri);
    });
}
exports.isValidMediaItemUri = isValidMediaItemUri;
//# sourceMappingURL=mediaUtils.js.map