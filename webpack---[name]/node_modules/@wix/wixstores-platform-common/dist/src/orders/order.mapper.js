"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createOrderParamsMapper = exports.orderMapperDbDriver = exports.orderMapper = void 0;
var mappers_1 = require("./../products/mappers");
var mappers_2 = require("../products/mappers");
var utils_1 = require("../utils");
var address_utils_1 = require("../address-utils");
var buildBillingInfo = function(billingInfoDTO) {
    var address = billingInfoDTO.address;
    var addressFields = null;
    if (address) {
        addressFields = __assign(__assign({
            address: address_utils_1.createWixCodeAddressObject(address)
        }, (address.fullName ? address.fullName : {})), {
            email: address.email,
            phone: address.phone,
            company: address.company,
            vatId: address.vatId
        });
        if (addressFields.address && addressFields.address.formatted === '') {
            delete addressFields.address;
        }
    }
    var billingInfo = __assign(__assign({}, addressFields), {
        externalTransactionId: billingInfoDTO.externalTransactionId,
        paidDate: billingInfoDTO.paidDate,
        paymentMethod: billingInfoDTO.paymentMethod,
        paymentGatewayTransactionId: billingInfoDTO.paymentGatewayTransactionId,
        paymentProviderTransactionId: billingInfoDTO.paymentProviderTransactionId
    });
    return billingInfo;
};

function mapAddressFlatToAddressDto(address, billingInfo) {
    return {
        fullName: {
            firstName: billingInfo.firstName,
            lastName: billingInfo.lastName,
        },
        country: address.country,
        subdivision: address.subdivision,
        city: address.city,
        zipCode: address.postalCode,
        company: billingInfo.company,
        phone: billingInfo.phone,
        email: billingInfo.email,
        addressLine1: address.addressLine,
        addressLine2: address.addressLine2,
        street: address.streetAddress,
        vatId: billingInfo.vatId,
    };
}
var buildCreateOrderParamsBillingInfo = function(billingInfo) {
    var address = billingInfo.address;
    return {
        address: address ? mapAddressFlatToAddressDto(address, billingInfo) : null,
        externalTransactionId: billingInfo.externalTransactionId,
        paidDate: billingInfo.paidDate,
        paymentMethod: billingInfo.paymentMethod,
        paymentGatewayTransactionId: billingInfo.paymentGatewayTransactionId,
        paymentProviderTransactionId: billingInfo.paymentProviderTransactionId,
    };
};
var omitShippingInfoAddressIfEmpty = function(shippingInfo) {
    if (shippingInfo.shipmentDetails &&
        shippingInfo.shipmentDetails.address &&
        shippingInfo.shipmentDetails.address.formatted === '') {
        delete shippingInfo.shipmentDetails.address.formatted;
    }
    if (shippingInfo.pickupDetails &&
        shippingInfo.pickupDetails.pickupAddress &&
        shippingInfo.pickupDetails.pickupAddress.formatted === '') {
        delete shippingInfo.pickupDetails.pickupAddress;
    }
    return shippingInfo;
};
var getPickupDetails = function(pickupDetailsDTO) {
    if (!pickupDetailsDTO) {
        return null;
    }
    var pickupDetails = {
        pickupInstructions: pickupDetailsDTO.pickupInstructions,
        pickupAddress: address_utils_1.createWixCodeAddressObject(pickupDetailsDTO.pickupAddress),
        firstName: null,
        lastName: null,
        email: null,
        phone: null,
    };
    var buyerDetailsDTO = pickupDetailsDTO.buyerDetails;
    if (buyerDetailsDTO) {
        pickupDetails.firstName = buyerDetailsDTO.fullName.firstName;
        pickupDetails.lastName = buyerDetailsDTO.fullName.lastName;
        pickupDetails.email = buyerDetailsDTO.email;
        pickupDetails.phone = buyerDetailsDTO.phone;
    }
    return pickupDetails;
};
var buildShippingInfo = function(shippingInfoDTO) {
    var pickupDetails = shippingInfoDTO.pickupDetails,
        shipmentDetails = shippingInfoDTO.shipmentDetails,
        deliveryOption = shippingInfoDTO.deliveryOption,
        estimatedDeliveryTime = shippingInfoDTO.estimatedDeliveryTime,
        deliverUntil = shippingInfoDTO.deliverUntil,
        shippingRegion = shippingInfoDTO.shippingRegion;
    var shippingInfo = {
        deliveryOption: deliveryOption,
        estimatedDeliveryTime: estimatedDeliveryTime,
        shippingRegion: shippingRegion,
        shipmentDetails: shipmentDetails && shipmentDetails.address ?
            __assign(__assign({
                address: address_utils_1.createWixCodeAddressObject(shipmentDetails.address)
            }, (shipmentDetails.address.fullName ? shipmentDetails.address.fullName : {})), {
                email: shipmentDetails.address.email,
                phone: shipmentDetails.address.phone,
                company: shipmentDetails.address.company,
                vatId: shipmentDetails.address.vatId,
                tax: getNumber(shipmentDetails.tax),
                discount: getNumber(shipmentDetails.discount),
                priceData: shipmentDetails.priceData ?
                    {
                        price: getNumber(shipmentDetails.priceData.price),
                        taxIncludedInPrice: shipmentDetails.priceData.taxIncludedInPrice,
                    } :
                    null
            }) : null,
        pickupDetails: pickupDetails ? getPickupDetails(pickupDetails) : null,
        deliverByDate: deliverUntil,
    };
    return omitShippingInfoAddressIfEmpty(shippingInfo);
};
var buildCreateOrderParamsShippingInfo = function(shippingInfoDTO) {
    var shipmentDetails = shippingInfoDTO.shipmentDetails,
        pickupDetails = shippingInfoDTO.pickupDetails;
    return {
        deliveryOption: shippingInfoDTO.deliveryOption,
        estimatedDeliveryTime: shippingInfoDTO.estimatedDeliveryTime,
        deliverUntil: shippingInfoDTO.deliverByDate,
        shippingRegion: shippingInfoDTO.shippingRegion,
        shipmentDetails: shipmentDetails ?
            {
                address: mapAddressFlatToAddressDto(shipmentDetails.address, shippingInfoDTO.shipmentDetails),
                discount: utils_1.getString(shipmentDetails.discount),
                tax: utils_1.getString(shipmentDetails.tax),
                priceData: shipmentDetails.priceData ?
                    {
                        price: utils_1.getString(shipmentDetails.priceData.price),
                        taxIncludedInPrice: shipmentDetails.priceData.taxIncludedInPrice,
                    } :
                    null,
            } :
            null,
        pickupDetails: pickupDetails ?
            {
                buyerDetails: {
                    fullName: {
                        firstName: pickupDetails.firstName,
                        lastName: pickupDetails.lastName,
                    },
                    email: pickupDetails.email,
                    phone: pickupDetails.phone,
                },
                pickupAddress: pickupDetails.pickupAddress ?
                    {
                        addressLine1: pickupDetails.pickupAddress.addressLine,
                        city: pickupDetails.pickupAddress.city,
                        country: pickupDetails.pickupAddress.country,
                        subdivision: pickupDetails.pickupAddress.subdivision,
                        zipCode: pickupDetails.pickupAddress.postalCode,
                    } :
                    null,
                pickupInstructions: pickupDetails.pickupInstructions,
            } :
            null,
    };
};
var buildLineItems = function(lineItems) {
    return (lineItems || []).map(function(lineItemDTO) {
        var mediaItem = null;
        if (lineItemDTO.mediaItem) {
            var fulMediaItem = {
                id: null,
                mediaType: lineItemDTO.mediaItem.mediaType,
                thumbnail: {
                    height: lineItemDTO.mediaItem.height,
                    url: lineItemDTO.mediaItem.url,
                    width: lineItemDTO.mediaItem.width,
                },
                title: '',
                image: {
                    height: lineItemDTO.mediaItem.height,
                    url: lineItemDTO.mediaItem.url,
                    width: lineItemDTO.mediaItem.width,
                },
            };
            mediaItem = {
                altText: lineItemDTO.mediaItem.altText,
                id: lineItemDTO.mediaItem.mediaId,
                src: mappers_2.buildImageUrl(fulMediaItem),
                type: lineItemDTO.mediaItem.mediaType,
            };
        }
        return __assign(__assign({}, lineItemDTO), {
            mediaItem: mediaItem,
            price: getNumber(lineItemDTO.price),
            totalPrice: getNumber(lineItemDTO.totalPrice),
            weight: getNumber(lineItemDTO.weight),
            discount: getNumber(lineItemDTO.discount),
            tax: getNumber(lineItemDTO.tax),
            priceData: lineItemDTO.priceData ?
                {
                    price: getNumber(lineItemDTO.priceData.price),
                    totalPrice: getNumber(lineItemDTO.priceData.totalPrice),
                    taxIncludedInPrice: lineItemDTO.priceData.taxIncludedInPrice,
                } :
                null
        });
    });
};
var buildCreateOrderParamsLineItems = function(lineItems) {
    return lineItems.map(function(item) {
        return __assign(__assign({}, item), {
            mediaItem: item.mediaItem ?
                __assign({
                    altText: item.mediaItem.altText
                }, mappers_1.getCreateOrderMediaSrc(item.mediaItem.src)) : null,
            price: utils_1.getString(item.price),
            totalPrice: utils_1.getString(item.totalPrice),
            weight: utils_1.getString(item.weight),
            discount: utils_1.getString(item.discount),
            tax: utils_1.getString(item.tax),
            priceData: item.priceData ?
                {
                    price: utils_1.getString(item.priceData.price),
                    totalPrice: utils_1.getString(item.priceData.totalPrice),
                    taxIncludedInPrice: item.priceData.taxIncludedInPrice,
                } :
                null
        });
    });
};
var buildTotals = function(totals) {
    return {
        discount: getNumber(totals.discount),
        quantity: totals.quantity,
        shipping: getNumber(totals.shipping),
        subtotal: getNumber(totals.subtotal),
        tax: getNumber(totals.tax),
        total: getNumber(totals.total),
        weight: getNumber(totals.weight),
    };
};
var buildCreateOrderParamsTotals = function(totals) {
    return {
        discount: utils_1.getString(totals.discount),
        quantity: totals.quantity,
        shipping: utils_1.getString(totals.shipping),
        subtotal: utils_1.getString(totals.subtotal),
        tax: utils_1.getString(totals.tax),
        total: utils_1.getString(totals.total),
        weight: utils_1.getString(totals.weight),
    };
};
var getNumber = function(string, defaultValue) {
    if (defaultValue === void 0) {
        defaultValue = 0;
    }
    var number = Number(string);
    return isNaN(number) ? defaultValue : number;
};
var buildRefunds = function(refunds) {
    return refunds === null || refunds === void 0 ? void 0 : refunds.map(function(item) {
        return ({
            id: item.id,
            dateCreated: item.dateCreated,
            amount: item.amount,
            externalRefund: item.externalRefund,
            paymentProviderTransactionId: item.paymentProviderTransactionId,
            reason: item.reason,
        });
    });
};
exports.orderMapper = function(orderDTO) {
    return {
        _id: orderDTO.id,
        _updatedDate: orderDTO.lastUpdated,
        buyerLanguage: orderDTO.buyerLanguage,
        cartId: orderDTO.cartId,
        channelInfo: orderDTO.channelInfo,
        enteredBy: orderDTO.enteredBy,
        refunds: buildRefunds(orderDTO.refunds),
        billingInfo: buildBillingInfo(orderDTO.billingInfo),
        buyerInfo: orderDTO.buyerInfo,
        buyerNote: orderDTO.buyerNote,
        _dateCreated: orderDTO.dateCreated,
        currency: orderDTO.currency,
        fulfillmentStatus: orderDTO.fulfillmentStatus,
        archived: orderDTO.archived,
        activities: orderDTO.activities,
        number: getNumber(orderDTO.number),
        paymentStatus: orderDTO.paymentStatus,
        shippingInfo: orderDTO.shippingInfo ? buildShippingInfo(orderDTO.shippingInfo) : null,
        lineItems: buildLineItems(orderDTO.lineItems),
        totals: buildTotals(orderDTO.totals),
        weightUnit: orderDTO.weightUnit,
        customField: orderDTO.customField,
        fulfillments: orderDTO.fulfillments,
        discount: orderDTO.discount ?
            {
                appliedCoupon: orderDTO.discount.appliedCoupon,
            } :
            null,
        subscriptionInfo: orderDTO.subscriptionInfo,
    };
};
exports.orderMapperDbDriver = function(orderDTO) {
    return __assign(__assign({}, exports.orderMapper(orderDTO)), {
        _updatedDate: utils_1.createWixCodeDateTimeObject.fromISODate(orderDTO.lastUpdated),
        _dateCreated: utils_1.createWixCodeDateTimeObject.fromISODate(orderDTO.dateCreated)
    });
};
exports.createOrderParamsMapper = function(orderDTO) {
    return __assign(__assign({}, orderDTO), {
        buyerLanguage: orderDTO.buyerLanguage,
        cartId: orderDTO.cartId,
        channelInfo: orderDTO.channelInfo,
        billingInfo: orderDTO.billingInfo ? buildCreateOrderParamsBillingInfo(orderDTO.billingInfo) : null,
        buyerInfo: orderDTO.buyerInfo,
        buyerNote: orderDTO.buyerNote,
        paymentStatus: orderDTO.paymentStatus,
        shippingInfo: orderDTO.shippingInfo ? buildCreateOrderParamsShippingInfo(orderDTO.shippingInfo) : null,
        lineItems: buildCreateOrderParamsLineItems(orderDTO.lineItems),
        totals: buildCreateOrderParamsTotals(orderDTO.totals),
        customField: orderDTO.customField
    });
};
//# sourceMappingURL=order.mapper.js.map