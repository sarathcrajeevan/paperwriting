var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import * as fetchPonyfill from 'fetch-ponyfill';
import {
    Scope
} from './domain';
import {
    HttpError
} from './errors';
var fetch = fetchPonyfill().fetch;
var HttpApiClient = /** @class */ (function() {
    function HttpApiClient(apiUrl) {
        this.apiUrl = apiUrl.replace(/\/$/, '');
    }
    HttpApiClient.prototype.get = function(signedInstance, externalId, scope) {
        return __awaiter(this, void 0, void 0, function() {
            var url, json;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        url = this.apiUrl + "/v1/settings?external_" + scope.toLowerCase() + "_id=" + externalId;
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            method: 'GET'
                        })];
                    case 1:
                        json = _a.sent();
                        return [2 /*return*/ , scope === Scope.APP ? json.appSettings : json.componentSettings];
                }
            });
        });
    };
    HttpApiClient.prototype.set = function(signedInstance, externalId, scope, data) {
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        url = this.apiUrl + "/v1/settings/" + scope + "/" + externalId;
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            requestBody: {
                                data: data
                            },
                            method: 'PUT'
                        })];
                    case 1:
                        return [2 /*return*/ , _a.sent()];
                }
            });
        });
    };
    HttpApiClient.prototype.update = function(signedInstance, externalId, scope, data) {
        return __awaiter(this, void 0, void 0, function() {
            var url, _a, fields, sanitizedData, requestBody, newExternalId;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        url = this.apiUrl + "/v1/settings/" + scope + "/" + externalId;
                        _a = buildForUpdate(data), fields = _a.fields, sanitizedData = _a.sanitizedData;
                        requestBody = {
                            data: sanitizedData,
                            fields: fields
                        };
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            requestBody: requestBody,
                            method: 'PATCH'
                        })];
                    case 1:
                        newExternalId = (_b.sent()).newExternalId;
                        return [2 /*return*/ , newExternalId];
                }
            });
        });
    };
    HttpApiClient.prototype.requestJson = function(_a) {
        var signedInstance = _a.signedInstance,
            _b = _a.method,
            method = _b === void 0 ? 'GET' : _b,
            requestBody = _a.requestBody,
            url = _a.url;
        return __awaiter(this, void 0, void 0, function() {
            var additionalHeaders, response;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        additionalHeaders = signedInstance ? {
                            Authorization: signedInstance
                        } : {};
                        return [4 /*yield*/ , fetch(url, {
                            method: method,
                            body: JSON.stringify(requestBody),
                            headers: __assign({
                                'Content-Type': 'application/json'
                            }, additionalHeaders)
                        })];
                    case 1:
                        response = _c.sent();
                        if (!response.ok) {
                            throw new HttpError(url, response.status);
                        }
                        return [4 /*yield*/ , response.json()];
                    case 2:
                        return [2 /*return*/ , _c.sent()];
                }
            });
        });
    };
    return HttpApiClient;
}());

function buildForUpdate(data) {
    var cloned = __assign({}, data);
    var fields = Object.keys(cloned);
    Object.keys(cloned).forEach(function(key) {
        (cloned[key] === null || cloned[key] === undefined) && delete cloned[key];
    });
    return {
        fields: fields,
        sanitizedData: cloned
    };
}
export {
    HttpApiClient
};
//# sourceMappingURL=http-api-client.js.map