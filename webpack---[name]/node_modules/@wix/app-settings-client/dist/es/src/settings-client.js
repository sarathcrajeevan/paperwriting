var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import idGenerator from './utils/generate-id';
import {
    delay
} from './utils/delay';
import {
    HttpError
} from './errors';
var SettingsClient = /** @class */ (function() {
    function SettingsClient(_a) {
        var apiClient = _a.apiClient,
            scope = _a.scope,
            adapter = _a.adapter,
            data = _a.data,
            _b = _a.generateId,
            generateId = _b === void 0 ? idGenerator : _b,
            _c = _a.wait,
            wait = _c === void 0 ? delay : _c;
        this.firstTime = true;
        this.apiClient = apiClient;
        this.scope = scope;
        this.adapter = adapter;
        this.data = data;
        this.generateId = generateId;
        this.instance = adapter.signedInstance;
        this.queue = [];
        this.wait = wait;
    }
    SettingsClient.prototype.getAll = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.get()];
                    case 1:
                        return [2 /*return*/ , _a.sent()];
                }
            });
        });
    };
    SettingsClient.prototype.get = function(key) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.loadData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ , key ? this.data[key] : this.data];
                }
            });
        });
    };
    SettingsClient.prototype.set = function(key, value) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.loadData()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/ , this.update(key, value)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.delete = function(key) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.loadData()];
                    case 1:
                        _a.sent();
                        if (!this.data.hasOwnProperty(key)) {
                            throw new Error("'" + key + "' doesn't exist in settings");
                        }
                        return [4 /*yield*/ , this.update(key, null)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.loadData = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e_1;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.getPromise) {
                            this.getPromise = this.resolveData();
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/ , this.getPromise];
                    case 2:
                        _a.sent();
                        return [3 /*break*/ , 4];
                    case 3:
                        e_1 = _a.sent();
                        this.getPromise = null;
                        throw e_1;
                    case 4:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.resolveData = function() {
        return __awaiter(this, void 0, void 0, function() {
            var externalId, _a, e_2;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        return [4 /*yield*/ , this.getExternalId()];
                    case 1:
                        externalId = _b.sent();
                        if (!(!this.data && externalId)) return [3 /*break*/ , 6];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        _a = this;
                        return [4 /*yield*/ , this.apiClient.get(this.instance, externalId, this.scope)];
                    case 3:
                        _a.data = _b.sent();
                        return [3 /*break*/ , 5];
                    case 4:
                        e_2 = _b.sent();
                        // there was an issue that we saved external id although
                        // the actual data was not saved in our db.
                        // it means that there're users with external id
                        // that this apiClient.get call would fail with 404
                        if (e_2 instanceof HttpError && e_2.statusCode === 404) {
                            this.firstTime = true;
                            this.data = {};
                            return [2 /*return*/ ];
                        }
                        throw e_2;
                    case 5:
                        this.firstTime = false;
                        return [3 /*break*/ , 7];
                    case 6:
                        if (!this.data) {
                            this.data = {};
                        }
                        _b.label = 7;
                    case 7:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.update = function(key, value) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        this.data[key] = value;
                        this.adapter.triggerSettingsUpdated(this.data, this.scope);
                        this.queue.push({
                            key: key,
                            value: value
                        });
                        if (!this.flushPromise) {
                            this.flushPromise = this.flushQueue();
                        }
                        return [4 /*yield*/ , this.flushPromise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.flushQueue = function() {
        return __awaiter(this, void 0, void 0, function() {
            var queue;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.wait(100)];
                    case 1:
                        _a.sent();
                        queue = this.queue.slice();
                        this.queue = [];
                        this.flushPromise = null;
                        return [4 /*yield*/ , this.saveChanges(queue)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.saveChanges = function(queue) {
        return __awaiter(this, void 0, void 0, function() {
            var changes, newExternalId, newExternalId;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        changes = queue.reduce(function(acc, item) {
                            acc[item.key] = item.value;
                            return acc;
                        }, {});
                        if (!this.firstTime) return [3 /*break*/ , 3];
                        newExternalId = this.generateId();
                        return [4 /*yield*/ , this.apiClient.set(this.instance, newExternalId, this.scope, changes)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/ , this.setExternalId(newExternalId)];
                    case 2:
                        _a.sent();
                        this.firstTime = false;
                        return [3 /*break*/ , 6];
                    case 3:
                        return [4 /*yield*/ , this.apiClient.update(this.instance, this.externalId, this.scope, changes)];
                    case 4:
                        newExternalId = _a.sent();
                        return [4 /*yield*/ , this.setExternalId(newExternalId)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.setExternalId = function(externalId) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.adapter.setExternalId(externalId)];
                    case 1:
                        _a.sent();
                        this.externalId = externalId;
                        return [2 /*return*/ ];
                }
            });
        });
    };
    SettingsClient.prototype.getExternalId = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.externalId) return [3 /*break*/ , 2];
                        _a = this;
                        return [4 /*yield*/ , this.adapter.getExternalId()];
                    case 1:
                        _a.externalId = _b.sent();
                        _b.label = 2;
                    case 2:
                        return [2 /*return*/ , this.externalId];
                }
            });
        });
    };
    return SettingsClient;
}());
export {
    SettingsClient
};
//# sourceMappingURL=settings-client.js.map