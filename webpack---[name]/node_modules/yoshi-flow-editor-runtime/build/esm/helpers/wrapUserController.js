var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    pickFunctions
} from '../utils';
import {
    createSentryProp
} from '../controller/sentryProp';
import {
    fedopsLoggerProp
} from '../controller/fedopsLoggerProp';
import {
    multilingualProp
} from '../controller/multilingualProp';
import {
    internalProps
} from './internalProps';
var biLoggerToProps = function(logger) {
    return {
        biMethods: logger ? pickFunctions(logger) : {},
        biUtil: logger ? pickFunctions(logger.util) : {},
    };
};
var onCSRLoaded = function(flowAPI, componentMeta) {
    return function() {
        if (!componentMeta.isCSRLoaded) {
            flowAPI.fedopsLogger.appLoaded();
            componentMeta.isCSRLoaded = true;
        }
    };
};
var getPublicData = function(flowAPI) {
    var _a;
    var publicData = (_a = flowAPI.controllerConfig.config.publicData) !== null && _a !== void 0 ? _a : {};
    if (!publicData.APP) {
        publicData.APP = {};
    }
    if (!publicData.COMPONENT) {
        publicData.COMPONENT = {};
    }
    return publicData;
};
export var wrapUserController = function(_a) {
    var controller = _a.controller,
        biLogger = _a.biLogger,
        translations = _a.translations,
        experiments = _a.experiments,
        controllerConfig = _a.controllerConfig,
        experimentsConfig = _a.experimentsConfig,
        translationsConfig = _a.translationsConfig,
        flowAPI = _a.flowAPI,
        state = _a.state,
        _controllerError = _a._controllerError,
        optionalDeps = _a.optionalDeps;
    var _b = biLoggerToProps(biLogger),
        biMethods = _b.biMethods,
        biUtil = _b.biUtil;
    return __assign(__assign({}, controller), {
        updateConfig: function($w, updateConfig) {
            flowAPI.updateControllerConfig(updateConfig);
            controllerConfig.setProps({
                _publicData: getPublicData(flowAPI),
            });
            if (controller.updateConfig) {
                controller.updateConfig($w, updateConfig);
            }
        },
        pageReady: function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(void 0, void 0, void 0, function() {
                var componentMeta, userPageReadyResult;
                var _a;
                var _b;
                return __generator(this, function(_c) {
                    switch (_c.label) {
                        case 0:
                            componentMeta = {
                                isCSRLoaded: false,
                            };
                            // In future we are going to get rid of current setProps call and override original one with wrapper, where we can populate user's call with flow's fields.
                            controllerConfig.setProps((_a = {
                                    _language: flowAPI.environment.language,
                                    _multilingual: multilingualProp(flowAPI.environment.multilingual),
                                    _baseUrls: controllerConfig.appParams.baseUrls,
                                    _translations: (translations === null || translations === void 0 ? void 0 : translations.all) || {},
                                    _experiments: experiments.all(),
                                    _biMethods: biMethods,
                                    _biUtil: biUtil,
                                    _appDefinitionId: flowAPI.environment.appDefinitionId,
                                    _widgetId: flowAPI.widgetId,
                                    _mobile: flowAPI.environment.isMobile,
                                    _isRTL: flowAPI.environment.isRTL,
                                    _isSSR: flowAPI.environment.isSSR
                                },
                                _a[internalProps.publicData] = getPublicData(flowAPI),
                                _a._fedopsLogger = fedopsLoggerProp(flowAPI.fedopsLogger),
                                _a._sentry = flowAPI.sentryMonitor != null ?
                                createSentryProp(flowAPI.sentryMonitor) :
                                null,
                                _a._httpClient = flowAPI._httpClient != null ?
                                (_b = optionalDeps === null || optionalDeps === void 0 ? void 0 : optionalDeps.createHttpClientProp) === null || _b === void 0 ? void 0 : _b.call(optionalDeps, {
                                    controllerConfig: controllerConfig,
                                    httpClient: flowAPI._httpClient,
                                }) : null,
                                _a._enabledHOCs = {
                                    experiments: !!experimentsConfig,
                                    bi: !!flowAPI.biLogger,
                                    translations: translationsConfig && !translationsConfig.disabled,
                                },
                                // Set initial state
                                _a.state = state,
                                _a.onAppLoaded = onCSRLoaded(flowAPI, componentMeta),
                                _a));
                            if (_controllerError) {
                                throw _controllerError;
                            }
                            if (!controller.pageReady) return [3 /*break*/ , 2];
                            return [4 /*yield*/ , controller.pageReady.apply(controller, args)];
                        case 1:
                            // TODO: handle errors from pageReady
                            userPageReadyResult = _c.sent();
                            _c.label = 2;
                        case 2:
                            if (flowAPI.environment.isSSR) {
                                flowAPI.fedopsLogger.appLoaded();
                            }
                            return [2 /*return*/ , userPageReadyResult];
                    }
                });
            });
        }
    });
};
//# sourceMappingURL=wrapUserController.js.map