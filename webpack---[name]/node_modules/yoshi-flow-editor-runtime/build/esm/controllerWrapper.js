var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    ControllerFlowAPI,
    ViewerScriptFlowAPI,
} from './flow-api/ViewerScript';
import {
    wrapUserController
} from './helpers/wrapUserController';
import {
    createDangerousPublicDataOverride,
} from './helpers/createDangerousPublicDataOverride';
// imported from code generation wrappers/templates/ControllerEntry.ts
export default (function(controllerFn, _a, optionalDeps) {
    var sentryConfig = _a.sentryConfig,
        biConfig = _a.biConfig,
        experimentsConfig = _a.experimentsConfig,
        biLogger = _a.biLogger,
        projectName = _a.projectName,
        inEditor = _a.inEditor,
        translationsConfig = _a.translationsConfig,
        defaultTranslations = _a.defaultTranslations,
        appName = _a.appName;
    return function(_a) {
        var controllerConfig = _a.controllerConfig,
            appData = _a.appData,
            flowAPI = _a.flowAPI,
            platformServices = _a.platformServices,
            wixApi = _a.wixApi,
            dangerousPublicDataOverride = _a.dangerousPublicDataOverride;
        return __awaiter(void 0, void 0, void 0, function() {
            var prepopulatedData, context, viewerScriptFlowAPI, _b, translations, experiments, userControllerPromise, _controllerError, userController, error_1;
            var _c, _d;
            return __generator(this, function(_e) {
                switch (_e.label) {
                    case 0:
                        // If flowAPI passed - it means it's already inited and we shouldn't provide additional actions.
                        if (flowAPI) {
                            return [2 /*return*/ , controllerFn.call(null, {
                                controllerConfig: controllerConfig,
                                flowAPI: flowAPI,
                                appData: appData,
                                dangerousPublicDataOverride: dangerousPublicDataOverride,
                            })];
                        }
                        prepopulatedData = appData.__prepopulated;
                        context = {
                            state: {},
                        };
                        viewerScriptFlowAPI = new ViewerScriptFlowAPI({
                            experimentsConfig: experimentsConfig,
                            projectName: projectName,
                            sentryConfig: sentryConfig,
                            platformServices: platformServices,
                            appData: controllerConfig.appParams,
                            wixAPI: wixApi !== null && wixApi !== void 0 ? wixApi : controllerConfig.wixCodeApi,
                            translationsConfig: translationsConfig,
                            defaultTranslations: defaultTranslations,
                            inEditor: inEditor,
                            biConfig: biConfig,
                            biLogger: biLogger,
                            appName: appName,
                            prepopulatedData: prepopulatedData,
                            optionalDeps: optionalDeps,
                        });
                        flowAPI = new ControllerFlowAPI({
                            viewerScriptFlowAPI: viewerScriptFlowAPI,
                            appDefinitionId: (_c = controllerConfig.appParams) === null || _c === void 0 ? void 0 : _c.appDefinitionId,
                            translationsConfig: translationsConfig,
                            widgetId: controllerConfig.type,
                            biLogger: biLogger,
                            controllerConfig: controllerConfig,
                            prepopulatedData: prepopulatedData,
                        });
                        return [4 /*yield*/ , Promise.all([
                            (_d = viewerScriptFlowAPI.translations) === null || _d === void 0 ? void 0 : _d.init({
                                prepopulated: prepopulatedData === null || prepopulatedData === void 0 ? void 0 : prepopulatedData.translations,
                            }),
                            flowAPI.getExperiments(),
                        ])];
                    case 1:
                        _b = _e.sent(), translations = _b[0], experiments = _b[1];
                        userControllerPromise = controllerFn.call(context, {
                            controllerConfig: controllerConfig,
                            flowAPI: flowAPI,
                            appData: appData,
                            dangerousPublicDataOverride: createDangerousPublicDataOverride(flowAPI),
                        });
                        _controllerError = null;
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 4, , 5]);
                        return [4 /*yield*/ , userControllerPromise];
                    case 3:
                        userController = _e.sent();
                        return [3 /*break*/ , 5];
                    case 4:
                        error_1 = _e.sent();
                        flowAPI.reportError(error_1);
                        _controllerError = error_1;
                        userController = {};
                        return [3 /*break*/ , 5];
                    case 5:
                        return [2 /*return*/ , wrapUserController({
                            controller: userController,
                            translations: translations,
                            experiments: experiments,
                            biLogger: flowAPI.biLogger,
                            controllerConfig: controllerConfig,
                            flowAPI: flowAPI,
                            experimentsConfig: experimentsConfig,
                            translationsConfig: translationsConfig,
                            state: context.state,
                            _controllerError: _controllerError,
                            optionalDeps: optionalDeps,
                        })];
                }
            });
        });
    };
});
//# sourceMappingURL=controllerWrapper.js.map