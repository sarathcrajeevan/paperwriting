import {
    default as GALLERY_CONSTS
} from '../../common/constants/index';
var DimensionsHelper = /** @class */ (function() {
    function DimensionsHelper() {
        this.options = {};
        this.container = {};
        this.id = '';
        this._cache = {};
    }
    DimensionsHelper.prototype.getOrPutInCache = function(field, createValue) {
        if (this._cache[field])
            return this._cache[field];
        this._cache[field] = createValue();
        return this._cache[field];
    };
    DimensionsHelper.prototype.dumpCache = function() {
        this._cache = {};
    };
    DimensionsHelper.prototype.updateParams = function(_a) {
        var options = _a.options,
            container = _a.container,
            id = _a.id;
        this.dumpCache();
        this.id = id || this.id;
        this.options = options || this.options;
        this.container = container || this.container;
    };
    DimensionsHelper.prototype.getGalleryDimensions = function() {
        var _this = this;
        return this.getOrPutInCache('galleryDimensions', function() {
            var res = {
                galleryWidth: Math.ceil(_this.getGalleryWidth()),
                galleryHeight: Math.ceil(_this.getGalleryHeight()),
                scrollBase: _this.container.scrollBase ?
                    Math.ceil(_this.container.scrollBase) :
                    0,
                height: Math.ceil(_this.container.height),
                width: Math.ceil(_this.container.width),
            };
            if (_this.container.externalScrollBase) {
                //if was provided from the wrapper
                res.scrollBase += _this.container.externalScrollBase;
            }
            if (_this.options.hasThumbnails) {
                var fixedThumbnailSize = _this.options.thumbnailSize +
                    _this.options.layoutParams.gallerySpacing +
                    3 * _this.options.thumbnailSpacings;
                switch (_this.options.galleryThumbnailsAlignment) {
                    case 'top':
                    case 'bottom':
                        res.galleryHeight -= fixedThumbnailSize;
                        break;
                    case 'left':
                    case 'right':
                        res.galleryWidth -= fixedThumbnailSize;
                        break;
                    default:
                        break;
                }
            } else if (GALLERY_CONSTS.isLayout('SLIDESHOW')(_this.options)) {
                res.galleryHeight -= _this.options.slideshowInfoSize;
            }
            return res;
        });
    };
    DimensionsHelper.prototype.getGalleryWidth = function() {
        var _this = this;
        return this.getOrPutInCache('galleryWidth', function() {
            var width = Math.floor(_this.container.width) + _this.getDimensionFix() * 2; //add margins to width and then remove them in css negative margins
            if (_this.options.arrowsPosition ===
                GALLERY_CONSTS.arrowsPosition.OUTSIDE_GALLERY &&
                _this.options.scrollDirection ===
                GALLERY_CONSTS.scrollDirection.HORIZONTAL) {
                width -=
                    2 * (_this.options.arrowsSize + 40 + _this.options.imageMargin / 2);
            }
            return width;
        });
    };
    DimensionsHelper.prototype.getGalleryHeight = function() {
        var _this = this;
        return this.getOrPutInCache('galleryHeight', function() {
            //const offsetTop = this.options.scrollDirection === GALLERY_CONSTS.scrollDirection.HORIZONTAL ? this.container.offsetTop : 0;
            var dimensionFix = function() {
                return _this.options.scrollDirection ===
                    GALLERY_CONSTS.scrollDirection.HORIZONTAL ?
                    _this.getDimensionFix() :
                    0;
            };
            var res = Math.floor((_this.container.height > 0 ? _this.container.height : 0) + dimensionFix());
            return res;
        });
    };
    DimensionsHelper.prototype.getDimensionFix = function() {
        var _this = this;
        return this.getOrPutInCache('dimensionFix', function() {
            return (Number(_this.options.imageMargin / 2) -
                Number(_this.options.layoutParams.gallerySpacing));
        });
    };
    DimensionsHelper.prototype.getGalleryRatio = function() {
        var _this = this;
        return this.getOrPutInCache('galleryRatio', function() {
            var res = _this.getGalleryDimensions();
            return res.galleryWidth / res.galleryHeight;
        });
    };
    return DimensionsHelper;
}());
export default new DimensionsHelper();
//# sourceMappingURL=dimensionsHelper.js.map