var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = {
    endpoint: 'photo-ugc'
};
var init = function(webOrMobileLogger) {
    return function(userConfig) {
        if (userConfig === void 0) {
            userConfig = {};
        }
        var defaults = userConfig.defaults,
            restOfConfig = __rest(userConfig, ["defaults"]);
        var config = __assign(__assign({}, defaultConfig), restOfConfig);
        var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
        var logger = getLogger(factoryInstance);
        return defaults ? logger.util.updateDefaults(defaults) : logger;
    };
};
export var initCustomLogger = function(factoryInstance) {
    return getLogger(factoryInstance);
};
var getLogger = function(biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function() {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function(defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function(logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({
                src: 65
            });
        this.bi = biLoggerClientFactoryInstance.logger({
            endpoint: 'photo-ugc'
        });
    };
    /**
     * @typedef {Object} landAfterShareParams
     * @property {string} hashtag - name/auto/null
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {number} reach_level - starting at 1
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: land after share. Evid: 602.
     * Event description: an indication of landing in the fullscreen page, following a share.
    
     * hashtag - Type: string. Desc: name/auto/null
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * reach_level - Type: numeric. Desc: starting at 1
     *
     * visitor_id - Type: guid.
     * @param {landAfterShareParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.landAfterShare = function(params) {
        return this.bi.log(__assign({
            evid: 602
        }, params));
    };
    /**
     * @typedef {Object} navigationInCollectionMemberAreaParams
     * @property {string} albumID - album_id
     * @property {string} category - sellected_media/discussions/members/about
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Navigation In Collection Member Area. Evid: 234.
     * Event description: when user navigation In collection member area.
    
     * albumID - Type: string. Desc: album_id
     *
     * category - Type: string. Desc: sellected_media/discussions/members/about
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {navigationInCollectionMemberAreaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.navigationInCollectionMemberArea = function(params) {
        return this.bi.log(__assign({
            evid: 234
        }, params));
    };
    /**
     * @typedef {Object} expandParams
     * @property {GUID} gallery_id - null
     * @property {string} galleryType - store/pro/photo/album
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} selection - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: expand. Evid: 504.
     * Event description: zoom mode.
    
     * gallery_id - Type: guid.
     *
     * galleryType - Type: string. Desc: store/pro/photo/album
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * selection - Type: string.
     *
     * visitor_id - Type: guid.
     * @param {expandParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.expand = function(params) {
        return this.bi.log(__assign({
            evid: 504
        }, params));
    };
    /**
     * @typedef {Object} clickSaveCollectionParams
     * @property {string} albumID - album_id
     * @property {number} amountOfItems - the number of items in the collection include the new items
     * @property {number} amountOfItemsSelected - the number of items that add to the collection
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} origin - .
     * @property {string} role - the role in the album (owner/member=client)
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Click Save Collection. Evid: 232.
     * Event description: when save collection media.
    
     * albumID - Type: string. Desc: album_id
     *
     * amountOfItems - Type: numeric. Desc: the number of items in the collection include the new items
     *
     * amountOfItemsSelected - Type: numeric. Desc: the number of items that add to the collection
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: .
     *
     * role - Type: string. Desc: the role in the album (owner/member=client)
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {clickSaveCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickSaveCollection = function(params) {
        return this.bi.log(__assign({
            evid: 232
        }, params));
    };
    /**
     * @typedef {Object} downloadFilesFromCollectionParams
     * @property {string} albumID - album_id
     * @property {string} button_name - action name
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} origin - .
     * @property {string} role - role in the album (owner/member)
     * @property {string} source - bzm/etc.....
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Download Files From Collection. Evid: 218.
     * Event description: when user choose the download way.
    
     * albumID - Type: string. Desc: album_id
     *
     * button_name - Type: string. Desc: action name
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: .
     *
     * role - Type: string. Desc: role in the album (owner/member)
     *
     * source - Type: string. Desc: bzm/etc.....
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {downloadFilesFromCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.downloadFilesFromCollection = function(params) {
        return this.bi.log(__assign({
            evid: 218
        }, params));
    };
    /**
     * @typedef {Object} providerCartCheckoutParams
     * @property {string} app_id - []
     * @property {number} count - null
     * @property {string} currency - null
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} name - Deprecated
     * @property {number} price - null
     * @property {GUID} storeId - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: [Provider] cart-->checkout. Evid: 803.
     * Event description: click on checkout.
    
     * app_id - Type: string. Desc: []
     *
     * count - Type: numeric.
     *
     * currency - Type: string.
     *
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * name - Type: string. Desc: Deprecated
     *
     * price - Type: numeric.
     *
     * storeId - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {providerCartCheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.providerCartCheckout = function(params) {
        return this.bi.log(__assign({
            evid: 803
        }, params));
    };
    /**
     * @typedef {Object} infoParams
     * @property {GUID} gallery_id - {}
     * @property {string} galleryType - store or pro
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} origin - gallery or expand mode
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: info. Evid: 503.
     * Event description: info clicked.
    
     * gallery_id - Type: guid. Desc: {}
     *
     * galleryType - Type: string. Desc: store or pro
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: gallery or expand mode
     *
     * visitor_id - Type: guid.
     * @param {infoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.info = function(params) {
        return this.bi.log(__assign({
            evid: 503
        }, params));
    };
    /**
     * @typedef {Object} galleryItemExpandedParams
     * @property {GUID} galleryId - []
     * @property {string} galleryType - store, if null then gallery (works till art store is on Iframe)
     * @property {GUID} instance_id - null
     * @property {string} mediaType - text,video,image
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Gallery Item Expanded. Evid: 521.
     * Event description: Gallery item is expanded successfully (only OOI, beside art store).
    
     * galleryId - Type: guid. Desc: []
     *
     * galleryType - Type: string. Desc: store, if null then gallery (works till art store is on Iframe)
     *
     * instance_id - Type: guid.
     *
     * mediaType - Type: string. Desc: text,video,image
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {galleryItemExpandedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.galleryItemExpanded = function(params) {
        return this.bi.log(__assign({
            evid: 521
        }, params));
    };
    /**
     * @typedef {Object} previewItemInCollectionParams
     * @property {string} albumID - album_id
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {string} itemId - id of the chosen item
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} source - preview/selected_media/discussions
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Preview Item In Collection. Evid: 230.
     * Event description: Arrived when collection member click preview item.
    
     * albumID - Type: string. Desc: album_id
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * itemId - Type: string. Desc: id of the chosen item
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * source - Type: string. Desc: preview/selected_media/discussions
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {previewItemInCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.previewItemInCollection = function(params) {
        return this.bi.log(__assign({
            evid: 230
        }, params));
    };
    /**
     * @typedef {Object} shareParams
     * @property {GUID} gallery_id - null
     * @property {string} galleryType - store/pro/photo/album
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} origin - null
     * @property {string} platform - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: share. Evid: 500.
     * Event description: share clicked.
    
     * gallery_id - Type: guid.
     *
     * galleryType - Type: string. Desc: store/pro/photo/album
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * visitor_id - Type: guid.
     * @param {shareParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.share = function(params) {
        return this.bi.log(__assign({
            evid: 500
        }, params));
    };
    /**
     * @typedef {Object} downloadImageParams
     * @property {string} app_id - []
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: download image. Evid: 805.
     * Event description: download image.
    
     * app_id - Type: string. Desc: []
     *
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {downloadImageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.downloadImage = function(params) {
        return this.bi.log(__assign({
            evid: 805
        }, params));
    };
    /**
     * @typedef {Object} galleryClickOnItemParams
     * @property {string} action - expand, link, nothing, thumbnail
     * @property {GUID} galleryId - []
     * @property {string} galleryType - store, if null then gallery (works till art store is on Iframe)
     * @property {GUID} instance_id - null
     * @property {string} layout - []
     * @property {string} mediaType - image, video, text
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Gallery Click on Item. Evid: 520.
     * Event description: UOU clicks on an item in a gallery (only OOI, beside art store).
    
     * action - Type: string. Desc: expand, link, nothing, thumbnail
     *
     * galleryId - Type: guid. Desc: []
     *
     * galleryType - Type: string. Desc: store, if null then gallery (works till art store is on Iframe)
     *
     * instance_id - Type: guid.
     *
     * layout - Type: string. Desc: []
     *
     * mediaType - Type: string. Desc: image, video, text
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {galleryClickOnItemParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.galleryClickOnItem = function(params) {
        return this.bi.log(__assign({
            evid: 520
        }, params));
    };
    /**
     * @typedef {Object} gogLoadedParams
     * @property {GUID} instance_id - null
     * @property {boolean} is_editor - -
     * @property {boolean} is_owner - -
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: gog_loaded. Evid: 301.
     * Event description: gog_loaded.
    
     * instance_id - Type: guid.
     *
     * is_editor - Type: bool. Desc: -
     *
     * is_owner - Type: bool. Desc: -
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {gogLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.gogLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 301
        }, params));
    };
    /**
     * @typedef {Object} buyBuyNowClickParams
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} storeId - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: buy-->buy now click. Evid: 800.
     * Event description: click buy now button in gallery.
    
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * storeId - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {buyBuyNowClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.buyBuyNowClick = function(params) {
        return this.bi.log(__assign({
            evid: 800
        }, params));
    };
    /**
     * @typedef {Object} addCommentOnAnItemCollectionParams
     * @property {string} albumID - album_id
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {string} itemId - id of the chosen item
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} source - preview/selected_media/discussions
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Add Comment On An Item Collection. Evid: 229.
     * Event description: Arrived when collection member add comment on an item.
    
     * albumID - Type: string. Desc: album_id
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * itemId - Type: string. Desc: id of the chosen item
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * source - Type: string. Desc: preview/selected_media/discussions
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {addCommentOnAnItemCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.addCommentOnAnItemCollection = function(params) {
        return this.bi.log(__assign({
            evid: 229
        }, params));
    };
    /**
     * @typedef {Object} proGalleryErrorUouParams
     * @property {string} compId - null
     * @property {string} errorType - the name of the error
     * @property {string} error_type - []
     * @property {GUID} gallery_id - []
     * @property {string} galleryType - []
     * @property {GUID} instance_id - []
     * @property {GUID} biToken - []
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: pro gallery error-->uou. Evid: 512.
     * Event description: triggered when the client finds a server error.
    
     * compId - Type: string.
     *
     * errorType - Type: string. Desc: the name of the error
     *
     * error_type - Type: string. Desc: []
     *
     * gallery_id - Type: guid. Desc: []
     *
     * galleryType - Type: string. Desc: []
     *
     * instance_id - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * visitor_id - Type: guid.
     * @param {proGalleryErrorUouParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.proGalleryErrorUou = function(params) {
        return this.bi.log(__assign({
            evid: 512
        }, params));
    };
    /**
     * @typedef {Object} paymentExceptedParams
     * @property {GUID} couponId - {}
     * @property {string} currency - {}
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {number} price - {}
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: payment_excepted. Evid: 506.
     * Event description: payment_excepted.
    
     * couponId - Type: guid. Desc: {}
     *
     * currency - Type: string. Desc: {}
     *
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * price - Type: numeric. Desc: {}
     *
     * visitor_id - Type: guid.
     * @param {paymentExceptedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.paymentExcepted = function(params) {
        return this.bi.log(__assign({
            evid: 506
        }, params));
    };
    /**
     * @typedef {Object} providerBuyAddToCartParams
     * @property {string} app_id - []
     * @property {string} currency - null
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} name - null
     * @property {number} price - null
     * @property {GUID} storeId - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: [Provider] buy-->add to cart. Evid: 802.
     * Event description: click on add to cart.
    
     * app_id - Type: string. Desc: []
     *
     * currency - Type: string.
     *
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * name - Type: string.
     *
     * price - Type: numeric.
     *
     * storeId - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {providerBuyAddToCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.providerBuyAddToCart = function(params) {
        return this.bi.log(__assign({
            evid: 802
        }, params));
    };
    /**
     * @typedef {Object} collectionCreatedParams
     * @property {string} albumID - album_id
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} origin - collection settings/ new collection / LiveSite
     * @property {string} params - collection params
     * @property {string} role - the role in the album (owner/member)
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Collection Created. Evid: 199.
     * Event description: arrived when the collection created.
    
     * albumID - Type: string. Desc: album_id
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: collection settings/ new collection / LiveSite
     *
     * params - Type: string. Desc: collection params
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {collectionCreatedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionCreated = function(params) {
        return this.bi.log(__assign({
            evid: 199
        }, params));
    };
    /**
     * @typedef {Object} albumActionsParams
     * @property {string} action - -
     * @property {string} album_id - -
     * @property {GUID} app_site_id - -
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: album_actions. Evid: 300.
     * Event description: album_actions.
    
     * action - Type: string. Desc: -
     *
     * album_id - Type: string. Desc: -
     *
     * app_site_id - Type: guid. Desc: -
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {albumActionsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.albumActions = function(params) {
        return this.bi.log(__assign({
            evid: 300
        }, params));
    };
    /**
     * @typedef {Object} proGalleryLoadUouParams
     * @property {string} endpoint - null
     * @property {GUID} gallery_id - null
     * @property {string} galleryType - store/pro/photo/album
     * @property {GUID} instance_id - null
     * @property {number} items_count - null
     * @property {number} loading_time - null
     * @property {GUID} biToken - null
     * @property {string} phase - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: pro gallery load-->uou. Evid: 304.
     * Event description: pro gallery end point uou client.
    
     * endpoint - Type: string.
     *
     * gallery_id - Type: guid.
     *
     * galleryType - Type: string. Desc: store/pro/photo/album
     *
     * instance_id - Type: guid.
     *
     * items_count - Type: numeric.
     *
     * loading_time - Type: numeric.
     *
     * biToken - Type: guid.
     *
     * phase - Type: string.
     *
     * visitor_id - Type: guid.
     * @param {proGalleryLoadUouParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.proGalleryLoadUou = function(params) {
        return this.bi.log(__assign({
            evid: 304
        }, params));
    };
    /**
     * @typedef {Object} shareGroupParams
     * @property {string} hashtag - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {number} group_size - num of shared photos
     * @property {string} platform - share platform (network)
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: share group. Evid: 601.
     * Event description: when a uou shares a group of photos.
    
     * hashtag - Type: string. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * group_size - Type: numeric. Desc: num of shared photos
     *
     * platform - Type: string. Desc: share platform (network)
     *
     * visitor_id - Type: guid.
     * @param {shareGroupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.shareGroup = function(params) {
        return this.bi.log(__assign({
            evid: 601
        }, params));
    };
    /**
     * @typedef {Object} thankYouPageLoadedParams
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: thank you page loaded. Evid: 804.
     * Event description: thank you page loaded.
    
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {thankYouPageLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.thankYouPageLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 804
        }, params));
    };
    /**
     * @typedef {Object} photoAlbumButtonOnClickParams
     * @property {string} albumID - []
     * @property {string} buttonName - []
     * @property {string} buttonOrigin - []
     * @property {GUID} instance_id - null
     * @property {string} lightroomVersion - version
     * @property {GUID} biToken - null
     * @property {string} origin - Editor, BM, custom origin
     * @property {string} screenName - []
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: PhotoAlbum.Button.onClick. Evid: 211.
     * Event description: A click event in Photo album 2.0.
    
     * albumID - Type: string. Desc: []
     *
     * buttonName - Type: string. Desc: []
     *
     * buttonOrigin - Type: string. Desc: []
     *
     * instance_id - Type: guid.
     *
     * lightroomVersion - Type: string. Desc: version
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: Editor, BM, custom origin
     *
     * screenName - Type: string. Desc: []
     *
     * visitor_id - Type: guid.
     * @param {photoAlbumButtonOnClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.photoAlbumButtonOnClick = function(params) {
        return this.bi.log(__assign({
            evid: 211
        }, params));
    };
    /**
     * @typedef {Object} buySelectLicenseParams
     * @property {string} app_id - []
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} name - null
     * @property {GUID} storeId - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: buy-->select license. Evid: 801.
     * Event description: select license.
    
     * app_id - Type: string. Desc: []
     *
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * name - Type: string.
     *
     * storeId - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {buySelectLicenseParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.buySelectLicense = function(params) {
        return this.bi.log(__assign({
            evid: 801
        }, params));
    };
    /**
     * @typedef {Object} photoAlbumCoverLoadedParams
     * @property {string} albumID - null
     * @property {string} endpoint - []
     * @property {GUID} instance_id - null
     * @property {number} loading_time - []
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: photo album cover loaded. Evid: 303.
     * Event description: photo album cover is loaded (with option to click view photos and see full gallery).
    
     * albumID - Type: string.
     *
     * endpoint - Type: string. Desc: []
     *
     * instance_id - Type: guid.
     *
     * loading_time - Type: numeric. Desc: []
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {photoAlbumCoverLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.photoAlbumCoverLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 303
        }, params));
    };
    /**
     * @typedef {Object} downloadParams
     * @property {GUID} gallery_id - null
     * @property {string} galleryType - store/pro/photo/album
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} origin - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: download. Evid: 502.
     * Event description: download success.
    
     * gallery_id - Type: guid.
     *
     * galleryType - Type: string. Desc: store/pro/photo/album
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string.
     *
     * visitor_id - Type: guid.
     * @param {downloadParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.download = function(params) {
        return this.bi.log(__assign({
            evid: 502
        }, params));
    };
    /**
     * @typedef {Object} migratedLoveDataParams
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {string} migration_status - start/success
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: migratedLoveData. Evid: 305.
     * Event description: love count migrated to new service.
    
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * migration_status - Type: string. Desc: start/success
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {migratedLoveDataParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.migratedLoveData = function(params) {
        return this.bi.log(__assign({
            evid: 305
        }, params));
    };
    /**
     * @typedef {Object} shareNewParams
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} origin - {fullscreen, gallery}
     * @property {string} platform - {}
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: share_new. Evid: 511.
     * Event description: share clicked.
    
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string. Desc: {fullscreen, gallery}
     *
     * platform - Type: string. Desc: {}
     *
     * visitor_id - Type: guid.
     * @param {shareNewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.shareNew = function(params) {
        return this.bi.log(__assign({
            evid: 511
        }, params));
    };
    /**
     * @typedef {Object} dropDownMenuOnPhotoParams
     * @property {GUID} instance_id - []
     * @property {number} loading_time - []
     * @property {GUID} biToken - []
     * @property {GUID} visitor_id - []
     **/
    /**
     * Name: Drop down menu on photo. Evid: 285.
     * Event description: Drop down menu on photo.
    
     * instance_id - Type: guid. Desc: []
     *
     * loading_time - Type: numeric. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * visitor_id - Type: guid. Desc: []
     * @param {dropDownMenuOnPhotoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.dropDownMenuOnPhoto = function(params) {
        return this.bi.log(__assign({
            evid: 285
        }, params));
    };
    /**
     * @typedef {Object} popupOpenedParams
     * @property {string} albumID - album_id
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - []
     * @property {string} origin - origin that opened popup
     * @property {string} popupName - popup title/description
     * @property {string} role - member/owner
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Popup Opened. Evid: 279.
     * Event description: when a popup is presented to a user.
    
     * albumID - Type: string. Desc: album_id
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid. Desc: []
     *
     * origin - Type: string. Desc: origin that opened popup
     *
     * popupName - Type: string. Desc: popup title/description
     *
     * role - Type: string. Desc: member/owner
     *
     * visitor_id - Type: guid.
     * @param {popupOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.popupOpened = function(params) {
        return this.bi.log(__assign({
            evid: 279
        }, params));
    };
    /**
     * @typedef {Object} buyGalleryAddToCartParams
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} providerId - []
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: buy-->gallery-->add to cart. Evid: 806.
     * Event description: click on add to cart from gallery side.
    
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * providerId - Type: string. Desc: []
     *
     * visitor_id - Type: guid.
     * @param {buyGalleryAddToCartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.buyGalleryAddToCart = function(params) {
        return this.bi.log(__assign({
            evid: 806
        }, params));
    };
    /**
     * @typedef {Object} paymentErrorParams
     * @property {GUID} couponId - {}
     * @property {string} currency - {}
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {number} price - {}
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: payment_error. Evid: 507.
     * Event description: payment_error.
    
     * couponId - Type: guid. Desc: {}
     *
     * currency - Type: string. Desc: {}
     *
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * price - Type: numeric. Desc: {}
     *
     * visitor_id - Type: guid.
     * @param {paymentErrorParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.paymentError = function(params) {
        return this.bi.log(__assign({
            evid: 507
        }, params));
    };
    /**
     * @typedef {Object} clickOnInviteMemberToCollectionParams
     * @property {string} albumID - album_id
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} source - bzm/member area
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Click On Invite Member To Collection. Evid: 233.
     * Event description: click on invite member to collection.
    
     * albumID - Type: string. Desc: album_id
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * source - Type: string. Desc: bzm/member area
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {clickOnInviteMemberToCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnInviteMemberToCollection = function(params) {
        return this.bi.log(__assign({
            evid: 233
        }, params));
    };
    /**
     * @typedef {Object} artStorePerformanceUouParams
     * @property {number} client_rt - client rendering time
     * @property {string} end_point - shop, checkout, configuration, manage, purchaseEnd, cart
     * @property {GUID} instance_id - []
     * @property {boolean} is_optimization_on - true/false
     * @property {GUID} biToken - []
     * @property {number} server_rt - server rendering time
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: art store -->performance uou. Evid: 306.
     * Event description: performance testing event - uou.
    
     * client_rt - Type: numeric. Desc: client rendering time
     *
     * end_point - Type: string. Desc: shop, checkout, configuration, manage, purchaseEnd, cart
     *
     * instance_id - Type: guid. Desc: []
     *
     * is_optimization_on - Type: bool. Desc: true/false
     *
     * biToken - Type: guid. Desc: []
     *
     * server_rt - Type: numeric. Desc: server rendering time
     *
     * visitor_id - Type: guid.
     * @param {artStorePerformanceUouParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.artStorePerformanceUou = function(params) {
        return this.bi.log(__assign({
            evid: 306
        }, params));
    };
    /**
     * @typedef {Object} gogAlbumClickParams
     * @property {string} album_id - -
     * @property {GUID} app_site_id - -
     * @property {GUID} instance_id - null
     * @property {boolean} is_owner - -
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: gog_album_click. Evid: 302.
     * Event description: gog_album_click.
    
     * album_id - Type: string. Desc: -
     *
     * app_site_id - Type: guid. Desc: -
     *
     * instance_id - Type: guid.
     *
     * is_owner - Type: bool. Desc: -
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {gogAlbumClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.gogAlbumClick = function(params) {
        return this.bi.log(__assign({
            evid: 302
        }, params));
    };
    /**
     * @typedef {Object} galleryRenderedParams
     * @property {number} numberOfItems - number of images in gallery
     * @property {number} customLayoutID - id number
     * @property {GUID} gallery_id - []
     * @property {string} galleryType - pro gallery or art store
     * @property {GUID} instance_id - null
     * @property {boolean} isLean - true if gallery is lean eligible
     * @property {string} itemSource - gallery, Corvid, Albums
     * @property {string} layoutType - presets, custom
     * @property {GUID} biToken - null
     * @property {string} notLeanReason - if is_lean is false, why. list split by ','
     * @property {string} styleParams - json
     * @property {number} presetLayoutID - id number
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: gallery_rendered. Evid: 508.
     * Event description: Pro Gallery or Art Store are successfully rendered in Viewer..
    
     * numberOfItems - Type: numeric. Desc: number of images in gallery
     *
     * customLayoutID - Type: numeric. Desc: id number
     *
     * gallery_id - Type: guid. Desc: []
     *
     * galleryType - Type: string. Desc: pro gallery or art store
     *
     * instance_id - Type: guid.
     *
     * isLean - Type: bool. Desc: true if gallery is lean eligible
     *
     * itemSource - Type: string. Desc: gallery, Corvid, Albums
     *
     * layoutType - Type: string. Desc: presets, custom
     *
     * biToken - Type: guid.
     *
     * notLeanReason - Type: string. Desc: if is_lean is false, why. list split by ','
     *
     * styleParams - Type: string. Desc: json
     *
     * presetLayoutID - Type: numeric. Desc: id number
     *
     * visitor_id - Type: guid.
     * @param {galleryRenderedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.galleryRendered = function(params) {
        return this.bi.log(__assign({
            evid: 508
        }, params));
    };
    /**
     * @typedef {Object} openWizardCreateCollectionParams
     * @property {string} albumID - album_id
     * @property {string} button_name - bzm top button/ bzm + sign / members area
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} source - bzm/member area
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Open Wizard Create Collection. Evid: 208.
     * Event description: when user open create collection wizard ( create collection from bo/members area).
    
     * albumID - Type: string. Desc: album_id
     *
     * button_name - Type: string. Desc: bzm top button/ bzm + sign / members area
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * source - Type: string. Desc: bzm/member area
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {openWizardCreateCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.openWizardCreateCollection = function(params) {
        return this.bi.log(__assign({
            evid: 208
        }, params));
    };
    /**
     * @typedef {Object} proGalleryLoadedParams
     * @property {number} avg_image_loading_time - first_50_images
     * @property {number} first_screen_load_time - load_time
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: pro_gallery_loaded. Evid: 510.
     * Event description: when a UOU loads a gallery.
    
     * avg_image_loading_time - Type: numeric. Desc: first_50_images
     *
     * first_screen_load_time - Type: numeric. Desc: load_time
     *
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {proGalleryLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.proGalleryLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 510
        }, params));
    };
    /**
     * @typedef {Object} xxxcheckoutParams
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: XXXcheckout. Evid: 505.
     * Event description: buy now clicked.
    
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {xxxcheckoutParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.xxxcheckout = function(params) {
        return this.bi.log(__assign({
            evid: 505
        }, params));
    };
    /**
     * @typedef {Object} proGalleryClickOnCustomButtonParams
     * @property {string} action - type of action expected by the buton
     * @property {string} button_text - []
     * @property {GUID} gallery_id - []
     * @property {GUID} instance_id - []
     * @property {GUID} biToken - []
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Pro Gallery - Click on custom button. Evid: 807.
     * Event description: UoU clicks on custom button in pro gallery (parallel to event 800 in art store).
    
     * action - Type: string. Desc: type of action expected by the buton
     *
     * button_text - Type: string. Desc: []
     *
     * gallery_id - Type: guid. Desc: []
     *
     * instance_id - Type: guid. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * visitor_id - Type: guid.
     * @param {proGalleryClickOnCustomButtonParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.proGalleryClickOnCustomButton = function(params) {
        return this.bi.log(__assign({
            evid: 807
        }, params));
    };
    /**
     * @typedef {Object} loveParams
     * @property {string} albumID - album id
     * @property {GUID} gallery_id - null
     * @property {string} galleryType - store/pro/photo/album
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {string} origin - null
     * @property {string} role - member/owner
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: love. Evid: 501.
     * Event description: Love clicked.
    
     * albumID - Type: string. Desc: album id
     *
     * gallery_id - Type: guid.
     *
     * galleryType - Type: string. Desc: store/pro/photo/album
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * origin - Type: string.
     *
     * role - Type: string. Desc: member/owner
     *
     * visitor_id - Type: guid.
     * @param {loveParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.love = function(params) {
        return this.bi.log(__assign({
            evid: 501
        }, params));
    };
    /**
     * @typedef {Object} clickOnSelectMediaCollectionParams
     * @property {string} albumID - album_id
     * @property {string} collection_id - unique id for collection
     * @property {GUID} instance_id - instance_id
     * @property {GUID} biToken - null
     * @property {string} role - the role in the album (owner/member)
     * @property {string} visitorId - id of the member in the collection
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: Click On Select Media Collection. Evid: 228.
     * Event description: Arrived when visitor click on start select media in collection.
    
     * albumID - Type: string. Desc: album_id
     *
     * collection_id - Type: string. Desc: unique id for collection
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * biToken - Type: guid.
     *
     * role - Type: string. Desc: the role in the album (owner/member)
     *
     * visitorId - Type: string. Desc: id of the member in the collection
     *
     * visitor_id - Type: guid.
     * @param {clickOnSelectMediaCollectionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnSelectMediaCollection = function(params) {
        return this.bi.log(__assign({
            evid: 228
        }, params));
    };
    /**
     * @typedef {Object} selectPhotoParams
     * @property {number} group_size - number of item in session
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {number} num_of_item_in_group - []
     * @property {string} value - choose/unchoose
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: select photo. Evid: 600.
     * Event description: when a uou chooses a photo.
    
     * group_size - Type: numeric. Desc: number of item in session
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * num_of_item_in_group - Type: numeric. Desc: []
     *
     * value - Type: string. Desc: choose/unchoose
     *
     * visitor_id - Type: guid.
     * @param {selectPhotoParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.selectPhoto = function(params) {
        return this.bi.log(__assign({
            evid: 600
        }, params));
    };
    /**
     * @typedef {Object} proGalleryLoadErrorParams
     * @property {GUID} gallery_id - {}
     * @property {GUID} instance_id - null
     * @property {GUID} biToken - null
     * @property {GUID} visitor_id - null
     **/
    /**
     * Name: pro_gallery_load_error. Evid: 509.
     * Event description: when there is a pro gallery load error.
    
     * gallery_id - Type: guid. Desc: {}
     *
     * instance_id - Type: guid.
     *
     * biToken - Type: guid.
     *
     * visitor_id - Type: guid.
     * @param {proGalleryLoadErrorParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.proGalleryLoadError = function(params) {
        return this.bi.log(__assign({
            evid: 509
        }, params));
    };
    /**
     * @typedef {Object} photoAlbumGalleryLoadedParams
     * @property {GUID} instance_id - []
     * @property {number} loading_time - []
     * @property {GUID} biToken - []
     * @property {GUID} visitor_id - []
     **/
    /**
     * Name: photo album gallery loaded. Evid: 307.
     * Event description: photo album gallery is loaded after clicking view photos in the cover image.
    
     * instance_id - Type: guid. Desc: []
     *
     * loading_time - Type: numeric. Desc: []
     *
     * biToken - Type: guid. Desc: []
     *
     * visitor_id - Type: guid. Desc: []
     * @param {photoAlbumGalleryLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.photoAlbumGalleryLoaded = function(params) {
        return this.bi.log(__assign({
            evid: 307
        }, params));
    };
    return Logger;
}());
export {
    Logger
};
export default init;
export function getLoggerConf() {
    return {
        src: 65,
        endpoint: 'photo-ugc',
    };
}
//# sourceMappingURL=index.js.map