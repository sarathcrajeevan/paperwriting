/**
 * @param {string} rfcDateTime - example 2020-05-16T13:00:00.000+03:00
 * @returns {string} Wednesday, 2 June
 */
export function rfcToShiftedDate(rfcTimeString) {
    var rfcSeparators = /[-T:.+]/;
    var _a = rfcTimeString.split(rfcSeparators).map(function(dateComponentString) {
            return parseInt(dateComponentString, 10);
        }),
        year = _a[0],
        month = _a[1],
        day = _a[2],
        hour = _a[3],
        minutes = _a[4],
        seconds = _a[5],
        millis = _a[6];
    return new Date(year || 0, month - 1 || 0, day || 0, hour || 0, minutes || 0, seconds || 0, millis || 0);
}
/**
 * @param {Date} date
 * @returns {string} an rfc string representing the given date's local time, will add a Z (which makes it shifted so don't use it - only if you know why you do so)
 * example: new Date('2020-05-16T13:00:00.000+02:00') => 2020-05-16T13:00:00.000Z (these 2 don't represent the same time, thus - shifted)
 */
export function dateToShiftedRfcString(date) {
    var addZeroIfNeeded = function(dateComponent, digits) {
        if (digits === void 0) {
            digits = 2;
        }
        var stringValue = dateComponent.toString();
        var zeros = stringValue.length < digits ? new Array(digits - stringValue.length).fill(0) : [];
        return zeros.join('') + stringValue;
    };
    var year = date.getFullYear();
    var month = addZeroIfNeeded(date.getMonth() + 1);
    var day = addZeroIfNeeded(date.getDate());
    var hour = addZeroIfNeeded(date.getHours());
    var minute = addZeroIfNeeded(date.getMinutes());
    var second = addZeroIfNeeded(date.getSeconds());
    var miliseconds = addZeroIfNeeded(date.getMilliseconds(), 3);
    return year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + "." + miliseconds + "Z";
}
//# sourceMappingURL=dateTimeAdapter.js.map