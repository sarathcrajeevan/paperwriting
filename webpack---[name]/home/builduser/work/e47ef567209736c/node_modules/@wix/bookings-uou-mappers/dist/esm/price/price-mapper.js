import {
    __assign
} from "tslib";
// @ts-ignore
import * as currencySymbolMap from 'currency-symbol-map/map';
import {
    OfferedAsType,
} from '@wix/bookings-uou-types';
var currencyFixesOverrides = {
    KZT: '₸',
    LBP: 'ل.ل.', // TODO: remove when we create and merge PR
};
var fixedCurrencySymbolMap = __assign(__assign({}, currencySymbolMap), currencyFixesOverrides);
var PriceMapper = /** @class */ (function() {
    function PriceMapper(_a) {
        var servicePaymentDto = _a.servicePaymentDto,
            offeredAs = _a.offeredAs,
            _b = _a.locale,
            locale = _b === void 0 ? 'en' : _b,
            _c = _a.regionalSettingsLocale,
            regionalSettingsLocale = _c === void 0 ? 'en' : _c,
            _d = _a.isUseIntlForPriceInBookFlowEnabled,
            isUseIntlForPriceInBookFlowEnabled = _d === void 0 ? false : _d;
        this.servicePaymentDto = servicePaymentDto;
        this.offeredAs = offeredAs;
        this.locale = locale;
        this.regionalSettingsLocale = regionalSettingsLocale;
        this.isUseIntlForPriceInBookFlowEnabled = isUseIntlForPriceInBookFlowEnabled;
    }
    PriceMapper.prototype.getPriceBy = function(locale, currencyDisplay) {
        if (currencyDisplay === void 0) {
            currencyDisplay = 'symbol';
        }
        if (this.shouldShowPlanText()) {
            return this.servicePaymentDto.displayTextForPlan;
        }
        if (this.shouldShowOfferingPrice()) {
            if (this.isUseIntlForPriceInBookFlowEnabled) {
                try {
                    var _a = this.servicePaymentDto,
                        price = _a.price,
                        currency = _a.currency;
                    return PriceUtils.getFormattedCurrency({
                        currencyDisplay: currencyDisplay,
                        price: price,
                        currency: currency,
                        locale: locale,
                    });
                } catch (e) {
                    console.error('Failed to format price: ', e);
                    return this.getFallbackFormattedPrice();
                }
            }
            return this.getFallbackFormattedPrice();
        }
        if (this.shouldShowFreeOfferingText()) {
            return this.servicePaymentDto.priceText;
        }
        return '';
    };
    PriceMapper.prototype.getText = function() {
        return this.getPriceBy(this.regionalSettingsLocale);
    };
    PriceMapper.prototype.getAriaLabel = function() {
        return this.getPriceBy(this.locale, 'name');
    };
    PriceMapper.prototype.getFallbackFormattedPrice = function() {
        var symbol = fixedCurrencySymbolMap[this.servicePaymentDto.currency];
        return "" + symbol + this.formattedPrice();
    };
    PriceMapper.prototype.shouldShowPlanText = function() {
        return (this.offeredAs.indexOf(OfferedAsType.PRICING_PLAN) > -1 &&
            this.servicePaymentDto.displayTextForPlan);
    };
    PriceMapper.prototype.shouldShowOfferingPrice = function() {
        return !this.servicePaymentDto.isFree && this.servicePaymentDto.price;
    };
    PriceMapper.prototype.shouldShowFreeOfferingText = function() {
        return (this.offeredAs.indexOf(OfferedAsType.PRICING_PLAN) <= -1 &&
            this.servicePaymentDto.isFree);
    };
    PriceMapper.prototype.formattedPrice = function() {
        var price = Number(this.servicePaymentDto.price);
        return price.toFixed(PriceUtils.getFractionDigits(price));
    };
    return PriceMapper;
}());
export {
    PriceMapper
};
var ServicePaymentDtoFactory = /** @class */ (function() {
    function ServicePaymentDtoFactory() {}
    ServicePaymentDtoFactory.fromOfferingDto = function(catalogServiceDto) {
        return {
            currency: catalogServiceDto.payment.currency,
            price: catalogServiceDto.payment.price,
            isFree: catalogServiceDto.payment.isFree,
            priceText: catalogServiceDto.payment.priceText,
            minCharge: catalogServiceDto.payment.minCharge,
            paymentType: catalogServiceDto.payment.paymentType,
            displayTextForPlan: catalogServiceDto.pricingPlanInfo ?
                catalogServiceDto.pricingPlanInfo.displayText :
                '',
        };
    };
    return ServicePaymentDtoFactory;
}());
export {
    ServicePaymentDtoFactory
};
var PriceUtils = /** @class */ (function() {
    function PriceUtils() {}
    PriceUtils.getFractionDigits = function(price) {
        return price % 1 === 0 ? 0 : 2;
    };
    PriceUtils.validateCurrencyCode = function(currencyCode) {
        var currencyCodeFormat = /^[a-zA-Z]{3}$/;
        return currencyCodeFormat.test(currencyCode);
    };
    PriceUtils.getFormattedCurrency = function(_a) {
        var price = _a.price,
            _b = _a.currencyDisplay,
            currencyDisplay = _b === void 0 ? 'symbol' : _b,
            locale = _a.locale,
            currency = _a.currency,
            _c = _a.quantity,
            quantity = _c === void 0 ? 1 : _c;
        var fractionDigits = PriceUtils.getFractionDigits(price);
        return this.validateCurrencyCode(currency) ?
            Intl.NumberFormat(locale, {
                style: 'currency',
                currency: currency,
                currencyDisplay: currencyDisplay,
                maximumFractionDigits: fractionDigits,
                minimumFractionDigits: fractionDigits,
            }).format(Number(price * quantity)) :
            '';
    };
    return PriceUtils;
}());
export {
    PriceUtils
};
//# sourceMappingURL=price-mapper.js.map