import {
    DateDefaultsConst
} from '../constants/date-time';
import {
    OfferedAsType,
} from './offering.dto';
import * as moment from 'moment';
import {
    OfferingPaymentDtoBuilder
} from '../entities/offering-payment/offering-payment.dto.buillder';
import {
    OfferingLocationDtoBuilder
} from '../entities/offering-location/offering-location.dto.builder';
import {
    OfferingInfoDtoBuilder
} from '../entities/offering-info/offering-info.dto.builder';
import {
    OfferingSchedulePolicyDtoBuilder
} from '../entities/offering-schedule-policy/offering-schedule-policy.dto.builder';
var BaseOfferingDtoBuilder = /** @class */ (function() {
    function BaseOfferingDtoBuilder() {
        this.idGenerator = function() {
            return "offering-id-" + Math.random();
        };
        this.offering = this.validOfferingDto();
    }
    BaseOfferingDtoBuilder.prototype.validWeekHours = function() {
        return {
            sun: null,
            mon: {
                workingHours: [{
                    id: this.idGenerator(),
                    workingHour: {
                        startTime: '12:00',
                        endTime: '13:00'
                    },
                    staffId: null,
                    repeatEveryXWeeks: 1,
                }, ],
            },
            tue: {
                workingHours: [{
                        id: this.idGenerator(),
                        workingHour: {
                            startTime: '14:00',
                            endTime: '15:00'
                        },
                        staffId: null,
                        repeatEveryXWeeks: 1,
                    },
                    {
                        id: this.idGenerator(),
                        workingHour: {
                            startTime: '16:00',
                            endTime: '18:30'
                        },
                        staffId: null,
                        repeatEveryXWeeks: 1,
                    },
                ],
            },
        };
    };
    BaseOfferingDtoBuilder.prototype.withPricePlan = function(pricingPlanName) {
        this.offering.offeredAs = [OfferedAsType.PRICING_PLAN];
        this.offering.pricingPlanInfo = {
            displayText: "in pricing plan: " + pricingPlanName,
            pricingPlans: [{
                id: '1',
                name: pricingPlanName
            }],
        };
        return this;
    };
    BaseOfferingDtoBuilder.prototype.validOfferingDto = function() {
        var dateFormatInSchedule = new DateDefaultsConst().DATE_FORMAT;
        var now = moment();
        return {
            id: this.idGenerator(),
            categoryId: this.idGenerator(),
            order: 0,
            type: this.getOfferingType(),
            urlName: 'offering-id-0',
            offeredAs: [OfferedAsType.ONE_TIME],
            pricingPlanInfo: {
                displayText: null,
                pricingPlans: [],
            },
            info: new OfferingInfoDtoBuilder().build(),
            location: new OfferingLocationDtoBuilder().build(),
            payment: new OfferingPaymentDtoBuilder().build(),
            schedulePolicy: new OfferingSchedulePolicyDtoBuilder().build(),
            schedule: {
                startDate: now.clone().add(20, 'days').format(dateFormatInSchedule),
                endDate: now.clone().add(100, 'days').format(dateFormatInSchedule),
            },
        };
    };
    BaseOfferingDtoBuilder.prototype.withStartDate = function(momentDate) {
        this.offering.schedule.startDate = momentDate
            .clone()
            .format(new DateDefaultsConst().DATE_FORMAT);
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withEndDate = function(momentDate) {
        this.offering.schedule.endDate = momentDate
            .clone()
            .format(new DateDefaultsConst().DATE_FORMAT);
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withExpired = function() {
        var now = moment();
        return this.withStartDate(now.clone().add(-20, 'days')).withEndDate(now.clone().add(-10, 'days'));
    };
    BaseOfferingDtoBuilder.prototype.withId = function(id) {
        this.offering.id = id;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withDummyIndication = function() {
        this.offering.dummy = true;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withUrlName = function(urlName) {
        this.offering.urlName = urlName;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withIdGenerator = function(idGenerator) {
        this.idGenerator = idGenerator;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withConferenceProvider = function(conferenceProvider) {
        this.offering.conferenceProvider = conferenceProvider;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withCategoryId = function(cid) {
        this.offering.categoryId = cid;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withLocation = function(location) {
        this.offering.location.type = location.type;
        this.offering.location.locationText = location.locationText;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withLocations = function(locations) {
        this.offering.info.locations = locations;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withName = function(name) {
        this.offering.info.name = name;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withPaymentType = function(type) {
        this.offering.payment.paymentType = type;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withDescription = function(description) {
        this.offering.info.description = description;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withTagLine = function(tagLine) {
        this.offering.info.tagLine = tagLine;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withCapacity = function(capacity) {
        this.offering.schedulePolicy.capacity = capacity;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withNameSuffix = function(name) {
        this.offering.info.name += name;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withImages = function(images) {
        this.offering.info.images = images;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withInfo = function(info) {
        this.offering.info = info;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withOrder = function(order) {
        this.offering.order = order;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withPayment = function(payment) {
        this.offering.payment = payment;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.withHidden = function(hide) {
        this.offering.schedulePolicy.uouHidden = hide;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.asDisplayOnly = function() {
        this.offering.schedulePolicy.displayOnlyNoBookFlow = true;
        return this;
    };
    BaseOfferingDtoBuilder.prototype.build = function() {
        return this.offering;
    };
    return BaseOfferingDtoBuilder;
}());
export {
    BaseOfferingDtoBuilder
};
//# sourceMappingURL=base-offering.dto.builder.js.map