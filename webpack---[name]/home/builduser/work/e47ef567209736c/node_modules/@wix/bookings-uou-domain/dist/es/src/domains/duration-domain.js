import {
    OfferingType
} from '../offerings/offering.dto';
import * as moment from 'moment';
var DurationDomain = /** @class */ (function() {
    function DurationDomain(offeringType, duration) {
        this.offeringType = offeringType;
        this.duration = duration;
    }
    DurationDomain.prototype.getTextByFormat = function(formatter) {
        return this.offeringType === OfferingType.COURSE ?
            this.getCourseDurationText(this.duration.startDate, formatter) :
            this.getGeneralDurationText(this.duration.durationInMinutes, this.duration.isDurationVaries, formatter);
    };
    DurationDomain.prototype.getCourseDurationText = function(startDate, formatter) {
        if (!startDate) {
            return '';
        }
        var startDateAsMoment = moment(startDate);
        var isDateInCurrentYear = function(date) {
            var now = moment().startOf('day');
            return now.format('YYYY') === date.format('YYYY');
        };
        var isDateInThePast = function(date) {
            var now = moment().startOf('day');
            return date.isBefore(now);
        };
        var dateTranslationKey = isDateInCurrentYear(startDateAsMoment) ?
            isDateInThePast(startDateAsMoment) ?
            "offering-schedule-summary.course.passed.same-year" :
            "offering-schedule-summary.course.same-year" :
            isDateInThePast(startDateAsMoment) ?
            "offering-schedule-summary.course.passed.different-year" :
            "offering-schedule-summary.course.different-year";
        return startDateAsMoment.format(formatter(dateTranslationKey));
    };
    DurationDomain.prototype.getGeneralDurationText = function(durationInMinutes, isDurationVaries, formatter) {
        if (isDurationVaries) {
            return formatter('duration.varies');
        }
        if (!durationInMinutes) {
            return '';
        }
        var duration = moment.duration(durationInMinutes, 'minutes');
        var hours = Math.floor(duration.asHours());
        var minutes = duration.minutes();
        var minutesText = minutes + " " + formatter('duration.units.minutes');
        return hours ?
            hours + " " + formatter('duration.units.hours') +
            (minutes ? " " + minutesText : '') :
            minutesText;
    };
    return DurationDomain;
}());
export {
    DurationDomain
};
//# sourceMappingURL=duration-domain.js.map