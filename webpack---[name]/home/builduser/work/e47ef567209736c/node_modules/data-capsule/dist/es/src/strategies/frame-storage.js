import {
    __extends
} from "tslib";
import greedySplit from 'greedy-split';
import connectMessageChannel from 'message-channel/connect';
import {
    BaseStorage
} from '../base-storage';
import {
    CONNECTION_MAX_TIMEOUT,
    MESSAGE_MAX_TIMEOUT,
    toError,
} from '../utils/constants';
var FrameStorageStrategy = /** @class */ (function(_super) {
    __extends(FrameStorageStrategy, _super);

    function FrameStorageStrategy(target, origin, token, _a) {
        var _b = _a === void 0 ? {} : _a,
            _c = _b.connectionMaxTimeout,
            connectionMaxTimeout = _c === void 0 ? CONNECTION_MAX_TIMEOUT : _c,
            _d = _b.messageMaxTimeout,
            messageMaxTimeout = _d === void 0 ? MESSAGE_MAX_TIMEOUT : _d;
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.origin = origin;
        _this.token = token;
        _this.channel = undefined;
        _this.connectionMaxTimeout = connectionMaxTimeout;
        _this.messageMaxTimeout = messageMaxTimeout;
        return _this;
    }
    FrameStorageStrategy.prototype.getChannel = function() {
        var _this = this;
        if (this.channel) {
            return Promise.resolve(this.channel);
        }
        return connectMessageChannel('data-capsule', {
            target: this.target,
            origin: this.origin,
            connectionMaxTimeout: this.connectionMaxTimeout,
            messageMaxTimeout: this.messageMaxTimeout,
        }).then(function(channel) {
            _this.channel = channel;
            return channel;
        });
    };
    FrameStorageStrategy.prototype.sendCommand = function(method) {
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        var payload = {
            data: params
        };
        return this.getChannel().then(function(sendToChannel) {
            var message = [_this.token, method, JSON.stringify(payload)].join('|');
            return sendToChannel(message).then(function(e) {
                var _a = greedySplit(e.data, '|', 2),
                    status = _a[0],
                    eventPayload = _a[1];
                if (status === 'reject') {
                    throw toError(eventPayload);
                }
                return JSON.parse(eventPayload).data;
            });
        });
    };
    FrameStorageStrategy.prototype.setItem = function(key, value, options) {
        return this.sendCommand('setItem', key, value, options);
    };
    FrameStorageStrategy.prototype.getItem = function(key, options) {
        return this.sendCommand('getItem', key, options);
    };
    FrameStorageStrategy.prototype.removeItem = function(key, options) {
        return this.sendCommand('removeItem', key, options);
    };
    FrameStorageStrategy.prototype.getAllItems = function(options) {
        return this.sendCommand('getAllItems', options);
    };
    return FrameStorageStrategy;
}(BaseStorage));
export {
    FrameStorageStrategy
};
//# sourceMappingURL=frame-storage.js.map