import {
    __assign,
    __awaiter,
    __extends,
    __generator,
    __rest
} from "tslib";
import {
    BaseStorage
} from './base-storage';
var DataCapsule = /** @class */ (function(_super) {
    __extends(DataCapsule, _super);

    function DataCapsule(_a) {
        var strategy = _a.strategy,
            options = __rest(_a, ["strategy"]);
        var _this = _super.call(this) || this;
        _this.storageStrategy = BaseStorage.verify(strategy);
        _this._options = options;
        return _this;
    }
    DataCapsule.prototype.setItem = function(key, value, options) {
        return __awaiter(this, void 0, void 0, function() {
            var validOptions;
            return __generator(this, function(_a) {
                validOptions = this._buildValidateOptions(this._options, options);
                return [2 /*return*/ , this.storageStrategy.setItem(key, value, validOptions)];
            });
        });
    };
    DataCapsule.prototype.getItem = function(key, options) {
        var validOptions = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.getItem(key, validOptions);
    };
    DataCapsule.prototype.removeItem = function(key, options) {
        var validOptions = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.removeItem(key, validOptions);
    };
    DataCapsule.prototype.getAllItems = function(options) {
        var validOptions = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.getAllItems(validOptions);
    };
    DataCapsule.prototype._buildValidateOptions = function(capsuleOptions, options) {
        options = __assign(__assign({}, capsuleOptions), options);
        options.scope = this.storageStrategy.extendScope(options.scope);
        if (!validateNamespace(options)) {
            throw new Error('namespace is required and should be a string');
        }
        return options;
    };
    return DataCapsule;
}(BaseStorage));
export {
    DataCapsule
};

function validateNamespace(options) {
    return typeof options.namespace === 'string';
}
//# sourceMappingURL=data-capsule.js.map