import {
    __extends
} from "tslib";
import {
    BaseStorage
} from '../base-storage';
import {
    NOT_FOUND
} from '../utils/constants';
import {
    LocalStorageStrategy,
} from './local-storage';
import {
    NullStrategy
} from './null-storage';
import {
    getUserId,
    WixStorageStrategy
} from './wix-storage';
var DELETED = '___DELETED___';
var CachedStorageStrategy = /** @class */ (function(_super) {
    __extends(CachedStorageStrategy, _super);

    function CachedStorageStrategy(_a) {
        var remoteStrategy = _a.remoteStrategy,
            localStrategy = _a.localStrategy;
        var _this = _super.call(this) || this;
        if (shouldIgnoreCache(remoteStrategy)) {
            localStrategy = new NullStrategy();
        }
        _this.remoteStrategy = BaseStorage.verify(remoteStrategy);
        _this.localStrategy = BaseStorage.verify(localStrategy || new LocalStorageStrategy());
        return _this;
    }
    CachedStorageStrategy.prototype.extendScope = function(scope) {
        return this.remoteStrategy.extendScope(scope);
    };
    CachedStorageStrategy.prototype._cacheItem = function(key, value, options) {
        return this.localStrategy.setItem(key, value, Object.assign(options, {
            expiration: 3600
        }));
    };
    CachedStorageStrategy.prototype.setItem = function(key, value, options) {
        var _this = this;
        return this.remoteStrategy
            .setItem(key, value, options)
            .then(function() {
                return _this._cacheItem(key, value, options);
            });
    };
    CachedStorageStrategy.prototype.removeItem = function(key, options) {
        var _this = this;
        return this.remoteStrategy
            .removeItem(key, options)
            .then(function() {
                return _this._cacheItem(key, DELETED, options);
            });
    };
    CachedStorageStrategy.prototype.getItem = function(key, options) {
        var _this = this;

        function throwIfDeletedOrReturn(value) {
            if (value === DELETED) {
                throw NOT_FOUND;
            }
            return value;
        }
        return this.localStrategy
            .getItem(key, options)
            .catch(function() {
                return _this._getRemoteAndCache(key, options);
            })
            .then(throwIfDeletedOrReturn);
    };
    CachedStorageStrategy.prototype.getAllItems = function(options) {
        var _this = this;
        return this.remoteStrategy
            .getAllItems(options)
            .then(function(items) {
                return Promise.all(Object.keys(items).map(function(key) {
                    return _this._cacheItem(key, items[key], options);
                })).then(function() {
                    return items;
                });
            });
    };
    CachedStorageStrategy.prototype._getRemoteAndCache = function(key, options) {
        var _this = this;
        return this.remoteStrategy
            .getItem(key, options)
            .then(function(value) {
                return _this._cacheItem(key, value, options).then(function() {
                    return value;
                });
            })
            .catch(function(e) {
                if (e === NOT_FOUND) {
                    return _this._cacheItem(key, DELETED, options).then(function() {
                        throw e;
                    });
                }
                throw e;
            });
    };
    return CachedStorageStrategy;
}(BaseStorage));
export {
    CachedStorageStrategy
};
// we don't support local strategy in case we cannot
// identify the user - mainly on viewer flow.
function shouldIgnoreCache(remoteStrategy) {
    return (remoteStrategy &&
        remoteStrategy.constructor === WixStorageStrategy &&
        getUserId() === '');
}
//# sourceMappingURL=cached-storage.js.map