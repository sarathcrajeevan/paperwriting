import {
    __extends
} from "tslib";
import {
    BaseStorage
} from '../base-storage';
import {
    NOT_FOUND
} from '../utils/constants';
var InMemoryStorageStrategy = /** @class */ (function(_super) {
    __extends(InMemoryStorageStrategy, _super);

    function InMemoryStorageStrategy() {
        var _this = _super.call(this) || this;
        _this.memoryMap = {};
        return _this;
    }
    InMemoryStorageStrategy.prototype.setItem = function(key, value, options) {
        if (typeof this.memoryMap[options.namespace] === 'undefined') {
            this.memoryMap[options.namespace] = {};
        }
        this.memoryMap[options.namespace][key] = value;
        return Promise.resolve();
    };
    InMemoryStorageStrategy.prototype.getItem = function(key, options) {
        var data = this.memoryMap[options.namespace] &&
            this.memoryMap[options.namespace][key];
        return typeof data !== 'undefined' ?
            Promise.resolve(data) :
            Promise.reject(NOT_FOUND);
    };
    InMemoryStorageStrategy.prototype.removeItem = function(key, options) {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete this.memoryMap[options.namespace][key];
        return Promise.resolve();
    };
    InMemoryStorageStrategy.prototype.getAllItems = function(options) {
        return Promise.resolve(this.memoryMap[options.namespace]);
    };
    return InMemoryStorageStrategy;
}(BaseStorage));
export {
    InMemoryStorageStrategy
};
//# sourceMappingURL=in-memory-storage.js.map