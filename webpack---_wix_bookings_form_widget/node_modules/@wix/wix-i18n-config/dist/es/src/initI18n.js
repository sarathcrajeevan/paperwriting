var _excluded = ["icuOptions", "parseErrorHandler", "polyfillRelativeTime"];

function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}

import {
    i18n
} from './i18n';
import ICU from './icu';
import {
    loadBrowserPolyfillsIfNeeded
} from './polyfills/browser';
export function initI18n(_ref) {
    var _ref$icuOptions = _ref.icuOptions,
        icuOptions = _ref$icuOptions === void 0 ? {} : _ref$icuOptions,
        _ref$parseErrorHandle = _ref.parseErrorHandler,
        parseErrorHandler = _ref$parseErrorHandle === void 0 ? undefined : _ref$parseErrorHandle,
        _ref$polyfillRelative = _ref.polyfillRelativeTime,
        polyfillRelativeTime = _ref$polyfillRelative === void 0 ? false : _ref$polyfillRelative,
        options = _objectWithoutPropertiesLoose(_ref, _excluded);

    var icu = new ICU(_objectSpread(_objectSpread({}, icuOptions), {}, {
        bindI18n: options.bindI18n,
        parseErrorHandler: parseErrorHandler
    }));
    var polyfill = loadBrowserPolyfillsIfNeeded(polyfillRelativeTime);
    return i18n(options, {
        icu: icu,
        polyfill: polyfill
    });
}