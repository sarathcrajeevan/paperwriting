import {
    ScheduleStatus,
} from '@wix/ambassador-services-catalog-server/types';
import {
    ServiceType,
} from '@wix/bookings-uou-types';
import {
    mapServiceLocations
} from './service-location.mapper';
import {
    mapServiceOfferedAsDto
} from './service-offered-as.mapper';
import {
    mapServicePricingPlansDto
} from './service-pricing-plans.mapper';
import {
    mapServicePaymentDto
} from './service-payment.mapper';
export function mapCatalogServiceResponseToService(serviceResponse) {
    var schedule = serviceResponse.schedules.find(function(serviceSchedule) {
        return serviceSchedule.status === ScheduleStatus.CREATED;
    });
    var service = serviceResponse.service;
    return {
        id: service.id,
        info: mapServiceInfo(serviceResponse),
        staffMembers: mapStaffMembers(serviceResponse),
        policy: mapServicePolicy(service, schedule),
        payment: mapServicePayment(serviceResponse),
        locations: mapServiceLocations(schedule, true),
        videoConferenceProviderId: extractServiceVideoConferenceProvider(schedule),
    };
}

function mapServiceInfo(serviceResponse) {
    var _a;
    var schedule = serviceResponse.schedules.find(function(serviceSchedule) {
        return serviceSchedule.status === ScheduleStatus.CREATED;
    });
    var info = serviceResponse.service.info;
    return {
        name: info === null || info === void 0 ? void 0 : info.name,
        slug: (_a = serviceResponse.slugs) === null || _a === void 0 ? void 0 : _a[0].name,
        type: mapServiceType(schedule),
        tagline: info === null || info === void 0 ? void 0 : info.tagLine,
    };
}

function mapServiceType(schedule) {
    return schedule.tags ?
        schedule.tags.find(function(tag) {
            return tag === ServiceType.COURSE ||
                tag === ServiceType.GROUP ||
                tag === ServiceType.INDIVIDUAL;
        }) || ServiceType.INDIVIDUAL :
        ServiceType.INDIVIDUAL;
}
export function mapServicePayment(serviceResponse) {
    return {
        offeredAs: mapServiceOfferedAsDto(serviceResponse),
        pricingPlanInfo: mapServicePricingPlansDto(serviceResponse, {
            onlyActive: true,
        }),
        paymentDetails: mapServicePaymentDto(serviceResponse),
    };
}

function mapServicePolicy(service, schedule) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    return {
        uouHidden: ((_a = service.customProperties) === null || _a === void 0 ? void 0 : _a.uouHidden) === 'true',
        isBookOnlineAllowed: (_b = service.policy) === null || _b === void 0 ? void 0 : _b.isBookOnlineAllowed,
        isPendingApprovalFlow: !!((_d = (_c = service.policy) === null || _c === void 0 ? void 0 : _c.bookingsApprovalPolicy) === null || _d === void 0 ? void 0 : _d.isBusinessApprovalRequired),
        maxParticipantsPerBook: (_e = service.policy) === null || _e === void 0 ? void 0 : _e.maxParticipantsPerBooking,
        capacity: schedule.capacity,
        minutesBeforeSlotBookWindowStart: (_g = (_f = service.policy) === null || _f === void 0 ? void 0 : _f.futureBookingsPolicy) === null || _g === void 0 ? void 0 : _g.limitXMinutesToTheFuture,
        minutesBeforeSlotBookWindowEnd: (_h = service.policy) === null || _h === void 0 ? void 0 : _h.bookUpToXMinutesBefore,
    };
}

function mapStaffMembers(serviceResponse) {
    var resources = serviceResponse.resources;
    return resources === null || resources === void 0 ? void 0 : resources.map(function(resource) {
        return {
            id: resource.id,
            name: resource.name,
        };
    });
}

function extractServiceVideoConferenceProvider(schedule) {
    var _a;
    return (_a = schedule === null || schedule === void 0 ? void 0 : schedule.conferenceProvider) === null || _a === void 0 ? void 0 : _a.providerId;
}
//# sourceMappingURL=service.mapper.js.map