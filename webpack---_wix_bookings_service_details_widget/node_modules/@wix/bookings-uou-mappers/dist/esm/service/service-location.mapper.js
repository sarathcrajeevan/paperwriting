import {
    __assign
} from "tslib";
import {
    LocationLocationType as LocationTypeDTO,
} from '@wix/ambassador-services-catalog-server/types';
import {
    ServiceLocationType,
} from '@wix/bookings-uou-types';
var LocationType;
(function(LocationType) {
    LocationType["CUSTOMER"] = "CUSTOMER";
    LocationType["OTHER"] = "OTHER";
    LocationType["BUSINESS"] = "BUSINESS";
})(LocationType || (LocationType = {}));
export function locationTypeFrom(type) {
    var mapping = new Map([
        ['CUSTOM', LocationType.CUSTOMER],
        ['OWNER_BUSINESS', LocationType.BUSINESS],
        ['OWNER_CUSTOM', LocationType.OTHER],
    ]);
    return mapping.get(type);
}
export function mapBusinessLocationsToServiceLocations(locationsResponse, multiLocationRemoveAddressNameFallback) {
    if (multiLocationRemoveAddressNameFallback === void 0) {
        multiLocationRemoveAddressNameFallback = false;
    }
    return locationsResponse.locations.map(function(businessLocation) {
        return mapServiceLocation({
            businessLocation: businessLocation,
            locationType: ServiceLocationType.OWNER_BUSINESS,
        }, multiLocationRemoveAddressNameFallback);
    });
}
export function mapServiceLocations(schedule, multiLocationRemoveAddressNameFallback) {
    var _a, _b;
    if (multiLocationRemoveAddressNameFallback === void 0) {
        multiLocationRemoveAddressNameFallback = false;
    }
    return schedule.availability.useDefaultLocation === false //do not change! If its undefined so it should go to else
        ?
        (_b = (_a = schedule.availability) === null || _a === void 0 ? void 0 : _a.locations) === null || _b === void 0 ? void 0 : _b.map(function(location) {
            return mapServiceLocation(location, multiLocationRemoveAddressNameFallback);
        }) :
        [
            mapServiceLocation(schedule.location, multiLocationRemoveAddressNameFallback),
        ];
}
export function mapServiceLocation(location, multiLocationRemoveAddressNameFallback) {
    if (multiLocationRemoveAddressNameFallback === void 0) {
        multiLocationRemoveAddressNameFallback = false;
    }
    return __assign(__assign({
        type: location.locationType
    }, (location.address ? {
        locationText: location.address
    } : {})), (location.businessLocation ?
        {
            businessLocation: mapBusinessLocation(location.businessLocation, multiLocationRemoveAddressNameFallback),
        } :
        {}));
}
export function mapBusinessLocation(businessLocation, multiLocationRemoveAddressNameFallback) {
    if (multiLocationRemoveAddressNameFallback === void 0) {
        multiLocationRemoveAddressNameFallback = false;
    }
    return {
        id: businessLocation.id,
        name: businessLocation.name,
        default: businessLocation.default,
        phone: businessLocation.phone,
        email: businessLocation.email,
        address: getMappedAddress(businessLocation, multiLocationRemoveAddressNameFallback),
    };
}

function getMappedAddress(businessLocation, multiLocationRemoveAddressNameFallback) {
    var address = businessLocation.address || {};
    if (!address.formattedAddress) {
        address.formattedAddress = !multiLocationRemoveAddressNameFallback ?
            businessLocation.name :
            '';
    }
    return address;
}
export function mapLocationType(platformLocationType) {
    switch (platformLocationType) {
        case LocationTypeDTO.CUSTOM:
            return ServiceLocationType.CLIENT_PLACE;
        case LocationTypeDTO.OWNER_BUSINESS:
            return ServiceLocationType.OWNER_BUSINESS;
        case LocationTypeDTO.OWNER_CUSTOM:
            return ServiceLocationType.OWNER_CUSTOM;
        default:
            return ServiceLocationType.OWNER_BUSINESS;
    }
}
//# sourceMappingURL=service-location.mapper.js.map