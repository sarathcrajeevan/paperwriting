"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resolve = void 0;
var Identifiers_1 = require("../types/Identifiers");
var ContextProps_1 = require("../types/ContextProps");
var resolve_payload_1 = require("./resolve-payload");
var sort_1 = require("./sort");
var build_og_image_1 = require("../utils/build-og-image");
var apply_default_tags_1 = require("../tags/defaults/apply-default-tags");
var update_by_identifier_1 = require("../tags/values/update-by-identifier");
var get_by_identifier_1 = require("../tags/values/get-by-identifier");
var get_link_1 = require("./utils/get-link");
var robots_tag_1 = require("../tags/robots-tag/robots-tag");
var consts_1 = require("../consts/consts");

function resolve(payload, context, _a) {
    var _b = (_a === void 0 ? {} : _a).withDefaults,
        withDefaults = _b === void 0 ? true : _b;
    context = context || {};
    var result = resolve_payload_1.resolvePayload(payload);
    var robots = get_by_identifier_1.getValueByIdentifier(result.tags, Identifiers_1.IDENTIFIERS.ROBOTS);
    var isIndexableBySchema = robots !== undefined &&
        !robots_tag_1.isRobotsDirectiveExists(robots, robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX);
    if (isIndexableBySchema) {
        var robotsTagValueWithoutIndex = robots_tag_1.getRobotsTagValueWithoutDirective(get_by_identifier_1.getValueByIdentifier(result.tags, Identifiers_1.IDENTIFIERS.ROBOTS), consts_1.INDEX);
        var newRobotsTagValue = robots_tag_1.getRobotsTagValueWithoutDirective(robotsTagValueWithoutIndex, robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX);
        result.tags = update_by_identifier_1.updateValueByIdentifier(result.tags, Identifiers_1.IDENTIFIERS.ROBOTS, newRobotsTagValue);
    }
    if (withDefaults) {
        if (!isIndexableBySchema && !isIndexable(context)) {
            var newRobotsTagValue = robots_tag_1.getRobotsTagValueWithDirective(get_by_identifier_1.getValueByIdentifier(result.tags, Identifiers_1.IDENTIFIERS.ROBOTS), robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX);
            result.tags = update_by_identifier_1.updateValueByIdentifier(result.tags, Identifiers_1.IDENTIFIERS.ROBOTS, newRobotsTagValue);
        }
        result.tags = apply_default_tags_1.applyDefaultTags(result.tags, context)
            .concat(get_link_1.getLink(context, ContextProps_1.CONTEXT_PROPS.NEXT, 'next'))
            .concat(get_link_1.getLink(context, ContextProps_1.CONTEXT_PROPS.PREV, 'prev'));
        result.tags = robots_tag_1.formatRobotsTagForRendering(result.tags);
        result.tags = build_og_image_1.applyOgImageModifications(result.tags);
    }
    result.tags = sort_1.sort(result.tags);
    return result;
}
exports.resolve = resolve;

function isIndexable(context) {
    return context[ContextProps_1.CONTEXT_PROPS.INDEX_SITE] && context[ContextProps_1.CONTEXT_PROPS.INDEX_PAGE];
}