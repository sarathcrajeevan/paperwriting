"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getValueByIdentifier = exports.getTitle = exports.getStaticMarkup = exports.getSchemas = exports.getMetaTags = exports.getLinks = exports.getDescription = exports.getCanonical = exports.addMetaTag = void 0;
var get_by_identifier_1 = require("../tags/values/get-by-identifier");
var Identifiers_1 = require("../types/Identifiers");
var TagTypes_1 = require("../types/TagTypes");
var render_to_static_markup_1 = require("./render-to-static-markup");
var setters_1 = require("./setters");
var identify_1 = require("./utils/identify");
var clone_1 = require("./utils/clone");

function getValueByIdentifier(_a, identifier) {
    var tags = (_a === void 0 ? {} : _a).tags;
    return get_by_identifier_1.getValueByIdentifier(tags, identifier);
}
exports.getValueByIdentifier = getValueByIdentifier;

function addMetaTag(data, props) {
    var identifier = identify_1.identify({
        type: TagTypes_1.TAG_TYPES.META,
        props: props,
    });
    if (identifier) {
        return setters_1.updateValueByIdentifier(data, identifier, props.content);
    }
    var result = clone_1.clone(data);
    result.tags.push({
        type: TagTypes_1.TAG_TYPES.META,
        props: props,
    });
    return result;
}
exports.addMetaTag = addMetaTag;

function getTitle(data) {
    return getValueByIdentifier(data, Identifiers_1.IDENTIFIERS.TITLE);
}
exports.getTitle = getTitle;

function getDescription(data) {
    return getValueByIdentifier(data, Identifiers_1.IDENTIFIERS.DESCRIPTION);
}
exports.getDescription = getDescription;

function getCanonical(data) {
    return getValueByIdentifier(data, Identifiers_1.IDENTIFIERS.CANONICAL);
}
exports.getCanonical = getCanonical;

function getMetaTags(data, filter) {
    var tags = (data || {}).tags;
    if (Array.isArray(tags)) {
        return tags.reduce(function(acc, curr) {
            if (curr && curr.type === TagTypes_1.TAG_TYPES.META && curr.props) {
                if (filter) {
                    var matches = Object.keys(filter).every(function(key) {
                        return curr.props[key] === filter[key];
                    });
                    if (!matches) {
                        return acc;
                    }
                }
                return acc.concat(curr.props);
            }
            return acc;
        }, []);
    }
    return [];
}
exports.getMetaTags = getMetaTags;

function getSchemas(_a, options) {
    var tags = (_a === void 0 ? {} : _a).tags;
    return get_by_identifier_1.getSchemasArray(tags, options);
}
exports.getSchemas = getSchemas;

function getLinks(data) {
    if (data === void 0) {
        data = {};
    }
    var tags = data.tags || [];
    return tags
        .filter(function(tag) {
            return tag.type === TagTypes_1.TAG_TYPES.LINK &&
                tag.props &&
                tag.props.rel !== Identifiers_1.IDENTIFIERS.CANONICAL.toLowerCase();
        })
        .map(function(tag) {
            return (__assign({}, tag.props));
        });
}
exports.getLinks = getLinks;

function getStaticMarkup(tags, options) {
    if (options === void 0) {
        options = {
            logError: function() {}
        };
    }
    return render_to_static_markup_1.renderToStaticMarkup(tags, options).join('\n');
}
exports.getStaticMarkup = getStaticMarkup;