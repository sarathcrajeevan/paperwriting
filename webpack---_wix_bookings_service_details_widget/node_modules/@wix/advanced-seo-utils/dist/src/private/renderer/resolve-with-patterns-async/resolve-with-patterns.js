"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resolveWithPatterns = void 0;
var build_og_image_1 = require("../../utils/build-og-image");
var resolve_payload_1 = require("../resolve-payload");
var resolve_is_indexable_1 = require("../utils/resolve-is-indexable");
var sort_1 = require("../sort");
var get_link_1 = require("../utils/get-link");
var fill_in_pattern_blob_1 = require("../../patterns/fill-in-pattern-blob");
var remove_black_listed_tags_1 = require("../utils/remove-black-listed-tags");
var apply_options_1 = require("../../options/apply-options");
var utils_1 = require("../../adapters/utils");
var robots_tag_1 = require("../../tags/robots-tag/robots-tag");

function resolveWithPatterns(payload, context, options) {
    if (options === void 0) {
        options = {
            logError: function() {}
        };
    }
    var result = resolve_payload_1.resolvePayload(payload, options);
    var contextWithOptions = __assign(__assign({}, context), apply_options_1.applyOptions(result.options));
    result.tags = resolve_is_indexable_1.resolveIsIndexable(result.tags, contextWithOptions);
    result.tags = result.tags
        .concat(get_link_1.getLink(contextWithOptions, utils_1.siteIDs.NEXT, 'next'))
        .concat(get_link_1.getLink(contextWithOptions, utils_1.siteIDs.PREV, 'prev'));
    result = fill_in_pattern_blob_1.fillInPatternBlob(result, contextWithOptions);
    result.tags = build_og_image_1.applyOgImageModifications(result.tags);
    result.tags = remove_black_listed_tags_1.removeBlackListedTags(result.tags);
    result.tags = robots_tag_1.formatRobotsTagForRendering(result.tags);
    result.tags = sort_1.sort(result.tags);
    return result;
}
exports.resolveWithPatterns = resolveWithPatterns;