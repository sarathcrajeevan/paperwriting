"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getIndexableValue = exports.resolveIsIndexable = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var update_by_identifier_1 = require("../../tags/values/update-by-identifier");
var get_by_identifier_1 = require("../../tags/values/get-by-identifier");
var static_page_v2_1 = require("../../item-types/static-page-v2");
var utils_1 = require("../../adapters/utils");
var robots_tag_1 = require("../../tags/robots-tag/robots-tag");
var experimentEnabled_1 = require("./experimentEnabled");
var INDEX = 'index';
var NO_INDEX = 'noindex';
var adapter = utils_1.enrichWithSiteLevelData(static_page_v2_1.adapter);
exports.resolveIsIndexable = function(tags, adapterData) {
    if (tags === void 0) {
        tags = [];
    }
    if (adapterData === void 0) {
        adapterData = {};
    }
    var siteLevel = getIndexableValue(adapterData[adapter.IDs.INDEX_SITE]); // <Boolean> (* defaults to true *)
    var patternLevel = getIndexableValue(adapterData[adapter.IDs.ROBOTS_FROM_USER_PATTERN]); // <String> 'noindex' / 'index' / 'max-snippet:20' (* defaults to undefined *)
    var overrides = getIndexableValue(get_by_identifier_1.getValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.ROBOTS)); // <String> 'noindex' / 'index' / 'max-snippet:20' (* defaults to undefined *)
    var isNoindex;
    if (experimentEnabled_1.experimentEnabled('specs.seo.ReverseResolveIsIndexableLogic', adapterData)) {
        isNoindex =
            siteLevel === NO_INDEX ||
            overrides === NO_INDEX ||
            (patternLevel === NO_INDEX && overrides !== INDEX);
    } else {
        isNoindex =
            siteLevel === NO_INDEX ||
            overrides === NO_INDEX ||
            patternLevel === NO_INDEX;
    }
    if (isNoindex) {
        var existingRobotsTagValue = get_by_identifier_1.getValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.ROBOTS);
        var robotsTagValueWithNoindex = robots_tag_1.getRobotsTagValueWithDirective(existingRobotsTagValue, robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX);
        return update_by_identifier_1.updateValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.ROBOTS, robotsTagValueWithNoindex);
    }
    return tags;
};

function getIndexableValue(value) {
    if (typeof value === 'boolean') {
        return value ? INDEX : NO_INDEX;
    }
    if (robots_tag_1.isRobotsDirectiveExists(value, robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX)) {
        return NO_INDEX;
    } else if (robots_tag_1.isRobotsDirectiveExists(value, INDEX) ||
        robots_tag_1.getDirectiveValue(value, robots_tag_1.ROBOTS_DIRECTIVES.NOINDEX) ===
        robots_tag_1.REMOVE_ROBOTS_DIRECTIVE_OVERRIDE_VALUE) {
        return INDEX;
    } else {
        return '';
    }
}
exports.getIndexableValue = getIndexableValue;