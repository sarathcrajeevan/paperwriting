"use strict";
var _a;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var get_1 = require("../../utils/get");
var ContextProps_1 = require("../../types/ContextProps");
var utils_1 = require("../../adapters/utils");
var index_1 = require("../../consts/index");
var sanitize_url_1 = require("../../utils/sanitize-url");
var IDs = {
    INDEX_PAGE: 'page.index',
    GROUP_TAB_TITLE: 'group.tab.title',
    GROUP_NAME: 'group.name',
    GROUP_DESCRIPTION: 'group.description',
    GROUP_IMAGE_URL: 'group.image.url',
    GROUP_IMAGE_WIDTH: 'group.image.width',
    GROUP_IMAGE_HEIGHT: 'group.image.height',
    GROUP_TAB_URL: 'group.tab.url',
    GROUP_ROBOTS: 'group.robots',
};
var userVisible = [
    IDs.GROUP_NAME,
    IDs.GROUP_TAB_URL,
    IDs.GROUP_DESCRIPTION,
    IDs.GROUP_IMAGE_URL,
    IDs.GROUP_TAB_TITLE,
];
var TAB_TYPES = {
    ABOUT: 'about',
    FEED: 'feed',
    MEDIA: 'media',
    MEMBERS: 'members',
};
var INDEXED_TABS = [TAB_TYPES.ABOUT, TAB_TYPES.FEED];
var labelByTabType = (_a = {},
    _a[TAB_TYPES.FEED] = 'discussion',
    _a);
exports.default = {
    IDs: IDs,
    getData: function(item) {
        var _a;
        var tabType = get_1.get(item, 'tabType');
        var tabLabel = labelByTabType[tabType] || tabType;
        return _a = {},
            _a[IDs.INDEX_PAGE] = get_1.getRawValue(item, "context." + ContextProps_1.CONTEXT_PROPS.INDEX_PAGE),
            _a[IDs.GROUP_TAB_TITLE] = get_1.get(item, "tabs." + tabLabel),
            _a[IDs.GROUP_NAME] = get_1.get(item, 'group.details.title'),
            _a[IDs.GROUP_DESCRIPTION] = get_1.get(item, 'group.details.description'),
            _a[IDs.GROUP_IMAGE_URL] = get_1.get(item, 'group.details.logoUrl'),
            _a[IDs.GROUP_IMAGE_WIDTH] = get_1.get(item, 'group.details.logo.width'),
            _a[IDs.GROUP_IMAGE_HEIGHT] = get_1.get(item, 'group.details.logo.height'),
            _a[IDs.GROUP_TAB_URL] = sanitize_url_1.sanitizeUrl(get_1.get(item, 'directUrl')),
            _a[IDs.GROUP_ROBOTS] = INDEXED_TABS.includes(tabType) ? index_1.INDEX : index_1.NO_INDEX,
            _a;
    },
    getSdStatus: function() {
        return index_1.SD_STATUS.DOES_NOT_EXIST;
    },
    getLegacySeoBlob: function() {},
    getSlug: function() {
        return '';
    },
    updateItemDataWithSlug: function(item) {
        return item;
    },
    getBiData: function() {},
    getKeys: function() {
        return utils_1.getKeys(IDs, userVisible);
    },
    getSdKeys: function() {
        return [];
    },
};