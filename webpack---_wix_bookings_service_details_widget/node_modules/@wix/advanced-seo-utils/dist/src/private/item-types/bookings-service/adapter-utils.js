"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getStructuredData = exports.getSdType = exports.getUrlParts = exports.getOfferAvailability = exports.getServiceUrl = void 0;
var get_1 = require("../../utils/get");
var structure_data_utils_1 = require("../../adapters/structure-data-utils");
var ContextProps_1 = require("../../types/ContextProps");
var constants_1 = require("./constants");
exports.getServiceUrl = function(serviceResponse) {
    if (serviceResponse === void 0) {
        serviceResponse = {};
    }
    return serviceResponse.urls &&
        get_1.get(serviceResponse, 'urls.servicePageUrl.base').concat(get_1.get(serviceResponse, 'urls.servicePageUrl.path'));
};
exports.getOfferAvailability = function(_a) {
    var _b = _a === void 0 ? {} : _a,
        isBookable = _b.isBookable,
        isFullyBooked = _b.isFullyBooked,
        isServiceAvailable = _b.isServiceAvailable,
        isTooEarlyToBook = _b.isTooEarlyToBook,
        isTooLateToBook = _b.isTooLateToBook;
    return isBookable &&
        isServiceAvailable &&
        !isTooEarlyToBook &&
        !isTooLateToBook &&
        !isFullyBooked ?
        'OnlineOnly' :
        'SoldOut';
};
exports.getUrlParts = function(url) {
    if (typeof url !== 'string') {
        return undefined;
    }
    var _a =
        // eslint-disable-next-line no-useless-escape
        (/^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)/gim.exec(url) || [])[0],
        base = _a === void 0 ? '' : _a;
    var path = url.replace(base, '');
    return {
        base: base,
        path: path,
    };
};
exports.getSdType = function(serviceResponse) {
    return get_1.get(serviceResponse, 'schedules.0.tags.0').toLowerCase() ===
        constants_1.SESSION_TYPES.COURSE ?
        constants_1.SESSION_TYPES.COURSE :
        constants_1.SESSION_TYPES.SERVICE;
};
exports.getStructuredData = function(IDs, item) {
    var _a;
    if (!IDs) {
        return {};
    }
    var serviceResponse = item.serviceResponse;
    var url = exports.getServiceUrl(serviceResponse);
    var offerAvailability = exports.getOfferAvailability(get_1.getRawValue(item, 'bookingsPolicyDto'));
    var price = get_1.get(serviceResponse, 'schedules.0.rate.labeledPriceOptions.general.amount');
    var priceCurrency = get_1.get(serviceResponse, 'schedules.0.rate.labeledPriceOptions.general.currency');
    var sdType = exports.getSdType(serviceResponse);
    var validUntil = get_1.get(serviceResponse, 'schedules.0.availability.end');
    var domain = get_1.get(serviceResponse, 'urls.servicePageUrl.base');
    var imagesData = (get_1.getRawValue(serviceResponse, 'service.info.images') || []).map(function(_a) {
        var imageURL = _a.url,
            width = _a.width,
            height = _a.height;
        return ({
            url: imageURL,
            width: width,
            height: height,
        });
    });
    var _b = structure_data_utils_1.getImageObject('images', imagesData).images,
        images = _b === void 0 ? '' : _b;
    var offers = parseInt(price, 10) > 0 ?
        __assign({
            '@type': 'offer',
            availability: "http://schema.org/" + offerAvailability,
            price: price,
            priceCurrency: priceCurrency,
            url: url
        }, (validUntil ? {
            validUntil: validUntil
        } : {})) : '';
    var providerName = get_1.get(item, "context." + ContextProps_1.CONTEXT_PROPS.BUSINESS_NAME);
    var provider = sdType.toLowerCase() === 'course' ?
        providerName && {
            '@type': 'Organization',
            name: providerName,
            sameAs: domain,
            url: domain,
        } :
        '';
    return _a = {},
        _a[IDs.AVAILABILITY] = offerAvailability,
        _a[IDs.INSTRUCTOR_NAME] = get_1.get(serviceResponse, 'resources.0.name'),
        _a[IDs.INSTRUCTOR_IMAGE] = get_1.get(serviceResponse, 'resources.0.image.url'),
        _a[IDs.SD_JSON_PROVIDER] = provider,
        _a[IDs.SD_JSON_IMAGES] = images,
        _a[IDs.SD_JSON_OFFERS] = offers,
        _a;
};