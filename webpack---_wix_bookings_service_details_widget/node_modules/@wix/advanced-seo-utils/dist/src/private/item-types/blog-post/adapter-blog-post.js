"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IDs = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var update_by_identifier_1 = require("../../tags/values/update-by-identifier");
var get_1 = require("../../utils/get");
var build_og_image_preview_1 = require("../../utils/build-og-image-preview");
var utils_1 = require("../../adapters/utils");
var get_post_full_url_1 = require("./calculated/get-post-full-url");
var getCurrentLanguage_1 = require("./calculated/getCurrentLanguage");
var get_multilingual_tags_1 = require("../../renderer/get-multilingual-tags");
var consts_1 = require("../../consts");
var utils_2 = require("../utils");
var consts_2 = require("../consts");
exports.IDs = {
    INDEX_POST: 'blog-post.index',
    TITLE: 'blog-post.title',
    HEADLINE: 'blog-post.headline',
    DESCRIPTION: 'blog-post.description',
    POST_PAGE_URL: 'blog-post.url',
    COVER_IMAGE: 'blog-post.cover.image',
    COVER_IMAGE_HEIGHT: 'blog-post.cover.image.height',
    COVER_IMAGE_WIDTH: 'blog-post.cover.image.width',
    AUTHOR: 'blog-post.author',
    AUTHOR_IMAGE_URL: 'blog-post.author.image.url',
    AUTHOR_IMAGE_HEIGHT: 'blog-post.author.image.height',
    AUTHOR_IMAGE_WIDTH: 'blog-post.author.image.width',
    PUBLISHER_ID: 'blog-post.publisher.id',
    PUBLISHER_NAME: 'blog-post.publisher.name',
    PUBLISH_DATE: 'blog-post.publish.date',
    LAST_MODIFIED_DATE: 'blog-post.modified.date',
    EXCERPT: 'blog-post.excerpt',
    AMP_URL: 'blog-post.amp.url',
    DISABLE_SCHEMA: 'blog-post.disable-schema',
    DISABLE_AMP: 'blog-post.disable-amp',
    CATEGORIES: 'blog-post.categories',
    SD_DISABLE_SCHEMA: 'blog-post.disable-schema',
    BLOG_FEED_ROUTE: 'blog-post.feed-route',
};
var userVisible = [
    exports.IDs.TITLE,
    exports.IDs.POST_PAGE_URL,
    exports.IDs.COVER_IMAGE,
    exports.IDs.AUTHOR,
    exports.IDs.LAST_MODIFIED_DATE,
    exports.IDs.PUBLISH_DATE,
    exports.IDs.EXCERPT,
];
var userVisibleSdOnly = [
    exports.IDs.CATEGORIES,
    exports.IDs.HEADLINE,
    exports.IDs.DESCRIPTION,
    exports.IDs.COVER_IMAGE_WIDTH,
    exports.IDs.COVER_IMAGE_HEIGHT,
    exports.IDs.AUTHOR_IMAGE_URL,
    exports.IDs.AUTHOR_IMAGE_WIDTH,
    exports.IDs.AUTHOR_IMAGE_HEIGHT,
];
var requiredSchemaVariables = [utils_1.siteIDs.BUSINESS_LOGO, utils_1.siteIDs.BUSINESS_NAME];
var SchemaTypes = {
    BLOG_POST_BLOG_POSTING: 'blog-post-blog-posting-preset',
    BLOG_POST_NEWS_ARTICLE: 'blog-post-news-article-preset',
    BLOG_POST_ARTICLE: 'blog-post-article-preset',
};
var getSdStatus = function(item) {
    if (utils_1.hasMissingSchemaVariables(requiredSchemaVariables, item)) {
        return consts_1.SD_STATUS.DISABLED_DUE_TO_MISSING_INFO;
    }
    return consts_1.SD_STATUS.ENABLED;
};
exports.default = {
    IDs: exports.IDs,
    SchemaTypes: SchemaTypes,
    requiredSchemaVariables: requiredSchemaVariables,
    getData: function(item) {
        var _a;
        var data = (_a = {},
            _a[exports.IDs.INDEX_POST] = get_1.getRawValue(item, "post.noIndex") ? 'noindex' : '',
            _a[exports.IDs.TITLE] = get_1.get(item, 'post.title'),
            _a[exports.IDs.HEADLINE] = get_1.get(item, 'post.title').substring(0, 110),
            _a[exports.IDs.DESCRIPTION] = get_1.get(item, 'post.description'),
            _a[exports.IDs.POST_PAGE_URL] = get_post_full_url_1.getPostFullUrl(item),
            _a[exports.IDs.COVER_IMAGE] = build_og_image_preview_1.buildOgImagePreviewUrl({
                url: get_1.get(item, 'post.image.url'),
                width: get_1.get(item, 'post.image.width'),
                height: get_1.get(item, 'post.image.height'),
            }),
            _a[exports.IDs.COVER_IMAGE_HEIGHT] = get_1.get(item, 'post.image.height'),
            _a[exports.IDs.COVER_IMAGE_WIDTH] = get_1.get(item, 'post.image.width'),
            _a[exports.IDs.AUTHOR] = get_1.get(item, 'post.owner.name'),
            _a[exports.IDs.AUTHOR_IMAGE_URL] = build_og_image_preview_1.buildOgImagePreviewUrl({
                url: get_1.get(item, 'post.owner.image.url'),
                height: get_1.get(item, 'post.owner.image.height'),
                width: get_1.get(item, 'post.owner.image.width'),
            }),
            _a[exports.IDs.AUTHOR_IMAGE_HEIGHT] = get_1.get(item, 'post.owner.image.height'),
            _a[exports.IDs.AUTHOR_IMAGE_WIDTH] = get_1.get(item, 'post.owner.image.width'),
            _a[exports.IDs.PUBLISHER_ID] = get_1.get(item, 'post.publisher.id'),
            _a[exports.IDs.PUBLISHER_NAME] = get_1.get(item, 'post.publisher.name'),
            _a[exports.IDs.PUBLISH_DATE] = get_1.get(item, 'post.firstPublishedDate'),
            _a[exports.IDs.LAST_MODIFIED_DATE] = get_1.get(item, 'post.lastPublishedDate'),
            _a[exports.IDs.EXCERPT] = get_1.get(item, 'post.excerpt'),
            _a[exports.IDs.AMP_URL] = get_1.get(item, 'post.amphtml'),
            _a[exports.IDs.DISABLE_SCHEMA] = !get_1.getRawValue(item, 'postsSettings.isSchemaEnabled'),
            _a[exports.IDs.DISABLE_AMP] = !get_1.getRawValue(item, 'postsSettings.isAmpEnabled'),
            _a[exports.IDs.CATEGORIES] = get_1.get(item, 'post.categories'),
            _a[exports.IDs.SD_DISABLE_SCHEMA] = getSdStatus(item) !== consts_1.SD_STATUS.ENABLED,
            _a[exports.IDs.BLOG_FEED_ROUTE] = get_1.get(item, 'post.blogFeedRoute') ||
            utils_2.getRssFullURL({
                siteUrl: get_1.get(item, 'context.siteUrl'),
                rssRoute: consts_2.RSS_ROUTES[consts_2.RSS_ROUTE_TYPES.BLOG],
            }),
            _a);
        return data;
    },
    getSdStatus: getSdStatus,
    getLegacySeoBlob: function(item) {
        var tags = update_by_identifier_1.updateValueByIdentifier([], Identifiers_1.IDENTIFIERS.TITLE, get_1.get(item, 'legacySeoData.title'));
        tags = update_by_identifier_1.updateValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.DESCRIPTION, get_1.get(item, 'legacySeoData.description'));
        return {
            tags: tags
        };
    },
    getBiData: function(item) {
        return ({
            id: get_1.get(item, 'post.id'),
            name: get_1.get(item, 'post.title'),
        });
    },
    getDynamicPatternsSchema: function(item) {
        var translatedPages = get_1.getRawValue(item, 'translatedPages') || [];
        var hasTranslations = Boolean(translatedPages.length);
        var currentLanguageCode = getCurrentLanguage_1.getCurrentLanguage(item);
        var currentSeoLang = getCurrentLanguage_1.getCurrentSeoLang(item);
        var currentUrl = get_post_full_url_1.getPostFullUrl(item);
        var isIndexed = !get_1.getRawValue(item, 'post.noIndex');
        if (!item || !hasTranslations || !isIndexed) {
            return {
                tags: []
            };
        }
        var siteUrl = get_1.get(item, 'context.siteUrl');
        var tags = get_multilingual_tags_1.getMultilingualTags(__spreadArrays([{
            url: currentUrl,
            langCode: currentLanguageCode,
            seoLang: currentSeoLang,
        }], translatedPages, [{
            url: siteUrl,
            langCode: 'x-default'
        }, ]));
        return {
            tags: tags
        };
    },
    getKeys: function() {
        return utils_1.getKeys(exports.IDs, userVisible);
    },
    getSdKeys: function() {
        return utils_1.getKeys(exports.IDs, userVisibleSdOnly);
    },
    getSlug: function(item) {
        return get_1.get(item, 'post.slug');
    },
    setFullUrl: function(item, url) {
        if (url === void 0) {
            url = '';
        }
        item = JSON.parse(JSON.stringify(item));
        item.post.path = url;
        item.post.canonicalUrl = url;
        return item;
    },
    getFullUrl: function(item) {
        return get_post_full_url_1.getPostFullUrl(item);
    },
    updateItemDataWithSlug: function(item) {
        return item;
    },
    hasMultilingual: function(item) {
        return Array.isArray(get_1.getRawValue(item, 'translatedPages'));
    },
};