"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GROUPS_POST = void 0;
var builders_1 = require("../../types/builders");
var adapter_groups_post_1 = __importDefault(require("./adapter-groups-post"));
var utils_1 = require("../../adapters/utils");
var IDs = adapter_groups_post_1.default.IDs;
exports.GROUPS_POST = {
    tags: __spreadArrays([
        builders_1.buildTitle("{{" + IDs.POST_CONTENT_60 + "}} | {{" + IDs.GROUP_NAME + "}}"),
        builders_1.buildStandardMeta('description', "{{" + IDs.POST_CONTENT_200 + "}}"),
        builders_1.buildStandardMeta('robots', 'index')
    ], builders_1.buildOgMetaRefs(), [
        builders_1.buildOgMeta('og:image', "{{" + IDs.POST_IMAGE_URL + "}}"),
        builders_1.buildOgMeta('og:image:width', "{{" + IDs.POST_IMAGE_WIDTH + "}}"),
        builders_1.buildOgMeta('og:image:height', "{{" + IDs.POST_IMAGE_HEIGHT + "}}"),
        builders_1.buildOgMeta('og:site_name', "{{" + utils_1.siteIDs.SITE_NAME + "}}"),
        builders_1.buildOgMeta('og:url', "{{" + IDs.POST_URL + "}}"),
        builders_1.buildOgMeta('og:type', 'website'),
        builders_1.buildLink({
            rel: 'canonical',
            href: "{{" + IDs.POST_URL + "}}"
        }),
        builders_1.buildOgMeta('article:author', "{{" + IDs.POST_AUTHOR + "}}"),
        builders_1.buildOgMeta('article:published_time', "{{" + IDs.POST_PUBLISH_DATE + "}}"),
        builders_1.buildOgMeta('article:modified_time', "{{" + IDs.POST_MODIFIED_DATE + "}}")
    ], builders_1.buildTwitterMetaRefs()),
};