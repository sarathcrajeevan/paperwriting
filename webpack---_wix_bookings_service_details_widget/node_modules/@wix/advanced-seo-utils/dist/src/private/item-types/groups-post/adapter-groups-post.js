"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var get_1 = require("../../utils/get");
var ContextProps_1 = require("../../types/ContextProps");
var utils_1 = require("../../adapters/utils");
var consts_1 = require("../../consts");
var IDs = {
    INDEX_PAGE: 'page.index',
    POST_CONTENT: 'post.description',
    POST_CONTENT_60: 'group.post.content.60',
    POST_CONTENT_200: 'group.post.content.200',
    GROUP_NAME: 'group.name',
    POST_URL: 'group.post.url',
    POST_AUTHOR: 'groups.post.author',
    POST_PUBLISH_DATE: 'groups.post.publish.date',
    POST_MODIFIED_DATE: 'groups.post.modified.date',
    DISABLE_SCHEMA: 'groups.post.disable-schema',
    POST_OWNER_IMAGE_HEIGHT: 'post.owner.image.height',
    POST_OWNER_IMAGE_WIDTH: 'post.owner.image.width',
    POST_OWNER_IMAGE_URL: 'post.owner.image.url',
    COMMENTS_COUNT: 'post.comments.count',
    LIKE_COUNT: 'post.interaction.like.count',
    POST_IMAGE_HEIGHT: 'post.coverImage.height',
    POST_IMAGE_WIDTH: 'post.coverImage.width',
    POST_IMAGE_URL: 'post.coverImage.url',
    POST_PUBLISHER_ID: 'publisher.id',
    POST_PUBLISHER_LOGO_URL: 'publisher.logo.url',
};
var getPostImage = function(item) {
    var _a = get_1.getRawValue(item, 'images.0') || {},
        url = _a.url,
        width = _a.width,
        height = _a.height;
    if (url && width && height) {
        return {
            url: url,
            width: width,
            height: height
        };
    }
    return {
        url: get_1.get(item, 'group.details.logoUrl'),
        width: get_1.get(item, 'group.details.logo.width'),
        height: get_1.get(item, 'group.details.logo.height'),
    };
};
var userVisible = [];
var requiredSchemaVariables = [];
var SchemaTypes = {
    GROUPS_POST: 'groups-post-preset',
};
exports.default = {
    IDs: IDs,
    requiredSchemaVariables: requiredSchemaVariables,
    SchemaTypes: SchemaTypes,
    getData: function(item) {
        var _a;
        var postContent = get_1.get(item, 'post.entity.body');
        var postImage = getPostImage(item);
        return _a = {},
            _a[IDs.INDEX_PAGE] = get_1.getRawValue(item, "context." + ContextProps_1.CONTEXT_PROPS.INDEX_PAGE),
            _a[IDs.POST_CONTENT] = postContent,
            _a[IDs.POST_CONTENT_60] = postContent.substring(0, 60),
            _a[IDs.POST_CONTENT_200] = postContent.substring(0, 200),
            _a[IDs.GROUP_NAME] = get_1.get(item, 'group.details.title'),
            _a[IDs.POST_URL] = get_1.get(item, 'directUrl'),
            _a[IDs.POST_AUTHOR] = get_1.get(item, 'author.name.nick'),
            _a[IDs.POST_PUBLISH_DATE] = get_1.get(item, 'post.createdAt'),
            _a[IDs.POST_MODIFIED_DATE] = get_1.get(item, ''),
            _a[IDs.DISABLE_SCHEMA] = utils_1.hasMissingSchemaVariables(requiredSchemaVariables, item),
            _a[IDs.POST_OWNER_IMAGE_HEIGHT] = get_1.get(item, ''),
            _a[IDs.POST_OWNER_IMAGE_WIDTH] = get_1.get(item, ''),
            _a[IDs.POST_OWNER_IMAGE_URL] = get_1.get(item, 'author.imageUrl'),
            _a[IDs.COMMENTS_COUNT] = get_1.get(item, 'post.comments.total'),
            _a[IDs.LIKE_COUNT] = get_1.get(item, 'interactionStatistic'),
            _a[IDs.POST_IMAGE_HEIGHT] = postImage.height,
            _a[IDs.POST_IMAGE_WIDTH] = postImage.width,
            _a[IDs.POST_IMAGE_URL] = postImage.url,
            _a[IDs.POST_PUBLISHER_ID] = get_1.get(item, ''),
            _a[IDs.POST_PUBLISHER_LOGO_URL] = get_1.get(item, 'group.details.logoUrl'),
            _a;
    },
    getSdStatus: function() {
        return consts_1.SD_STATUS.DOES_NOT_EXIST;
    },
    getLegacySeoBlob: function() {},
    getSlug: function() {
        return '';
    },
    updateItemDataWithSlug: function(item) {
        return item;
    },
    getBiData: function() {},
    getKeys: function() {
        return utils_1.getKeys(IDs, userVisible);
    },
    getSdKeys: function() {
        return [];
    },
};