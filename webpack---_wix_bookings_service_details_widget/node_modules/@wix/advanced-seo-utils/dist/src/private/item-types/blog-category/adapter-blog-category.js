"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var get_1 = require("../../utils/get");
var utils_1 = require("../../adapters/utils");
var update_by_identifier_1 = require("../../tags/values/update-by-identifier");
var Identifiers_1 = require("../../types/Identifiers");
var getCurrentLanguage_1 = require("../blog-post/calculated/getCurrentLanguage");
var getPageUrl_1 = require("./calculated/getPageUrl");
var get_multilingual_tags_1 = require("../../renderer/get-multilingual-tags");
var consts_1 = require("../../consts");
var utils_2 = require("../utils");
var consts_2 = require("../consts");
var IDs = {
    NAME: 'blog-category.name',
    IMAGE: 'blog-category.image',
    IMAGE_HEIGHT: 'blog-category.image.height',
    IMAGE_WIDTH: 'blog-category.image.width',
    PAGE_URL: 'blog-category.url',
    PREV_PAGE_URL: 'blog-category.prevUrl',
    NEXT_PAGE_URL: 'blog-category.nextUrl',
    CURRENT_PAGE: 'blog-category.currentPage',
    TOTAL_PAGE_COUNT: 'blog-category.totalPageCount',
    BLOG_FEED_ROUTE: 'blog-category.blogFeedRoute',
};
var userVisible = [
    IDs.NAME,
    IDs.PAGE_URL,
    IDs.IMAGE,
    IDs.CURRENT_PAGE,
    IDs.TOTAL_PAGE_COUNT,
];
var requiredSchemaVariables = [];
var SchemaTypes = {
    BLOG_CATEGORY_COLLECTION: 'blog-category-collection-preset',
};
exports.default = {
    IDs: IDs,
    SchemaTypes: SchemaTypes,
    requiredSchemaVariables: requiredSchemaVariables,
    getData: function(item) {
        var _a;
        return (_a = {},
            _a[IDs.NAME] = get_1.get(item, 'category.label'),
            _a[IDs.IMAGE] = get_1.get(item, 'category.image.url'),
            _a[IDs.IMAGE_HEIGHT] = get_1.get(item, 'category.image.height'),
            _a[IDs.IMAGE_WIDTH] = get_1.get(item, 'category.image.width'),
            _a[IDs.PAGE_URL] = getPageUrl_1.getPageUrl(item),
            _a[IDs.PREV_PAGE_URL] = get_1.get(item, 'category.prevUrl'),
            _a[IDs.NEXT_PAGE_URL] = get_1.get(item, 'category.nextUrl'),
            _a[IDs.CURRENT_PAGE] = get_1.get(item, 'category.pagination.currentPage'),
            _a[IDs.TOTAL_PAGE_COUNT] = get_1.get(item, 'category.pagination.totalPages'),
            _a[IDs.BLOG_FEED_ROUTE] = get_1.get(item, 'category.blogFeedRoute') ||
            utils_2.getRssFullURL({
                siteUrl: get_1.get(item, 'context.siteUrl'),
                rssRoute: consts_2.RSS_ROUTES[consts_2.RSS_ROUTE_TYPES.BLOG],
            }),
            _a);
    },
    getSdStatus: function() {
        return consts_1.SD_STATUS.DOES_NOT_EXIST;
    },
    getLegacySeoBlob: function(item) {
        var tags = update_by_identifier_1.updateValueByIdentifier([], Identifiers_1.IDENTIFIERS.TITLE, get_1.get(item, 'category.title'));
        tags = update_by_identifier_1.updateValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.DESCRIPTION, get_1.get(item, 'category.description'));
        return {
            tags: tags
        };
    },
    getDynamicPatternsSchema: function(item) {
        var translatedPages = get_1.getRawValue(item, 'category.translatedPages') || [];
        var hasTranslations = Boolean(translatedPages.length);
        var currentLanguageCode = getCurrentLanguage_1.getCurrentLanguage(item);
        var currentSeoLang = getCurrentLanguage_1.getCurrentSeoLang(item);
        var currentUrl = getPageUrl_1.getPageUrl(item);
        if (!item || !hasTranslations) {
            return {
                tags: []
            };
        }
        var siteUrl = get_1.get(item, 'context.siteUrl');
        var tags = get_multilingual_tags_1.getMultilingualTags(__spreadArrays([{
            url: currentUrl,
            langCode: currentLanguageCode,
            seoLang: currentSeoLang,
        }], translatedPages, [{
            url: siteUrl,
            langCode: 'x-default'
        }, ]));
        return {
            tags: tags
        };
    },
    getSlug: function() {
        return '';
    },
    updateItemDataWithSlug: function(item) {
        return item;
    },
    getBiData: function() {},
    getKeys: function() {
        return utils_1.getKeys(IDs, userVisible);
    },
    getSdKeys: function() {
        return [];
    },
    hasMultilingual: function(item) {
        return Array.isArray(get_1.getRawValue(item, 'category.translatedPages'));
    },
};