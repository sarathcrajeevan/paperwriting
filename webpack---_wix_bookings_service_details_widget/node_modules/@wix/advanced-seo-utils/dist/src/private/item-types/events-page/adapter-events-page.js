"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IDs = void 0;
var get_1 = require("../../utils/get");
var utils_1 = require("../../adapters/utils");
var calculated_1 = require("./calculated");
var structured_data_1 = require("./structured-data");
var update_by_identifier_1 = require("../../tags/values/update-by-identifier");
var Identifiers_1 = require("../../types/Identifiers");
var get_event_url_1 = require("./calculated/get-event-url");
var consts_1 = require("../../consts");
exports.IDs = {
    NAME: 'event.name',
    DESCRIPTION: 'event.description',
    ABOUT: 'event.about',
    START_DATE: 'event.schedule.start.date',
    END_DATE: 'event.schedule.end.date',
    SCHEDULE_TBD: 'event.schedule.tbd',
    STATUS: 'event.raw.status',
    ONLINE_ENABLED: 'event.online.enabled',
    CREATED_DATE: 'event.created.date',
    LOCATION_TYPE: 'event.raw.location.type',
    LOCATION_ADDRESS: 'event.location.address',
    LOCATION_NAME: 'event.location.name',
    REGISTRATION_TYPE: 'event.registration.type',
    REGISTRATION_TICKET_LOWEST_PRICE: 'event.registration.ticket.price.lowest',
    REGISTRATION_TICKET_HIGHEST_PRICE: 'event.registration.ticket.price.highest',
    REGISTRATION_TICKET_CURRENCY: 'event.registration.ticket.price.currency',
    REGISTRATION_TICKET_TAX: 'event.registration.ticket.price.tax',
    REGISTRATION_STATUS: 'event.registration.status',
    TICKETS: 'event.raw.tickets',
    IMAGE_ID: 'event.image.id',
    IMAGE_WIDTH: 'event.image.width',
    IMAGE_HEIGHT: 'event.image.height',
    CALCULATED_LOCATION_TYPE: 'event.location.type',
    CALCULATED_EVENT_STATUS: 'event.status',
    CALCULATED_ATTENDANCE_MODE: 'event.attendance.mode',
    CALCULATED_MAIN_IMAGE_URL: 'event.main.image.url',
    CALCULATED_ONLINE_CONF_AVAILABLE: 'event.online.conf.available',
    CALCULATED_SEO_DESCRIPTION: 'event.seo.description',
    CALCULATED_EVENT_URL: 'event.url',
    CALCULATED_TICKETS: 'event.tickets',
    CALCULATED_TICKETS_COUNT: 'event.tickets.count',
    CALCULATED_EVENT_MONTH: 'event.month',
    SD_DISABLE_SCHEMA: 'event.structured-data.disable-schema',
    SD_JSON_OFFERS: 'event.structured-data.offers',
    SD_JSON_LOCATION: 'event.structured-data.location',
    SD_STATUS: 'event.structured-data.status',
    SD_ATTANDANCE_MODE: 'event.structured-data.attandance-mode',
};
var userVisible = [
    exports.IDs.NAME,
    exports.IDs.CALCULATED_SEO_DESCRIPTION,
    exports.IDs.ABOUT,
    exports.IDs.REGISTRATION_TICKET_LOWEST_PRICE,
    exports.IDs.REGISTRATION_TICKET_HIGHEST_PRICE,
    exports.IDs.LOCATION_NAME,
    exports.IDs.LOCATION_ADDRESS,
    exports.IDs.CALCULATED_EVENT_URL,
    exports.IDs.CALCULATED_MAIN_IMAGE_URL,
];
var userVisibleSdOnly = [
    exports.IDs.IMAGE_HEIGHT,
    exports.IDs.IMAGE_WIDTH,
    exports.IDs.DESCRIPTION,
    exports.IDs.START_DATE,
    exports.IDs.END_DATE,
    exports.IDs.SD_STATUS,
    exports.IDs.SD_ATTANDANCE_MODE,
    exports.IDs.SD_JSON_LOCATION,
    exports.IDs.CALCULATED_LOCATION_TYPE,
    exports.IDs.SD_JSON_OFFERS,
    exports.IDs.REGISTRATION_TICKET_CURRENCY,
    exports.IDs.CALCULATED_TICKETS_COUNT,
];
var requiredSchemaVariables = [];
var SchemaTypes = {
    EVENTS_PAGE: 'events-page-preset',
};
var getSdStatus = function(item) {
    if (utils_1.hasMissingSchemaVariables(requiredSchemaVariables, item)) {
        return consts_1.SD_STATUS.DISABLED_DUE_TO_MISSING_INFO;
    }
    if (!structured_data_1.shouldRenderSchema(item)) {
        return consts_1.SD_STATUS.DISABLED_BY_VERTICAL_ITEM_DATA;
    }
    return consts_1.SD_STATUS.ENABLED;
};
exports.default = {
    IDs: exports.IDs,
    SchemaTypes: SchemaTypes,
    getData: function(item) {
        var _a;
        return __assign(__assign((_a = {}, _a[exports.IDs.NAME] = get_1.get(item, 'event.title'), _a[exports.IDs.DESCRIPTION] = get_1.get(item, 'event.description'), _a[exports.IDs.ABOUT] = get_1.get(item, 'event.about'), _a[exports.IDs.START_DATE] = get_1.get(item, 'event.scheduling.config.startDate'), _a[exports.IDs.END_DATE] = get_1.get(item, 'event.scheduling.config.endDate'), _a[exports.IDs.SCHEDULE_TBD] = get_1.getRawValue(item, 'event.scheduling.config.scheduleTbd') || '', _a[exports.IDs.STATUS] = get_1.get(item, 'event.status'), _a[exports.IDs.ONLINE_ENABLED] = !!get_1.getRawValue(item, 'event.onlineConferencing.config.enabled'), _a[exports.IDs.CREATED_DATE] = get_1.get(item, 'event.created'), _a[exports.IDs.LOCATION_TYPE] = get_1.get(item, 'event.location.type'), _a[exports.IDs.LOCATION_ADDRESS] = get_1.get(item, 'event.location.address'), _a[exports.IDs.LOCATION_NAME] = get_1.get(item, 'event.location.name'), _a[exports.IDs.REGISTRATION_TYPE] = get_1.get(item, 'event.registration.type'), _a[exports.IDs.REGISTRATION_TICKET_LOWEST_PRICE] = get_1.get(item, 'event.registration.ticketing.lowestTicketPrice.amount'), _a[exports.IDs.REGISTRATION_TICKET_HIGHEST_PRICE] = get_1.get(item, 'event.registration.ticketing.highestTicketPrice.amount'), _a[exports.IDs.REGISTRATION_TICKET_CURRENCY] = get_1.get(item, 'event.registration.ticketing.currency'), _a[exports.IDs.REGISTRATION_TICKET_TAX] = get_1.get(item, 'event.registration.ticketing.config.taxConfig.rate'), _a[exports.IDs.REGISTRATION_STATUS] = get_1.get(item, 'event.registration.status'), _a[exports.IDs.IMAGE_ID] = get_1.get(item, 'event.mainImage.id'), _a[exports.IDs.IMAGE_WIDTH] = get_1.get(item, 'event.mainImage.width'), _a[exports.IDs.IMAGE_HEIGHT] = get_1.get(item, 'event.mainImage.height'), _a[exports.IDs.SD_DISABLE_SCHEMA] = getSdStatus(item) !== consts_1.SD_STATUS.ENABLED, _a), calculated_1.getCalculatedData(exports.IDs, item)), structured_data_1.getStructuredData(exports.IDs, item));
    },
    getSdStatus: getSdStatus,
    getLegacySeoBlob: function(item) {
        var tags = update_by_identifier_1.updateValueByIdentifier([], Identifiers_1.IDENTIFIERS.TITLE, get_1.get(item, 'legacySeoData.title'));
        tags = update_by_identifier_1.updateValueByIdentifier(tags, Identifiers_1.IDENTIFIERS.DESCRIPTION, get_1.get(item, 'legacySeoData.description'));
        return {
            tags: tags
        };
    },
    getBiData: function(item) {
        return ({
            id: get_1.get(item, 'event.id'),
            name: get_1.get(item, 'event.title'),
        });
    },
    getKeys: function() {
        return utils_1.getKeys(exports.IDs, userVisible);
    },
    getSdKeys: function() {
        return utils_1.getKeys(exports.IDs, userVisibleSdOnly);
    },
    getSlug: function(item) {
        return get_1.get(item, 'event.slug');
    },
    getFullUrl: function(item) {
        return get_event_url_1.getEventUrl(item);
    },
    setFullUrl: function(item, url) {
        if (url === void 0) {
            url = '';
        }
        item = JSON.parse(JSON.stringify(item));
        var urlArray = url.split('/');
        var lastPart = urlArray.pop();
        item.event.eventPageUrl.base = urlArray.join('/');
        item.event.eventPageUrl.path = lastPart ? "/" + lastPart : '';
        return item;
    },
    updateItemDataWithSlug: function(itemData, slugValue) {
        var updatedItemData = JSON.parse(JSON.stringify(itemData));
        var oldSlug = get_1.get(updatedItemData, 'event.slug');
        if (oldSlug !== '') {
            updatedItemData.event.slug = slugValue;
        }
        return updatedItemData;
    },
};