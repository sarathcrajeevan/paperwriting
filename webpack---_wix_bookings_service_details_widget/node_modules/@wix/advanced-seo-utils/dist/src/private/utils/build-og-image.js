"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.updateRelatedOgImagesFields = exports.applyOgImageModifications = exports.buildOgImage = exports.buildOgImageFullUrl = exports.DEFAULT_HEIGHT = exports.DEFAULT_WIDTH = void 0;
var get_by_identifier_1 = require("../tags/values/get-by-identifier");
var update_by_identifier_1 = require("../tags/values/update-by-identifier");
var Identifiers_1 = require("../types/Identifiers");
var TagTypes_1 = require("../types/TagTypes");
var Props_1 = __importDefault(require("../types/Props"));
var is_absolute_url_1 = require("./is-absolute-url");
var extract_image_name_from_wix_media_url_1 = require("./extract-image-name-from-wix-media-url");
var is_empty_1 = require("./is-empty");
var OG_IMAGE = Identifiers_1.IDENTIFIERS.OG_IMAGE,
    OG_IMAGE_WIDTH = Identifiers_1.IDENTIFIERS.OG_IMAGE_WIDTH,
    OG_IMAGE_HEIGHT = Identifiers_1.IDENTIFIERS.OG_IMAGE_HEIGHT;
exports.DEFAULT_WIDTH = 2500;
exports.DEFAULT_HEIGHT = 1330;
var MAX_IMAGE_PIXELS = 5100 * 5100;

function buildOgImageFullUrl(url) {
    var urlOrName = url;
    if (!urlOrName || urlOrName === '') {
        return undefined;
    }
    if (is_absolute_url_1.isAbsoluteUrl(urlOrName)) {
        urlOrName = extract_image_name_from_wix_media_url_1.extractImageNameFromWixMediaUrl(urlOrName);
    }
    if (!urlOrName) {
        return url;
    }
    return "https://static.wixstatic.com/media/" + urlOrName;
}
exports.buildOgImageFullUrl = buildOgImageFullUrl;

function buildOgImage(tags) {
    var result = {
        src: '',
        width: '',
        height: ''
    };
    var urlOrName = get_by_identifier_1.getValueByIdentifier(tags, OG_IMAGE);
    if (!urlOrName) {
        return result;
    }
    result.src = urlOrName;
    if (is_absolute_url_1.isAbsoluteUrl(urlOrName)) {
        urlOrName = extract_image_name_from_wix_media_url_1.extractImageNameFromWixMediaUrl(urlOrName);
    }
    if (!urlOrName) {
        return result;
    }
    result.src = "https://static.wixstatic.com/media/" + urlOrName;
    var meta = getOgImageMeta(tags);
    if (meta && meta.width && meta.height) {
        var resized = resizeImage(meta.width, meta.height, exports.DEFAULT_WIDTH);
        result.src += "/v1/fill/w_" + resized.width + ",h_" + resized.height + ",al_c/" + urlOrName;
        result.width = "" + resized.width;
        result.height = "" + resized.height;
    } else {
        var width = get_by_identifier_1.getValueByIdentifier(tags, OG_IMAGE_WIDTH);
        var height = get_by_identifier_1.getValueByIdentifier(tags, OG_IMAGE_HEIGHT);
        if (width && height) {
            if (width * height > MAX_IMAGE_PIXELS) {
                var resized = resizeImage(width, height, exports.DEFAULT_WIDTH);
                result.src += "/v1/fill/w_" + resized.width + ",h_" + resized.height + ",al_c/" + urlOrName;
                result.width = "" + resized.width;
                result.height = "" + resized.height;
            } else {
                result.src += "/v1/fill/w_" + width + ",h_" + height + ",al_c/" + urlOrName;
            }
        } else {
            result.src += "/v1/fit/w_" + exports.DEFAULT_WIDTH + ",h_" + exports.DEFAULT_HEIGHT + ",al_c/" + urlOrName;
            result.width = "" + exports.DEFAULT_WIDTH;
            result.height = "" + exports.DEFAULT_HEIGHT;
        }
    }
    return result;
}
exports.buildOgImage = buildOgImage;

function applyOgImageModifications(tags) {
    var _a = buildOgImage(tags),
        src = _a.src,
        width = _a.width,
        height = _a.height;
    return [
        [OG_IMAGE, src],
        [OG_IMAGE_WIDTH, width],
        [OG_IMAGE_HEIGHT, height],
    ].reduce(function(acc, curr) {
        var identifier = curr[0],
            value = curr[1];
        if (value) {
            var newTags = void 0;
            if (identifier === OG_IMAGE) {
                newTags = updateRelatedOgImagesFields(tags, value);
            }
            newTags = update_by_identifier_1.updateValueByIdentifier(acc, identifier, value);
            return newTags;
        } else {
            return acc;
        }
    }, tags);
}
exports.applyOgImageModifications = applyOgImageModifications;

function resizeImage(width, height, maxWidth, maxHeight) {
    if (maxHeight === void 0) {
        maxHeight = exports.DEFAULT_HEIGHT;
    }
    width = parseInt(width, 10);
    height = parseInt(height, 10);
    if (width > maxWidth || height > maxHeight) {
        return {
            width: maxWidth,
            height: Math.floor((height / width) * maxWidth),
        };
    }
    return {
        width: width,
        height: height
    };
}

function getOgImageMeta(tags) {
    var ogImage = tags.find(function(tag) {
        var type = tag.type,
            _a = tag.props,
            props = _a === void 0 ? {} : _a,
            meta = tag.meta;
        if (type === TagTypes_1.TAG_TYPES.META) {
            return props[Props_1.default.PROPERTY] === 'og:image' && !is_empty_1.isEmpty(meta);
        }
        return false;
    });
    return (ogImage || {}).meta;
}

function updateRelatedOgImagesFields(tags, newOgImageValue) {
    var isMeta = function(type) {
        return type === TagTypes_1.TAG_TYPES.META;
    };
    var isOgImage = function(props) {
        return props && props[Props_1.default.PROPERTY] === 'og:image';
    };
    var ogImage = tags.find(function(_a) {
        var type = _a.type,
            props = _a.props;
        return isMeta(type) && isOgImage(props);
    });
    if (ogImage) {
        var originalOgImageValue_1 = ogImage.props.content;
        var isEndsWithImage_1 = function(props) {
            return props[Props_1.default.PROPERTY].endsWith('image');
        };
        var hasOldOgImageValue_1 = function(props) {
            return props[Props_1.default.CONTENT] && props[Props_1.default.CONTENT] === originalOgImageValue_1;
        };
        var isPropertyExists_1 = function(props) {
            return props && typeof props[Props_1.default.PROPERTY] === 'string';
        };
        var isOgImageRelated = function(_a) {
            var type = _a.type,
                props = _a.props;
            return isMeta(type) &&
                isPropertyExists_1(props) &&
                isEndsWithImage_1(props) &&
                hasOldOgImageValue_1(props);
        };
        for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
            var tag = tags_1[_i];
            if (isOgImageRelated(tag) && !isOgImage(tag.props)) {
                tag.props[Props_1.default.CONTENT] = newOgImageValue;
            }
        }
    }
    return tags;
}
exports.updateRelatedOgImagesFields = updateRelatedOgImagesFields;