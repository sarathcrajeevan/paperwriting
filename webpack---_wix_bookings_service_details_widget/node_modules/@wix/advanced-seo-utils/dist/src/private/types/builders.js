"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildMultilingualLink = exports.buildTitle = exports.buildStructuredData = exports.buildTwitterMetaRefs = exports.buildTwitterMeta = exports.buildStandardMeta = exports.buildOgMetaRefs = exports.buildOgMeta = exports.buildLink = void 0;
var TagTypes_1 = require("./TagTypes");
var Props_1 = __importDefault(require("./Props"));
var Identifiers_1 = require("./Identifiers");
var twitterTagSchemas_1 = require("./twitterTagSchemas");
var TITLE = TagTypes_1.TAG_TYPES.TITLE,
    META = TagTypes_1.TAG_TYPES.META,
    LINK = TagTypes_1.TAG_TYPES.LINK,
    SCRIPT = TagTypes_1.TAG_TYPES.SCRIPT;
var TYPE = Props_1.default.TYPE,
    CONTENT = Props_1.default.CONTENT,
    REL = Props_1.default.REL,
    NAME = Props_1.default.NAME,
    PROPERTY = Props_1.default.PROPERTY,
    HREF = Props_1.default.HREF,
    HREFLANG = Props_1.default.HREFLANG,
    ALTERNATE = Props_1.default.ALTERNATE;
var buildMultilingualLink = function(href, hreflang, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a,
        _d = _c.rel,
        rel = _d === void 0 ? ALTERNATE : _d,
        _e = _c.disabled,
        disabled = _e === void 0 ? false : _e;
    return (__assign({
        type: LINK,
        props: (_b = {}, _b[REL] = rel, _b[HREF] = href, _b[HREFLANG] = hreflang, _b)
    }, (disabled ? {
        disabled: disabled
    } : {})));
};
exports.buildMultilingualLink = buildMultilingualLink;
var buildLink = function(_a) {
    var _b, _c, _d;
    var rel = _a.rel,
        href = _a.href,
        type = _a.type,
        title = _a.title,
        _e = _a.disabled,
        disabled = _e === void 0 ? false : _e;
    return (__assign({
        type: LINK,
        props: __assign(__assign((_b = {}, _b[REL] = rel, _b[HREF] = href, _b), (title ? (_c = {}, _c[Props_1.default.TITLE] = title, _c) : {})), (type ? (_d = {}, _d[Props_1.default.TYPE] = type, _d) : {}))
    }, (disabled ? {
        disabled: disabled
    } : {})));
};
exports.buildLink = buildLink;
var buildOgMeta = function(property, content) {
    var _a;
    return ({
        type: META,
        props: (_a = {}, _a[PROPERTY] = property, _a[CONTENT] = content, _a),
    });
};
exports.buildOgMeta = buildOgMeta;
var buildOgMetaRefs = function() {
    return [
        buildOgMeta('og:title', "{{@" + Identifiers_1.IDENTIFIERS.TITLE + "}}"),
        buildOgMeta('og:description', "{{@" + Identifiers_1.IDENTIFIERS.DESCRIPTION + "}}"),
    ];
};
exports.buildOgMetaRefs = buildOgMetaRefs;
var buildStandardMeta = function(name, content) {
    var _a;
    return ({
        type: META,
        props: (_a = {}, _a[NAME] = name, _a[CONTENT] = content, _a),
    });
};
exports.buildStandardMeta = buildStandardMeta;
var buildTwitterMeta = buildStandardMeta;
exports.buildTwitterMeta = buildTwitterMeta;
var buildStructuredData = function(_a) {
    var _b;
    var _c = _a === void 0 ? {} : _a,
        schema = _c.schema,
        schemaType = _c.schemaType,
        displayName = _c.displayName,
        variants = _c.variants,
        selectedVariant = _c.selectedVariant,
        disabled = _c.disabled;
    var isDisabledProvided = [true, false].includes(disabled) || Array.isArray(disabled);
    var meta = __assign(__assign(__assign(__assign({}, (schemaType ? {
        schemaType: schemaType
    } : {})), (displayName ? {
        displayName: displayName
    } : {})), ((variants === null || variants === void 0 ? void 0 : variants.length) ? {
            variants: variants.map(function(variant) {
                return typeof variant.schema === 'object' ?
                    __assign(__assign({}, variant), {
                        schema: JSON.stringify(variant.schema)
                    }) : variant;
            }),
        } :
        {})), (selectedVariant ? {
        selectedVariant: selectedVariant
    } : {}));
    return __assign(__assign({
        type: SCRIPT,
        props: (_b = {},
            _b[TYPE] = 'application/ld+json',
            _b),
        children: typeof schema === 'object' ? JSON.stringify(schema) : schema
    }, (Object.keys(meta).length ? {
        meta: meta
    } : {})), (isDisabledProvided ? {
        disabled: disabled
    } : {}));
};
exports.buildStructuredData = buildStructuredData;
var buildTitle = function(title) {
    return ({
        type: TITLE,
        children: title,
    });
};
exports.buildTitle = buildTitle;
var buildTwitterMetaRefs = function() {
    return [
        buildTwitterMeta('twitter:card', twitterTagSchemas_1.twitterCardSupportedTypes.SUMMARY_LARGE_IMAGE),
        buildTwitterMeta('twitter:title', "{{@" + Identifiers_1.IDENTIFIERS.OG_TITLE + "}}"),
        buildTwitterMeta('twitter:description', "{{@" + Identifiers_1.IDENTIFIERS.OG_DESCRIPTION + "}}"),
        buildTwitterMeta('twitter:image', "{{@" + Identifiers_1.IDENTIFIERS.OG_IMAGE + "}}"),
    ];
};
exports.buildTwitterMetaRefs = buildTwitterMetaRefs;