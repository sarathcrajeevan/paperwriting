"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateCustomTagLegacy = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var identify_1 = require("../../renderer/utils/identify");
var parse_1 = require("../../renderer/utils/parse");
var Errors_1 = require("../../types/Errors");
var TagTypes_1 = require("../../types/TagTypes");
var Props_1 = __importDefault(require("../../types/Props"));
var Validators_1 = require("../../types/Validators");
var filter_identified_tags_1 = require("../filters/filter-identified-tags");
var remove_tag_by_index_and_html_1 = require("../values/remove-tag-by-index-and-html");
var MAX_CUSTOM_TAG_LENGTH = 300;

function validateCustomTagLegacy(htmlString, data, excludedIdentifiers) {
    if (data === void 0) {
        data = {};
    }
    if (excludedIdentifiers === void 0) {
        excludedIdentifiers = Object.keys(Identifiers_1.TWITTER_IDENTIFIERS);
    }
    if (htmlString === '') {
        return {
            isValid: true
        };
    }
    var errors = [];
    var tags = parse_1.parse(htmlString);
    if (!tags.length) {
        errors.push(new Errors_1.ERRORS.INVALID_TAG_STRUCTURE());
        return {
            isValid: false,
            errors: errors
        };
    }
    if (tags.length !== 1) {
        errors.push(new Errors_1.ERRORS.INVALID_TAGS_LENGTH());
    } else if (!Validators_1.validateBrokenTags(htmlString).isValid) {
        errors.push(new Errors_1.ERRORS.INVALID_TAG_STRUCTURE());
    }
    var tag = tags[0];
    var invalidAttributes = [];
    var validationResult = Validators_1.validateIsInWhiteList(tag);
    if (!validationResult.isValid) {
        errors.push(validationResult.error);
    }
    var attrValidationResult = Validators_1.validateAttributeIsInBlacklist(tag);
    if (!attrValidationResult.isValid) {
        invalidAttributes = invalidAttributes.concat(attrValidationResult.error.duplicates);
    }
    if (invalidAttributes.length) {
        errors.push(new Errors_1.ERRORS.TAG_CONTAINS_BLACKLISTED_ATTRIBUTE(invalidAttributes));
    }
    var cssValidationResult = Validators_1.validateIsCss(tag);
    if (!cssValidationResult.isValid) {
        errors.push(cssValidationResult.error);
    }
    var identifiedTag = getIdentifiedTags([tag], excludedIdentifiers)[0];
    if (identifiedTag) {
        var forbiddenProps = ['name', 'property', 'content', 'rel', 'href'];
        var forbiddenProp = identifiedTag.props &&
            forbiddenProps.find(function(prop) {
                return identifiedTag.props[prop];
            });
        if (forbiddenProp) {
            errors.push(new Errors_1.ERRORS.TAG_ALREADY_EXISTS([identifiedTag.props[forbiddenProp]]));
        }
    } else {
        var unidentifiedBlob = filter_identified_tags_1.filterIdentifiedTags(data.schema || {
            tags: []
        }, excludedIdentifiers);
        var _a = getUnidentifiedTag(remove_tag_by_index_and_html_1.removeTagByIndex(unidentifiedBlob.tags, data.index), tag),
            unidentifiedTag = _a.unidentifiedTag,
            propValue = _a.propValue;
        var isTagAMetaTitle = tag.type === TagTypes_1.TAG_TYPES.META && tag.props[Props_1.default.NAME] === Props_1.default.TITLE;
        if ((unidentifiedTag && !isExcluded(unidentifiedTag, excludedIdentifiers)) ||
            isTagAMetaTitle) {
            errors.push(new Errors_1.ERRORS.TAG_ALREADY_EXISTS([propValue]));
        } else {
            var isEmptyValidationResult = Validators_1.validateEmptyProps(tag);
            if (!isEmptyValidationResult.isValid) {
                errors.push(isEmptyValidationResult.error);
            }
        }
    }
    if (htmlString.length > MAX_CUSTOM_TAG_LENGTH) {
        errors.push(new Errors_1.ERRORS.MAX_LENGTH_EXCEEDED(MAX_CUSTOM_TAG_LENGTH));
    }
    if (errors.length) {
        return {
            isValid: false,
            errors: errors
        };
    }
    return {
        isValid: true
    };
}
exports.validateCustomTagLegacy = validateCustomTagLegacy;

function getIdentifiedTags(tags, ignoreList) {
    if (ignoreList === void 0) {
        ignoreList = [];
    }
    return tags.filter(function(tag) {
        return identify_1.identify(tag, ignoreList);
    });
}

function getUnidentifiedTag(unidentifiedTags, tag) {
    if (!tag.props) {
        return {};
    }
    var propName = Object.keys(tag.props).find(function(prop) {
        return ((tag.type === TagTypes_1.TAG_TYPES.META &&
                (prop === Props_1.default.NAME || prop === Props_1.default.PROPERTY)) ||
            (tag.type === TagTypes_1.TAG_TYPES.LINK && prop === Props_1.default.REL));
    });
    if (!propName) {
        return {};
    }
    var propValue = tag.props[propName];
    var unidentifiedTag = unidentifiedTags.find(function(t) {
        var _a;
        return (t.type === tag.type &&
            ((_a = t === null || t === void 0 ? void 0 : t.props[propName]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === (propValue === null || propValue === void 0 ? void 0 : propValue.toLowerCase()));
    });
    return {
        unidentifiedTag: unidentifiedTag,
        propValue: propValue
    };
}

function isExcluded(tag, excludedIdentifiers) {
    if (tag === undefined || tag.custom) {
        return false;
    }
    return excludedIdentifiers.includes(identify_1.identify(tag));
}