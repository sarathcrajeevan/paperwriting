"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyDefaultTags = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var ContextProps_1 = require("../../types/ContextProps");
var TagTypes_1 = require("../../types/TagTypes");
var Props_1 = __importDefault(require("../../types/Props"));
var update_by_identifier_1 = require("../values/update-by-identifier");
var get_by_identifier_1 = require("../values/get-by-identifier");
var get_by_identifier_2 = require("./get-by-identifier");

function applyDefaultTags(tags, context) {
    return Object.keys(Identifiers_1.IDENTIFIERS).reduce(function(acc, curr) {
        var value = get_by_identifier_1.getValueByIdentifier(acc, curr);
        if (!value) {
            var defaultValue = get_by_identifier_2.getDefaultValueByIdentifier(acc, curr, context);
            if (defaultValue) {
                acc = update_by_identifier_1.updateValueByIdentifier(acc, curr, defaultValue);
                if (isPageLevelOgImage(curr, defaultValue, context)) {
                    applyOgImageMeta(acc, context);
                }
            }
        }
        return acc;
    }, Array.isArray(tags) ? tags : []);
}
exports.applyDefaultTags = applyDefaultTags;

function isPageLevelOgImage(identifier, defaultValue, context) {
    return (identifier === Identifiers_1.IDENTIFIERS.OG_IMAGE &&
        defaultValue === context[ContextProps_1.CONTEXT_PROPS.OG_IMAGE]);
}

function applyOgImageMeta(tags, context) {
    var width = context[ContextProps_1.CONTEXT_PROPS.OG_IMAGE_WIDTH];
    var height = context[ContextProps_1.CONTEXT_PROPS.OG_IMAGE_HEIGHT];
    if (width && height) {
        var ogImageTag = tags.find(function(tag) {
            var type = tag.type,
                props = tag.props;
            if (type === TagTypes_1.TAG_TYPES.META) {
                return props && props[Props_1.default.PROPERTY] === 'og:image';
            }
            return false;
        });
        ogImageTag.meta = {
            width: width,
            height: height
        };
    }
}