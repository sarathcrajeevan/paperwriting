"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateCustomTag = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var identify_1 = require("../../renderer/utils/identify");
var parse_1 = require("../../renderer/utils/parse");
var Errors_1 = require("../../types/Errors");
var TagTypes_1 = require("../../types/TagTypes");
var Props_1 = __importDefault(require("../../types/Props"));
var Validators_1 = require("../../types/Validators");
var filter_identified_tags_1 = require("../filters/filter-identified-tags");
var filter_duplicate_custom_tags_1 = require("../filters/filter-duplicate-custom-tags");
var remove_tag_by_index_and_html_1 = require("../values/remove-tag-by-index-and-html");
var identify_custom_tag_1 = require("./identify-custom-tag");
var identify_tag_1 = require("../advanced/identify-tag");
var MAX_CUSTOM_TAG_LENGTH = 300;
var PROPS_EXCLUDED_FROM_ALREADY_EXIST_CHECK = [Props_1.default.ALTERNATE];
var hasVariablesInKey = function(key) {
    return (key.match(/{{[^{}]*}}/g) || []).length > 0;
};

function validateCustomTag(htmlString, data, excludedIdentifiers) {
    if (data === void 0) {
        data = {};
    }
    if (excludedIdentifiers === void 0) {
        excludedIdentifiers = Object.keys(Identifiers_1.TWITTER_IDENTIFIERS);
    }
    if (htmlString === '') {
        return {
            isValid: true
        };
    }
    var errors = [];
    var tags = parse_1.parse(htmlString);
    if (!tags.length) {
        errors.push(new Errors_1.ERRORS.INVALID_TAG_STRUCTURE());
        return {
            isValid: false,
            errors: errors
        };
    }
    if (tags.length !== 1) {
        errors.push(new Errors_1.ERRORS.INVALID_TAGS_LENGTH());
    } else if (!Validators_1.validateBrokenTags(htmlString).isValid) {
        errors.push(new Errors_1.ERRORS.INVALID_TAG_STRUCTURE());
    }
    var tag = tags[0];
    var invalidAttributes = [];
    var whiteListValidationResult = Validators_1.validateIsInWhiteList(tag);
    if (!whiteListValidationResult.isValid) {
        errors.push(whiteListValidationResult.error);
    }
    var attrValidationResult = Validators_1.validateAttributeIsInBlacklist(tag);
    if (!attrValidationResult.isValid) {
        invalidAttributes = invalidAttributes.concat(attrValidationResult.error.duplicates);
    }
    if (invalidAttributes.length) {
        errors.push(new Errors_1.ERRORS.TAG_CONTAINS_BLACKLISTED_ATTRIBUTE(invalidAttributes));
    }
    var cssValidationResult = Validators_1.validateIsCss(tag);
    if (!cssValidationResult.isValid) {
        errors.push(cssValidationResult.error);
    }
    if (whiteListValidationResult.isValid) {
        var identifiedTag_1 = getIdentifiedTags([tag], excludedIdentifiers)[0];
        if (identifiedTag_1) {
            var forbiddenProps = ['name', 'property', 'content', 'rel', 'href'];
            var forbiddenProp = identifiedTag_1.props &&
                forbiddenProps.find(function(prop) {
                    return identifiedTag_1.props[prop];
                });
            if (forbiddenProp) {
                errors.push(new Errors_1.ERRORS.TAG_ALREADY_EXISTS([identifiedTag_1.props[forbiddenProp]]));
            }
        } else {
            if (!tag.props) {
                if (tag.type === TagTypes_1.TAG_TYPES.LINK) {
                    errors.push(new Errors_1.ERRORS.REL_ATTRIBUTE_REQUIRED());
                } else {
                    errors.push(new Errors_1.ERRORS.NAME_OR_PROPERTY_ATTRIBUTE_REQUIRED());
                }
            } else {
                var customTagIdentifier = identify_custom_tag_1.identifyCustomTag(tag);
                if (!customTagIdentifier) {
                    var tagIdentifier = identify_tag_1.identifyTag(tag);
                    if (tagIdentifier) {
                        switch (tagIdentifier) {
                            case Identifiers_1.GENERAL_IDENTIFIERS.LINK:
                                if (!tag.props[Props_1.default.REL]) {
                                    errors.push(new Errors_1.ERRORS.REL_ATTRIBUTE_REQUIRED());
                                }
                                if (!tag.props[Props_1.default.HREF]) {
                                    errors.push(new Errors_1.ERRORS.HREF_ATTRIBUTE_REQUIRED());
                                }
                                break;
                            case Identifiers_1.GENERAL_IDENTIFIERS.OG_TAG:
                                if (!tag.props[Props_1.default.CONTENT]) {
                                    errors.push(new Errors_1.ERRORS.CONTENT_ATTRIBUTE_REQUIRED());
                                }
                                break;
                            default:
                                if (!tag.props[Props_1.default.NAME] && !tag.props[Props_1.default.PROPERTY]) {
                                    errors.push(new Errors_1.ERRORS.NAME_OR_PROPERTY_ATTRIBUTE_REQUIRED());
                                }
                                if (!tag.props[Props_1.default.CONTENT]) {
                                    errors.push(new Errors_1.ERRORS.CONTENT_ATTRIBUTE_REQUIRED());
                                }
                                break;
                        }
                    }
                } else {
                    switch (customTagIdentifier) {
                        case Identifiers_1.GENERAL_IDENTIFIERS.LINK:
                            if (hasVariablesInKey(tag.props[Props_1.default.REL])) {
                                errors.push(new Errors_1.ERRORS.VARIABLE_NOT_ALLOWED_IN_KEY());
                            }
                            break;
                        case Identifiers_1.GENERAL_IDENTIFIERS.OG_TAG:
                            if (hasVariablesInKey(tag.props[Props_1.default.PROPERTY])) {
                                errors.push(new Errors_1.ERRORS.VARIABLE_NOT_ALLOWED_IN_KEY());
                            }
                            break;
                        default:
                            if (hasVariablesInKey(tag.props[Props_1.default.NAME])) {
                                errors.push(new Errors_1.ERRORS.VARIABLE_NOT_ALLOWED_IN_KEY());
                            }
                            break;
                    }
                }
                var unidentifiedBlob = filter_identified_tags_1.filterIdentifiedTags(data.schema || {
                    tags: []
                }, excludedIdentifiers);
                var unidentifiedBlobTags = data.isEditMode ?
                    remove_tag_by_index_and_html_1.removeTagByIndex(unidentifiedBlob.tags, data.index, true) :
                    unidentifiedBlob.tags;
                var _a = getUnidentifiedTag(unidentifiedBlobTags, tag),
                    unidentifiedTag = _a.unidentifiedTag,
                    propValue = _a.propValue;
                var isTagAMetaTitle = tag.type === TagTypes_1.TAG_TYPES.META && tag.props[Props_1.default.NAME] === Props_1.default.TITLE;
                if ((unidentifiedTag &&
                        !isExcluded(unidentifiedTag, excludedIdentifiers)) ||
                    isTagAMetaTitle) {
                    if (!PROPS_EXCLUDED_FROM_ALREADY_EXIST_CHECK.includes(propValue) ||
                        isDuplicate(unidentifiedBlobTags, tag)) {
                        errors.push(new Errors_1.ERRORS.TAG_ALREADY_EXISTS([propValue]));
                    }
                } else {
                    var isEmptyValidationResult = Validators_1.validateEmptyProps(tag);
                    if (!isEmptyValidationResult.isValid) {
                        errors.push(isEmptyValidationResult.error);
                    }
                }
            }
        }
    }
    if (htmlString.length > MAX_CUSTOM_TAG_LENGTH) {
        errors.push(new Errors_1.ERRORS.MAX_LENGTH_EXCEEDED(MAX_CUSTOM_TAG_LENGTH));
    }
    if (errors.length) {
        return {
            isValid: false,
            errors: errors
        };
    }
    return {
        isValid: true
    };
}
exports.validateCustomTag = validateCustomTag;

function getIdentifiedTags(tags, ignoreList) {
    if (ignoreList === void 0) {
        ignoreList = [];
    }
    return tags.filter(function(tag) {
        return identify_1.identify(tag, ignoreList);
    });
}

function getUnidentifiedTag(unidentifiedTags, tag) {
    if (!tag.props) {
        return {};
    }
    var propName = Object.keys(tag.props).find(function(prop) {
        return ((tag.type === TagTypes_1.TAG_TYPES.META &&
                (prop === Props_1.default.NAME || prop === Props_1.default.PROPERTY)) ||
            (tag.type === TagTypes_1.TAG_TYPES.LINK && prop === Props_1.default.REL));
    });
    if (!propName) {
        return {};
    }
    var propValue = tag.props[propName];
    var unidentifiedTag = unidentifiedTags.find(function(t) {
        var _a;
        return (t.type === tag.type &&
            ((_a = t === null || t === void 0 ? void 0 : t.props[propName]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === (propValue === null || propValue === void 0 ? void 0 : propValue.toLowerCase()));
    });
    return {
        unidentifiedTag: unidentifiedTag,
        propValue: propValue
    };
}

function isExcluded(tag, excludedIdentifiers) {
    if (tag === undefined || tag.custom) {
        return false;
    }
    return excludedIdentifiers.includes(identify_1.identify(tag));
}

function isDuplicate(existingTags, tag) {
    if (existingTags === void 0) {
        existingTags = [];
    }
    if (!existingTags.length) {
        return false;
    }
    return (filter_duplicate_custom_tags_1.filterDuplicateCustomTags(existingTags, [__assign(__assign({}, tag), {
            custom: true
        })]).length <
        existingTags.length);
}