"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.filterDuplicateCustomTags = void 0;
var Identifiers_1 = require("../../types/Identifiers");
var identify_custom_tag_1 = require("../custom/identify-custom-tag");
var Props_1 = __importDefault(require("../../types/Props"));
exports.filterDuplicateCustomTags = function(allTags, currentTags) {
    return allTags.filter(function(tag) {
        if (!tag.custom || !currentTags.length) {
            return true;
        }
        var tagIdentifier = identify_custom_tag_1.identifyCustomTag(tag);
        if (!tagIdentifier) {
            return false;
        }
        return !currentTags.some(function(currentTag) {
            var currentTagIdentifier = identify_custom_tag_1.identifyCustomTag(currentTag);
            if (currentTagIdentifier !== tagIdentifier) {
                return false;
            }
            switch (currentTagIdentifier) {
                case Identifiers_1.GENERAL_IDENTIFIERS.LINK:
                    return isLinkTagEquals(tag, currentTag);
                case Identifiers_1.GENERAL_IDENTIFIERS.OG_TAG:
                    return isOgTagEquals(tag, currentTag);
                case Identifiers_1.GENERAL_IDENTIFIERS.SATANDARD_META:
                    return isStandardMetaTagEquals(tag, currentTag);
                default:
                    return false;
            }
        });
    });
};

function isLinkTagEquals(tag, currentTag) {
    if (tag.props[Props_1.default.HREFLANG] && currentTag.props[Props_1.default.HREFLANG]) {
        return tag.props[Props_1.default.HREFLANG] === currentTag.props[Props_1.default.HREFLANG];
    }
    return tag.props[Props_1.default.REL] === currentTag.props[Props_1.default.REL];
}

function isOgTagEquals(tag, currentTag) {
    return tag.props[Props_1.default.PROPERTY] === currentTag.props[Props_1.default.PROPERTY];
}

function isStandardMetaTagEquals(tag, currentTag) {
    return tag.props[Props_1.default.NAME] === currentTag.props[Props_1.default.NAME];
}