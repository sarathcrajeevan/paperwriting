"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.substractSchemas = void 0;
var identify_1 = require("../../renderer/utils/identify");
var is_empty_1 = require("../../utils/is-empty");
var get_by_identifier_1 = require("../values/get-by-identifier");
var update_by_identifier_1 = require("../values/update-by-identifier");

function substractSchemas(a, b) {
    if (a === void 0) {
        a = {};
    }
    if (b === void 0) {
        b = {};
    }
    if (is_empty_1.isEmpty(a.tags) || is_empty_1.isEmpty(b.tags)) {
        return a;
    }
    var tagsResult = a.tags;
    b.tags.forEach(function(tag) {
        var identifier = identify_1.identify(tag);
        if (identifier) {
            var aValue = get_by_identifier_1.getValueByIdentifier(a.tags, identifier);
            var bValue = get_by_identifier_1.getValueByIdentifier(b.tags, identifier);
            if (aValue === bValue) {
                tagsResult = update_by_identifier_1.updateValueByIdentifier(tagsResult, identifier, '', undefined, false);
            }
        }
    });
    return __assign(__assign({}, a), {
        tags: tagsResult
    });
}
exports.substractSchemas = substractSchemas;