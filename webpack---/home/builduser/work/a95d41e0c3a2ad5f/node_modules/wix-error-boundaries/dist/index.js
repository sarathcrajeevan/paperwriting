'use strict';

function isPromise(something) {
    return something && typeof something.then === 'function';
}

var errorScopingFactory = function errorScopingFactory(scope, errorHandler) {
    return function(func) {
        return function() {
            try {
                var result = func.apply(undefined, arguments);
                if (isPromise(result)) {
                    return result.catch(function(e) {
                        errorHandler(e, scope);
                    });
                }

                return result;
            } catch (e) {
                errorHandler(e, scope);
            }
        };
    };
};

function errorBoundaries(_ref) {
    var scopes = _ref.scopes,
        errorHandler = _ref.errorHandler;

    var boundaries = {};
    scopes.forEach(function(scope) {
        boundaries[scope] = errorScopingFactory(scope, errorHandler);
    });

    return boundaries;
}

module.exports = errorBoundaries;