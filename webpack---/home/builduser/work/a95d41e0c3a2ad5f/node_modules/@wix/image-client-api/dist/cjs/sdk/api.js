'use strict';

var imageClientApi = require('../api/uri/index');

var constants = require('../helpers/imageServiceConstants');

var wixStatic = 'https://static.wixstatic.com/';
var wixStaticWithMedia = 'https://static.wixstatic.com/media/';
var HAS_MEDIA_PREFIX_RE = /^media\//i;
var devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;

var getWixStaticURL = function getWixStaticURL(uri) {
    return HAS_MEDIA_PREFIX_RE.test(uri) ? "" + wixStatic + uri : "" + wixStaticWithMedia + uri;
};

var getURL = function getURL(uri, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        baseHostURL = _ref.baseHostURL;

    return baseHostURL ? "" + baseHostURL + uri : getWixStaticURL(uri);
};

function getScaleToFitImageURL(relativeUrl, sourceWidth, sourceHeight, targetWidth, targetHeight, options) {
    var data = imageClientApi.getData(constants.fittingTypes.SCALE_TO_FIT, {
        id: relativeUrl,
        width: sourceWidth,
        height: sourceHeight,
        name: options && options.name
    }, {
        width: targetWidth,
        height: targetHeight,
        htmlTag: imageClientApi.htmlTag.IMG,
        alignment: imageClientApi.alignTypes.CENTER,
        pixelAspectRatio: devicePixelRatio
    }, options);
    return getURL(data.uri, options);
}

function getScaleToFillImageURL(relativeUrl, sourceWidth, sourceHeight, targetWidth, targetHeight, options) {
    var data = imageClientApi.getData(constants.fittingTypes.SCALE_TO_FILL, {
        id: relativeUrl,
        width: sourceWidth,
        height: sourceHeight,
        name: options && options.name,
        focalPoint: {
            x: options && options.focalPoint && options.focalPoint.x,
            y: options && options.focalPoint && options.focalPoint.y
        }
    }, {
        width: targetWidth,
        height: targetHeight,
        htmlTag: imageClientApi.htmlTag.IMG,
        alignment: imageClientApi.alignTypes.CENTER,
        pixelAspectRatio: devicePixelRatio
    }, options);
    return getURL(data.uri, options);
}

function getCropImageURL(relativeUrl, sourceWidth, sourceHeight, cropX, cropY, cropWidth, cropHeight, targetWidth, targetHeight, options) {
    var data = imageClientApi.getData(constants.fittingTypes.SCALE_TO_FILL, {
        id: relativeUrl,
        width: sourceWidth,
        height: sourceHeight,
        name: options && options.name,
        crop: {
            x: cropX,
            y: cropY,
            width: cropWidth,
            height: cropHeight
        }
    }, {
        width: targetWidth,
        height: targetHeight,
        htmlTag: imageClientApi.htmlTag.IMG,
        alignment: imageClientApi.alignTypes.CENTER,
        pixelAspectRatio: devicePixelRatio
    }, options);
    return getURL(data.uri, options);
}

module.exports.populateGlobalFeatureSupport = imageClientApi.populateGlobalFeatureSupport;
module.exports.getScaleToFitImageURL = getScaleToFitImageURL;
module.exports.getScaleToFillImageURL = getScaleToFillImageURL;
module.exports.getCropImageURL = getCropImageURL;
//# sourceMappingURL=api.js.map