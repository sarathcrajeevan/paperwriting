'use strict';

var _filterTemplatesMap;

var utils = require('../helpers/utils');

var _require = require('../helpers/imageServiceConstants'),
    imageFilters = _require.imageFilters,
    transformTypes = _require.transformTypes,
    API_VERSION = _require.API_VERSION; // transform templates


var fitTemplate = utils.template('fit/w_${width},h_${height}');
var fillTemplate = utils.template('fill/w_${width},h_${height},al_${alignment}');
var fillFocalTemplate = utils.template('fill/w_${width},h_${height},fp_${focalPointX}_${focalPointY}');
var cropTemplate = utils.template('crop/x_${x},y_${y},w_${width},h_${height}'); // legacy templates

var legacyCropTemplate = utils.template('crop/w_${width},h_${height},al_${alignment}');
var legacyFillTemplate = utils.template('fill/w_${width},h_${height},al_${alignment}'); // upscale template

var upscaleTemplate = utils.template(',lg_${upscaleMethodValue}'); // options templates

var qualityTemplate = utils.template(',q_${quality}');
var unSharpMaskTemplate = utils.template(',usm_${radius}_${amount}_${threshold}');
var nonProgressiveTemplate = utils.template(',bl');
var watermarkTemplate = utils.template(',wm_${watermark}');
var filterTemplatesMap = (_filterTemplatesMap = {}, _filterTemplatesMap[imageFilters.CONTRAST] = utils.template(',con_${contrast}'), _filterTemplatesMap[imageFilters.BRIGHTNESS] = utils.template(',br_${brightness}'), _filterTemplatesMap[imageFilters.SATURATION] = utils.template(',sat_${saturation}'), _filterTemplatesMap[imageFilters.HUE] = utils.template(',hue_${hue}'), _filterTemplatesMap[imageFilters.BLUR] = utils.template(',blur_${blur}'), _filterTemplatesMap);
/**
 * returns image transform uri
 * @param {object}  transformsObj
 *
 * @returns {string}
 */

function getImageURI(transformsObj) {
    // construct image transforms
    var transformsObjStrArr = []; // construct transform

    transformsObj.parts.forEach(function(transformPart) {
        switch (transformPart.transformType) {
            case transformTypes.CROP:
                transformsObjStrArr.push(cropTemplate(transformPart));
                break;

            case transformTypes.LEGACY_CROP:
                transformsObjStrArr.push(legacyCropTemplate(transformPart));
                break;

            case transformTypes.LEGACY_FILL:
                var legacyFillStr = legacyFillTemplate(transformPart);

                if (transformPart.upscale) {
                    legacyFillStr += upscaleTemplate(transformPart);
                }

                transformsObjStrArr.push(legacyFillStr);
                break;

            case transformTypes.FIT:
                var fitStr = fitTemplate(transformPart);

                if (transformPart.upscale) {
                    fitStr += upscaleTemplate(transformPart);
                }

                transformsObjStrArr.push(fitStr);
                break;

            case transformTypes.FILL:
                var fillStr = fillTemplate(transformPart);

                if (transformPart.upscale) {
                    fillStr += upscaleTemplate(transformPart);
                }

                transformsObjStrArr.push(fillStr);
                break;

            case transformTypes.FILL_FOCAL:
                var fillFocalStr = fillFocalTemplate(transformPart);

                if (transformPart.upscale) {
                    fillFocalStr += upscaleTemplate(transformPart);
                }

                transformsObjStrArr.push(fillFocalStr);
                break;
        }
    });
    var transformsStr = transformsObjStrArr.join('/'); // construct transform options
    // quality

    if (transformsObj.quality) {
        transformsStr += qualityTemplate(transformsObj);
    } // un-sharp mask


    if (transformsObj.unsharpMask) {
        transformsStr += unSharpMaskTemplate(transformsObj.unsharpMask);
    } // progressive


    if (!transformsObj.progressive) {
        transformsStr += nonProgressiveTemplate(transformsObj);
    } // watermark


    if (transformsObj.watermark) {
        transformsStr += watermarkTemplate(transformsObj);
    } // filters


    if (transformsObj.filters) {
        transformsStr += Object.keys(transformsObj.filters).map(function(filterName) {
            return filterTemplatesMap[filterName](transformsObj.filters);
        }).join('');
    } // image url string


    return transformsObj.src.id + "/" + API_VERSION + "/" + transformsStr + "/" + transformsObj.fileName + "." + transformsObj.preferredExtension;
}

module.exports.getImageURI = getImageURI;
//# sourceMappingURL=transforms.js.map