'use strict';
/**
 * return if an Array, String or Object includes a value
 * @param source
 * @param value
 * @returns {boolean}
 */

function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

function includes(source, value) {
    // Array and String
    if (source.indexOf) {
        return source.indexOf(value) > -1;
    } // Object


    if (source && _typeof(source) === 'object') {
        return Object.keys(source).some(function(key) {
            return source[key] === value;
        });
    }

    return false;
}
/**
 * Simple templates.
 * Receives a string with es6 ${...} style template arguments and returns a transformed string.
 * @param string
 * @returns {Function}
 */


function template(string) {
    return function templateFunc(data) {
        var result = string;

        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                result = result.replace(new RegExp("\\${" + key + "}", 'g'), data[key]);
            }
        }

        return result;
    };
}
/**
 * Get the last element in an array
 * @param array
 * @returns {*}
 */


function last(array) {
    return array[array.length - 1];
}

module.exports.includes = includes;
module.exports.last = last;
module.exports.template = template;
//# sourceMappingURL=utils.js.map