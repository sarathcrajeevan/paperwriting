'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
}();

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var _errors = require('./errors');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

var handleResponse = function handleResponse(response) {
    return response.ok ? response.json() : response.text().then(function(responseText) {
        return Promise.reject(new _errors.UnsuccessfulResponseException(response.status, responseText, extractErrorMessage(responseText), extractRequestId(response)));
    });
};

var extractRequestId = function extractRequestId(response) {
    return response.headers.get('x-wix-request-id');
};

var extractErrorMessage = function extractErrorMessage(responseText) {
    try {
        return JSON.parse(responseText).message;
    } catch (_) {
        return responseText;
    }
};

var handleRequestFailure = function handleRequestFailure(reason) {
    return Promise.reject(new _errors.FailedRequestException(reason));
};

var indexSchemasById = function indexSchemasById(schemas) {
    return schemas.reduce(function(schemaById, schema) {
        return Object.assign({}, schemaById, _defineProperty({}, schema.id, schema));
    }, {});
};

var trimEnd = function trimEnd(string, suffix) {
    return string.endsWith(suffix) ? string.substring(0, string.length - suffix.length) : string;
};

var getBaseUrl = function getBaseUrl(baseUrl) {
    // frontend has places where it gives '/_api/cloud-data/v1/schemas' as baseUrl
    baseUrl = trimEnd(baseUrl, '/');
    baseUrl = trimEnd(baseUrl, '/v1/schemas');
    return baseUrl;
};

var WixDataSchemas = function() {
    _createClass(WixDataSchemas, null, [{
        key: 'FailedRequestException',
        get: function get() {
            return _errors.FailedRequestException;
        }
    }, {
        key: 'UnsuccessfulResponseException',
        get: function get() {
            return _errors.UnsuccessfulResponseException;
        }
    }]);

    function WixDataSchemas(fetch, signedInstance, gridAppId, options) {
        var _this = this;

        _classCallCheck(this, WixDataSchemas);

        this.signedInstance = signedInstance;

        this.fetch = function(url, opts) {
            opts = opts || {};
            var headers = opts.headers || {};
            headers.Authorization = headers.Authorization || _this.signedInstance;

            opts.headers = headers;
            return fetch(url, opts).then(handleResponse, handleRequestFailure);
        };
        this.baseUrl = getBaseUrl(options && options.baseUrl || 'https://cloud-data.wix-code.com');
        this.gridAppId = gridAppId;
    }

    _createClass(WixDataSchemas, [{
        key: 'wrapWithDefaultOptions',
        value: function wrapWithDefaultOptions(options) {
            return Object.assign({}, options, {
                appId: this.gridAppId
            });
        }
    }, {
        key: 'formRequestUrl',
        value: function formRequestUrl(query) {
            return this.baseUrl + '/v1/schemas' + '?' + _queryString2.default.stringify(query);
        }
    }, {
        key: 'get',
        value: function get(collectionName) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                includeDeletedCollections: false
            };

            var query = this.wrapWithDefaultOptions({
                includeDeleted: true,
                schemaIds: collectionName
            });

            return this.fetch(this.formRequestUrl(query)).then(function(_ref) {
                var _ref$schemas = _slicedToArray(_ref.schemas, 1),
                    schema = _ref$schemas[0];

                if (schema && schema.isDeleted && !options.includeDeletedCollections) {
                    return (0, _errors.rejectWithCollectionDeleted)(collectionName);
                }
                if (!schema) {
                    return Promise.reject((0, _errors.schemaNotFoundError)(collectionName));
                } else {
                    return schema;
                }
            });
        }
    }, {
        key: 'bulkGet',
        value: function bulkGet(collectionIds) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                includeDeletedCollections: false,
                referencedCollectionsDepth: 0
            };

            var query = this.wrapWithDefaultOptions({
                depth: options.referencedCollectionsDepth || 0,
                includeDeleted: options.includeDeletedCollections || false,
                schemaIds: collectionIds
            });

            return this.fetch(this.formRequestUrl(query)).then(function(_ref2) {
                var schemas = _ref2.schemas;
                return indexSchemasById(schemas);
            });
        }
    }, {
        key: 'list',
        value: function list() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                includeDeletedCollections: false
            };

            var query = this.wrapWithDefaultOptions({
                schemaIds: [],
                depth: 0,
                includeDeleted: options.includeDeletedCollections || false
            });

            return this.fetch(this.formRequestUrl(query)).then(function(_ref3) {
                var schemas = _ref3.schemas;
                return indexSchemasById(schemas);
            });
        }
    }, {
        key: 'save',
        value: function save(collectionName, schema) {
            var body = JSON.stringify(this.wrapWithDefaultOptions({
                schemaId: collectionName,
                schema: schema
            }));

            return this.fetch(this.baseUrl + '/v1/schemas', {
                method: 'POST',
                body: body
            }).then(function(_ref4) {
                var schemas = _ref4.schemas;
                return schemas;
            });
        }
    }, {
        key: 'bulkSave',
        value: function bulkSave(schemas) {
            var body = JSON.stringify(this.wrapWithDefaultOptions({
                schemas: schemas
            }));

            return this.fetch(this.baseUrl + '/v1/schemas-bulk-save', {
                method: 'POST',
                body: body
            }).then(function(_ref5) {
                var schemas = _ref5.schemas;
                return schemas;
            });
        }
    }, {
        key: 'setIsDeletedFlag',
        value: function setIsDeletedFlag(collectionName, isDeleted) {
            var body = JSON.stringify(this.wrapWithDefaultOptions({
                schemaId: collectionName,
                partialSchema: {
                    isDeleted: isDeleted
                }
            }));

            return this.fetch(this.baseUrl + '/v1/schemas', {
                method: 'PATCH',
                body: body
            }).then(function(_ref6) {
                var schemas = _ref6.schemas;
                return schemas;
            });
        }
    }, {
        key: 'remove',
        value: function remove(collectionName) {
            return this.setIsDeletedFlag(collectionName, true);
        }
    }, {
        key: 'restore',
        value: function restore(collectionName) {
            return this.setIsDeletedFlag(collectionName, false);
        }
    }]);

    return WixDataSchemas;
}();

exports.default = WixDataSchemas;