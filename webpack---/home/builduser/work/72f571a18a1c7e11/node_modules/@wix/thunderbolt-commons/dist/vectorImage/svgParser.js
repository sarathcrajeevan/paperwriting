"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseSvgString = void 0;
var tslib_1 = require("tslib");
var SVG_TYPES = {
    SHAPE: 'shape',
    TINT: 'tint',
    COLOR: 'color',
    UGC: 'ugc',
};
var attributesRegexes = {
    fill: /fill="(.*?)"/g,
    'data-color': /data-color="(.*?)"/g,
    'data-type': /data-type="(.*?)"/g,
    'data-bbox': /data-bbox="(.*?)"/g,
    width: /width="(.*?)"/g,
    height: /height="(.*?)"/g,
    viewBox: /viewBox="(.*?)"/g,
};
var elementsRegexes = {
    svg: /(<svg(.*?)>)/g,
    path: /(<path(.*?)>)/g,
};
var getViewBoxObject = function(viewBox) {
    var vieBoxArr = viewBox.split(' ');
    return {
        x: vieBoxArr[0],
        y: vieBoxArr[1],
        width: vieBoxArr[2],
        height: vieBoxArr[3],
    };
};
var getAll = function(str, regex, defaultValue) {
    var match = regex.exec(str);
    if (match) {
        return (0, tslib_1.__spreadArray)([match[1]], (0, tslib_1.__read)(getAll(str, regex, defaultValue)), false);
    }
    return defaultValue ? [defaultValue] : [];
};
var getUGCViewBox = function(svgType, svgNode) {
    if (svgType === SVG_TYPES.UGC) {
        var _a = (0, tslib_1.__read)(getAll(svgNode, attributesRegexes.width), 1),
            width = _a[0];
        var _b = (0, tslib_1.__read)(getAll(svgNode, attributesRegexes.height), 1),
            height = _b[0];
        if (width && height) {
            return "0 0 " + width + " " + height;
        }
    }
    return '';
};
var getColors = function(nodes) {
    return nodes.reduce(function(colors, node) {
        var _a = (0, tslib_1.__read)(getAll(node, attributesRegexes['data-color']), 1),
            dataColor = _a[0];
        var _b = (0, tslib_1.__read)(getAll(node, attributesRegexes.fill), 1),
            fill = _b[0];
        colors["color" + dataColor] = fill;
        return colors;
    }, {});
};
var parseSvgString = function(svgString) {
    var _a = (0, tslib_1.__read)(getAll(svgString, elementsRegexes.svg), 1),
        svgNode = _a[0];
    var pathNodes = getAll(svgString, elementsRegexes.path);
    var _b = (0, tslib_1.__read)(getAll(svgNode, attributesRegexes['data-type'], SVG_TYPES.SHAPE), 1),
        svgType = _b[0];
    var _c = (0, tslib_1.__read)(getAll(svgNode, attributesRegexes.viewBox).concat([getUGCViewBox(svgType, svgNode)]), 1),
        viewBox = _c[0];
    var _d = (0, tslib_1.__read)(getAll(svgNode, attributesRegexes['data-bbox']) || '', 1),
        bbox = _d[0];
    var svgInfo = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, getColors(pathNodes)), {
        svgType: svgType,
        viewBox: viewBox,
        bbox: bbox
    });
    return {
        content: svgString,
        info: svgInfo,
        boxBoundaries: bbox ? getViewBoxObject(bbox) : {},
    };
};
exports.parseSvgString = parseSvgString;
//# sourceMappingURL=svgParser.js.map