import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}

function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

import React from 'react';
import PropTypes from 'prop-types';
import {
    st,
    classes,
    vars
} from './SkeletonGroup.st.css';
import {
    SkeletonGroupContext
} from './SkeletonGroupAPI';
/** SkeletonGroup */

var SkeletonGroup = /*#__PURE__*/ function(_React$PureComponent) {
    _inherits(SkeletonGroup, _React$PureComponent);

    var _super = _createSuper(SkeletonGroup);

    function SkeletonGroup() {
        _classCallCheck(this, SkeletonGroup);

        return _super.apply(this, arguments);
    }

    _createClass(SkeletonGroup, [{
        key: "render",
        value: function render() {
            var _this$props = this.props,
                dataHook = _this$props.dataHook,
                className = _this$props.className,
                skin = _this$props.skin,
                children = _this$props.children,
                backgroundColor = _this$props.backgroundColor;
            return /*#__PURE__*/ React.createElement("div", {
                "data-hook": dataHook,
                className: st(classes.root, className),
                style: _defineProperty({}, vars['color'], backgroundColor)
            }, /*#__PURE__*/ React.createElement(SkeletonGroupContext.Provider, {
                value: {
                    skin: skin
                }
            }, children), /*#__PURE__*/ React.createElement("div", {
                className: classes.animator
            }));
        }
    }]);

    return SkeletonGroup;
}(React.PureComponent);

SkeletonGroup.displayName = 'SkeletonGroup';
SkeletonGroup.propTypes = {
    /** Applied as data-hook HTML attribute that can be used in the tests */
    dataHook: PropTypes.string,

    /** A css class to be applied to the component's root element */
    className: PropTypes.string,

    /** Effects the color of the Skeleton */
    skin: PropTypes.oneOf(['dark', 'light']),

    /** The background on which the skeleton is rendered */
    backgroundColor: PropTypes.string
};
SkeletonGroup.defaultProps = {
    skin: 'light'
};
export default SkeletonGroup;