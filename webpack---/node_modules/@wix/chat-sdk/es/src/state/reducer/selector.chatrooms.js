import _get from 'lodash/get';
import _isEqual from 'lodash/isEqual';
import {
    createSelector,
    createSelectorCreator,
    defaultMemoize
} from 'reselect';
import memoize from 'lru-memoize';
import {
    Chatroom
} from '../../domain/chat-room';
import {
    filterChatrooms,
    isChatroomUnread
} from './chatroomsFilter';
import {
    isChatroomUnseen
} from '../../modules/unseen-chatroom-count/selector.unseen-chatroom-count';
import {
    createGetChatroomMessagesSelector
} from './selector.messages';
import {
    default_lastSeenMessageSequence
} from '../../defaults/defaults';
var LRU_CACHE_SIZE = 500;
var participantsPresenceSelector = function(state) {
    return state.presence.participantsById;
};
var roomsByIdSelector = function(state) {
    return state.chatrooms.byId;
};
var getFilteredRoomsIdsSelectorForSubscriber = function(subscriberId) {
    return function(state) {
        var _a;
        return (_a = state.chatrooms.filter[subscriberId]) === null || _a === void 0 ? void 0 : _a.filteredRoomsIds;
    };
};
var getChatRoom = function(_a) {
    var stateRoom = _a.stateRoom,
        roomsById = _a.roomsById,
        stateRoomIsOnline = _a.stateRoomIsOnline;
    return new Chatroom(roomsById[stateRoom.id], stateRoomIsOnline);
};
getChatRoom = memoize(LRU_CACHE_SIZE, function(keyA, keyB) {
    return keyA.stateRoom === keyB.stateRoom && keyA.stateRoomIsOnline === keyB.stateRoomIsOnline;
})(getChatRoom);

function computeChatRooms(presenceByParticipantId, roomsById) {
    var result = [];
    var compareChatrooms = function(roomId1, roomId2) {
        var time1 = _get(roomsById[roomId1], 'lastMessage.createdAt');
        var time2 = _get(roomsById[roomId2], 'lastMessage.createdAt');
        if (time1 === time2) {
            return 0;
        }
        if (time1 > time2 || !time2) {
            return -1;
        } else {
            return 1;
        }
    };
    Object.keys(roomsById)
        .sort(compareChatrooms)
        .forEach(function(id) {
            var _a;
            var otherParticipantId = new Chatroom(roomsById[id]).otherParticipantId;
            var roomIsOnline = otherParticipantId ? (_a = presenceByParticipantId[otherParticipantId]) === null || _a === void 0 ? void 0 : _a.online : false;
            var chatroom = getChatRoom({
                stateRoom: roomsById[id],
                roomsById: roomsById,
                stateRoomIsOnline: roomIsOnline
            }); //here the domain class should be different - for list view
            if (chatroom.lastMessage && !chatroom.isTemporary) {
                result.push(chatroom);
            }
        });
    return result;
}

function chatroomHasUnreads(state, chatroomId) {
    var chatroom = state.chatrooms.byId[chatroomId];
    if (!chatroom) {
        return undefined;
    }
    return isChatroomUnread(chatroom);
}

function isStandardChatroom(chatroom) {
    return !chatroom.isArchived && !chatroom.isTemporary;
}

function computeUnreadChatrooms(roomsById) {
    return Object.values(roomsById)
        .filter(isChatroomUnread)
        .filter(isStandardChatroom)
        .map(function(chatroom) {
            return chatroom.id;
        });
}
var getChatrooms = createSelector(participantsPresenceSelector, roomsByIdSelector, computeChatRooms);
var createGetChatroomsSelector = function(subscriberId, filter) {
    return (createDeepEqualSelector(participantsPresenceSelector, createFilteredChatroomsById(subscriberId, filter), function(_participantsPresenceSelector, roomsById) {
        return computeChatRooms(_participantsPresenceSelector, roomsById);
    }));
};
var createDeepEqualSelector = createSelectorCreator(defaultMemoize, _isEqual);
var createFilteredChatroomsById = function(subscriberId, filter) {
    return createSelector(roomsByIdSelector, getFilteredRoomsIdsSelectorForSubscriber(subscriberId), function(roomsByIdSelectorResults, filteredRoomsIds) {
        return filterChatrooms(roomsByIdSelectorResults, filter, filteredRoomsIds);
    });
};
var getAllUnreadChatrooms = createSelector(roomsByIdSelector, computeUnreadChatrooms);
export var getFilteredUnseenChatrooms = function(state, filter) {
    return Object.values(filterChatrooms(state.chatrooms.byId, 'participantId' in filter ?
            {
                participantIds: [filter.participantId]
            } :
            {
                participantType: filter.participantType
            }))
        .filter(isChatroomUnseen)
        .map(function(_a) {
            var chatroomId = _a.id,
                lastSeenMessageSequence = _a.lastSeenMessageSequence;
            return lastSeenMessageSequence ?
                {
                    chatroomId: chatroomId,
                    lastSeenMessageSequence: lastSeenMessageSequence
                } :
                {
                    chatroomId: chatroomId,
                    lastSeenMessageSequence: default_lastSeenMessageSequence
                };
        });
};
export var getFilteredUnreadChatroomsIds = function(state, filter) {
    return Object.values(filterChatrooms(state.chatrooms.byId, filter && {
            participantIds: filter.participantIds
        }))
        .filter(isChatroomUnread)
        .map(function(_a) {
            var chatroomId = _a.id;
            return chatroomId;
        });
};
export var getLastKnownMessageSequence = function(state) {
    var byId = state.chatrooms.byId;
    var sequences = Object.values(byId).map(function(v) {
        var _a;
        return ((_a = v.lastMessage) === null || _a === void 0 ? void 0 : _a.sequence) || -1;
    });
    var lastSequence = Math.max.apply(Math, sequences);
    if (lastSequence > 0 && !isNaN(lastSequence)) {
        return lastSequence;
    }
};
export var getLastMessageSequence = function(state, chatroomId) {
    var messages = createGetChatroomMessagesSelector(chatroomId)(state);
    if (messages.length) {
        var chatroom = state.chatrooms.byId[chatroomId] || {};
        var lastMessage = chatroom.lastMessage;
        var lastMessageSequence = Math.max((lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.sequence) || -1, messages[messages.length - 1].sequence);
        if (lastMessageSequence !== chatroom.lastReadMessageSequence) {
            return lastMessageSequence;
        }
    }
};
export var getLastReadMessageSequence = function(state, chatroomId) {
    var chatroom = state.chatrooms.byId[chatroomId] || {};
    return chatroom.lastReadMessageSequence;
};
export {
    getChatrooms,
    createGetChatroomsSelector,
    chatroomHasUnreads,
    getAllUnreadChatrooms
};