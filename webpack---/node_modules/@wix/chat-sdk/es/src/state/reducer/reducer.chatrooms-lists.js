import {
    __assign
} from "tslib";
import _get from 'lodash/get';
import _isEmpty from 'lodash/isEmpty';
import {
    success
} from '../../utils/promise-middleware-utils';
import types from '../types';
import {
    generateFilterIdentifier
} from '../helpers/filter-identifier-generator';
var initialState = {};
var chatroomsListsReducer = function(state, action) {
    var _a;
    if (state === void 0) {
        state = initialState;
    }
    var payload = action.payload;
    if (_isEmpty(payload)) {
        return state;
    }
    switch (action.type) {
        case success(types.FETCH_ROOMS):
            {
                var chatroomsData = payload.chatrooms;
                var cursor = chatroomsData.next ? chatroomsData.next.before : null;
                var identifier = generateFilterIdentifier(action.meta.filter);
                var noCursorInState = _isEmpty(_get(state[identifier], 'cursor'));
                var isNewCursorRelevant = noCursorInState || action.meta.isFetchMore;
                return isNewCursorRelevant ?
                    __assign(__assign({}, state), (_a = {}, _a[identifier] = {
                        cursor: cursor
                    }, _a)) : state;
            }
        default:
            return state;
    }
};
export {
    chatroomsListsReducer
};