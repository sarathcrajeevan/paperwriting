import Message from '../../domain/message';
import {
    createSelectorCreator,
    defaultMemoize
} from 'reselect';
import _filter from 'lodash/filter';
import _pickBy from 'lodash/pickBy';
import _isEqual from 'lodash/isEqual';
import _reduce from 'lodash/reduce';
import _concat from 'lodash/concat';
import * as MessageDateFormat from '../../utils/formatDate';
import memoize from 'lru-memoize';
var LRU_CACHE_SIZE = 500;
var messagesStateSelector = function(state) {
    return state.messages;
};
var messagesIndicationsStateSelector = function(state) {
    return state.messagesIndications;
};
var participantsStateSelector = function(state) {
    return state.participants;
};
var chatroomsStateSelector = function(state) {
    return state.chatrooms;
};
var createIsEnrichedChatroomLoadedSelector = function(chatroomId) {
    return createIsEqualSelector(chatroomsStateSelector, function(chatroomsState) {
        var chatroomState = chatroomsState.byId[chatroomId];
        return chatroomState === null || chatroomState === void 0 ? void 0 : chatroomState.enrichedChatroomLoaded;
    });
};
var getMessageIndicationsById = function(messagesIndicationsState, messageId) {
    return messagesIndicationsState.byId[messageId];
};
var getFilteredMessages = function(messagesState, chatroomId) {
    return _filter(messagesState.byId, function(m) {
        return m.chatroomId === chatroomId;
    });
};
var getFilteredIndications = function(messagesIndicationsState, messagesState, chatroomId) {
    return _pickBy(messagesIndicationsState.byId, function(_, key) {
        return messagesState.byId[key] && messagesState.byId[key].chatroomId === chatroomId;
    });
};
var createDomainMessage = function(message, indications) {
    return new Message(message, message.transit, indications);
};
createDomainMessage = memoize(LRU_CACHE_SIZE)(createDomainMessage);

function sortMessagesByCreatedAt(messagesArray) {
    return messagesArray.sort(function(c1, c2) {
        return c1.createdAt - c2.createdAt;
    });
}
export function sortMessagesBySequence(messagesArray) {
    return messagesArray.sort(function(c1, c2) {
        return c1.sequence - c2.sequence;
    });
}
var createIsEqualSelector = createSelectorCreator(defaultMemoize, _isEqual);
var createFilteredMessagesSelector = function(chatroomId) {
    return createIsEqualSelector(messagesStateSelector, function(messagesState) {
        return getFilteredMessages(messagesState, chatroomId);
    });
};
var createMessageByIdSelector = function(messageId) {
    return createIsEqualSelector(messagesStateSelector, function(messageState) {
        return messageState.byId[messageId];
    });
};
export var createMessagesIndicationsSelector = function(chatroomId) {
    return createIsEqualSelector(messagesIndicationsStateSelector, messagesStateSelector, function(indicationsState, messagesState) {
        return getFilteredIndications(indicationsState, messagesState, chatroomId);
    });
};
export var createSortedMessagesSelector = function(chatroomId, sorter) {
    if (sorter === void 0) {
        sorter = sortMessagesByCreatedAt;
    }
    return createIsEqualSelector(createFilteredMessagesSelector(chatroomId), sorter);
};
var getMessageIndicationsDomainArray = function(messageIndications, participantsState) {
    return _reduce(messageIndications, function(allIndicationsAcc, participantIndications, participantId) {
        var messageIndicationDetails = createMessageIndicationDetails(participantIndications);
        var participantData = participantsState.byId[participantId];
        if (!participantData) {
            return allIndicationsAcc;
        }
        return _concat(allIndicationsAcc, {
            participant: {
                id: participantId,
                displayData: participantData.displayData,
            },
            details: messageIndicationDetails,
        });
    }, []);
};
var createMessageIndicationDetails = function(messageIndicationDetails) {
    return _reduce(messageIndicationDetails, function(detailsAcc, detailsEntity) {
        return _concat(detailsAcc, {
            code: detailsEntity.code,
            event: detailsEntity.event,
            method: detailsEntity.method,
            formattedTimestamp: MessageDateFormat.forThread(detailsEntity.timestamp),
        });
    }, []);
};
var assignIndicationToMessage = function(sortedMessages, messagesIndications, isEnrichedChatroomLoaded, participantsState) {
    return sortedMessages.map(function(message) {
        var messageIndications = messagesIndications[message.id];
        if (!messageIndications) {
            return isEnrichedChatroomLoaded ? createDomainMessage(message, []) : createDomainMessage(message);
        }
        var messageIndicationsDomainArray = getMessageIndicationsDomainArray(messageIndications, participantsState);
        return createDomainMessage(message, messageIndicationsDomainArray);
    });
};
var createMessageIndicationsByIdSelector = function(messageId) {
    return createIsEqualSelector(messagesIndicationsStateSelector, function(messageIndicationsState) {
        return getMessageIndicationsById(messageIndicationsState, messageId);
    });
};
export var createGetChatroomMessagesSelector = function(chatroomId) {
    return createIsEqualSelector(createSortedMessagesSelector(chatroomId), createMessagesIndicationsSelector(chatroomId), createIsEnrichedChatroomLoadedSelector(chatroomId), participantsStateSelector, assignIndicationToMessage);
};
export var createGetDrillInMessageIndicationsSelector = function(chatroomId, messageId) {
    return createIsEqualSelector(createMessageIndicationsByIdSelector(messageId), createIsEnrichedChatroomLoadedSelector(chatroomId), createMessageByIdSelector(messageId), participantsStateSelector, function(messageIndications, isEnrichedChatroomLoaded, messageFromState, participantsState) {
        if (!messageFromState) {
            return {
                indications: undefined
            };
        }
        if (!messageIndications) {
            return isEnrichedChatroomLoaded ? {
                indications: []
            } : {
                indications: undefined
            };
        }
        var messageIndicationsDomainArray = getMessageIndicationsDomainArray(messageIndications, participantsState);
        return {
            indications: messageIndicationsDomainArray
        };
    });
};