import {
    __assign
} from "tslib";
import types from '../types';
import {
    success,
    pending,
    error
} from '../../utils/utils.index';
import {
    combineReducers
} from 'redux';
var initialState = {};
var byId = function(state, action) {
    if (state === void 0) {
        state = initialState;
    }
    switch (action.type) {
        case types.TYPING:
            return updateTypedTextForRoom(state, action.meta.chatroomId, action.text);
        case success(types.FETCH_MESSAGE_DRAFTS):
            return __assign(__assign({}, action.payload), state);
        default:
            return state;
    }
};
var isFetching = function(state, action) {
    if (state === void 0) {
        state = false;
    }
    switch (action.type) {
        case pending(types.FETCH_MESSAGE_DRAFTS):
            return true;
        case success(types.FETCH_MESSAGE_DRAFTS):
        case error(types.FETCH_MESSAGE_DRAFTS):
            return false;
        default:
            return state;
    }
};
var updateTypedTextForRoom = function(state, chatroomId, text) {
    var newState = __assign({}, state);
    newState[chatroomId] = text;
    return newState;
};
var messageDraftReducer = combineReducers({
    byId: byId,
    isFetching: isFetching,
});
export {
    messageDraftReducer
};