import {
    __assign
} from "tslib";
import types from '../types';
import {
    success
} from '../../utils/promise-middleware-utils';
import {
    combineReducers
} from 'redux';
var initialState = {};
var mergeParticipant = function(participantsMap, participant) {
    var _a;
    return (__assign(__assign({}, participantsMap), (_a = {}, _a[participant.id] = participant, _a)));
};
var mergeParticipants = function(state, participants) {
    return participants.items.reduce(mergeParticipant, state);
};
var byId = function(state, action) {
    if (state === void 0) {
        state = initialState;
    }
    switch (action.type) {
        case success(types.FETCH_ENRICHED_ROOM):
            return mergeParticipants(state, action.payload.participants);
        case success(types.FETCH_PARTICIPANTS_DISPLAY_DATA):
            return mergeParticipants(state, action.payload);
        default:
            return state;
    }
};
export var participantsReducer = combineReducers({
    byId: byId
});