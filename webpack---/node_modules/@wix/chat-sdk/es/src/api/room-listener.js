import {
    createGetChatroomMessagesSelector,
    createMessagesIndicationsSelector,
} from '../state/reducer/selector.messages';
import {
    getChatRoom
} from '../state/stateReader';
import {
    buildEnrichedChatroomFromState
} from '../domain/enriched-chat-room';
import _isEmpty from 'lodash/isEmpty';
import {
    throwDeprecationWarning
} from '../utils/utils.index';
import * as messageDraftInitialStateCache from '../state/helpers/message-draft.initial-state-cache';
var getRoomListener = function(chatroomId) {
    var _lastRoom;
    var _lastRoomMessages;
    var _lastRoomIndications;
    var _newMessagesSinceLastRun = function(roomMessages, lastRoomMessages) {
        var NO_SEQUENCE = -2;
        var currentMax = roomMessages ? Math.max.apply(Math, roomMessages.map(function(m) {
            return m.sequence || NO_SEQUENCE;
        })) : -1;
        var lastMax = lastRoomMessages ? Math.max.apply(Math, lastRoomMessages.map(function(m) {
            return m.sequence || NO_SEQUENCE;
        })) : -1;
        var lastRunHadMessages = !_isEmpty(lastRoomMessages);
        return lastRunHadMessages && currentMax > lastMax;
    };
    var getChatroomMessages = createGetChatroomMessagesSelector(chatroomId);
    var getChatroomIndications = createMessagesIndicationsSelector(chatroomId);
    var roomListener = function(_a) {
        var store = _a.store,
            onChange = _a.onChange,
            onNewMessage = _a.onNewMessage,
            onError = _a.onError;
        var state = store.getState();
        var room = getChatRoom(state, chatroomId);
        var roomMessages = getChatroomMessages(state);
        var roomIndications = getChatroomIndications(state);
        var messageDraft = messageDraftInitialStateCache.get(state.messageDraft.byId, chatroomId);
        var noChangesToPropogate = room &&
            roomMessages &&
            _lastRoom === room &&
            _lastRoomMessages === roomMessages &&
            _lastRoomIndications === roomIndications &&
            messageDraft.dontUpdate;
        if (noChangesToPropogate) {
            return;
        }
        var newMessagesSinceLastRun = _newMessagesSinceLastRun(roomMessages, _lastRoomMessages);
        _lastRoom = room;
        _lastRoomMessages = roomMessages;
        _lastRoomIndications = roomIndications;
        var chatroom = buildEnrichedChatroomFromState(state, chatroomId);
        if (chatroom.error && onError) {
            throwDeprecationWarning('Instead of onError callback in subscribeToChatroom, rely on the error field in the Chatroom object');
            onError(chatroom.error);
        }
        onChange(chatroom);
        if (newMessagesSinceLastRun && onNewMessage) {
            onNewMessage(chatroom);
        }
    };
    return roomListener;
};
export default getRoomListener;