import {
    __awaiter,
    __generator
} from "tslib";
import getIndicationsChangesListener from './message-indications-listener';
import * as chatEventEmitter from '../services/chat-event-emitter.service';
import {
    getMissingParticipantIds
} from '../state/helpers/participants.helper';
import _isEmpty from 'lodash/isEmpty';
var MessagesApi = /** @class */ (function() {
    function MessagesApi(_a) {
        var store = _a.store,
            messagesActions = _a.messagesActions,
            subscriptionService = _a.subscriptionService,
            drillInMessageIndications = _a.drillInMessageIndications;
        this.store = store;
        this.messagesActions = messagesActions;
        this.subscriptionService = subscriptionService;
        this.drillInMessageIndications = drillInMessageIndications;
    }
    MessagesApi.prototype.subscribeToDrillInMessageIndications = function(_a) {
        var chatroomId = _a.chatroomId,
            messageId = _a.messageId,
            sequence = _a.sequence,
            callback = _a.callback;
        var _b = this,
            store = _b.store,
            messagesActions = _b.messagesActions;
        var notifyIndicationsChanges = getIndicationsChangesListener(chatroomId, messageId);
        notifyIndicationsChanges(store, callback);
        var removeStoreSubscription = store.subscribe(function() {
            return notifyIndicationsChanges(store, callback);
        });
        var fetchDrillInIndications = this._createIndicationsDataFetcher(chatroomId, sequence);
        fetchDrillInIndications();
        var removeFromSubscriptionService = this._registerIndicationsSubscription(chatroomId, sequence, fetchDrillInIndications);
        var fetchMissingParticipantsDisplayData = function(drillInMessageIndications) {
            var participantIdsFromIndications = drillInMessageIndications.indications.map(function(indication) {
                return indication.participantId;
            });
            var missingParticipantIds = getMissingParticipantIds(participantIdsFromIndications);
            if (!_isEmpty(missingParticipantIds)) {
                store.dispatch(messagesActions.action$fetchRoomParticipantsDisplayData(chatroomId, missingParticipantIds));
            }
        };
        chatEventEmitter.addListener(chatEventEmitter.CHAT_INTERNAL_EVENTS.FETCH_DRILL_IN_MESSAGE_INDICATIONS_COMPLETED, fetchMissingParticipantsDisplayData);
        return {
            unsubscribe: function() {
                removeStoreSubscription();
                removeFromSubscriptionService();
                chatEventEmitter.removeListener(chatEventEmitter.CHAT_INTERNAL_EVENTS.FETCH_DRILL_IN_MESSAGE_INDICATIONS_COMPLETED, fetchMissingParticipantsDisplayData);
            },
        };
    };
    MessagesApi.prototype._registerIndicationsSubscription = function(chatroomId, sequence, fetchDrillInIndications) {
        var subscriptionIdentifier = {
            chatroomId: chatroomId,
            sequence: sequence
        };
        return this.subscriptionService.registerSubscription(subscriptionIdentifier, fetchDrillInIndications);
    };
    MessagesApi.prototype._createIndicationsDataFetcher = function(chatroomId, sequence) {
        var _this = this;
        return function() {
            return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/ , this.store.dispatch(this.messagesActions.action$fetchDrillInMessageIndications(chatroomId, sequence))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/ ];
                    }
                });
            });
        };
    };
    return MessagesApi;
}());
export default MessagesApi;