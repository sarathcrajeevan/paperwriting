import _isEqual from 'lodash/isEqual';
import _isEmpty from 'lodash/isEmpty';
import {
    presenceByGroupIdSelector
} from '../../presence/selector.presence-by-group-id';
import presenceActions from '../../presence/action.presence';
import {
    ApiPresenceStatus
} from '../../presence/types';
var PresencePublicApi = /** @class */ (function() {
    function PresencePublicApi(currentUser, serverApi, store) {
        this.currentUser = currentUser;
        this.serverApi = serverApi;
        this.store = store;
    }
    PresencePublicApi.prototype.watch = function(useNewConvention) {
        if (useNewConvention === void 0) {
            useNewConvention = false;
        }
        return this.serverApi.http$watch(useNewConvention);
    };
    PresencePublicApi.prototype.subscribeToPresenceChanges = function(_a) {
        var _this = this;
        var callback = _a.callback,
            preFetchPresence = _a.preFetchPresence;
        var prevRes;
        if (preFetchPresence) {
            this.store.dispatch(presenceActions.action$fetchPresence(preFetchPresence));
        }
        var storeCallback = function() {
            var state = _this.store.getState();
            var presenceState = state.presence;
            var isPrefetchedInitialized = preFetchPresence === undefined || presenceState.didFetchPresence;
            if (presenceState && !_isEqual(prevRes, presenceState)) {
                if (!isPrefetchedInitialized) {
                    return;
                }
                prevRes = presenceState;
                var params = {
                    participantsById: presenceState.participantsById,
                    participantsByGroupId: presenceByGroupIdSelector(state),
                };
                callback(params);
            }
        };
        if (this.hasParticipants()) {
            storeCallback();
        }
        return {
            unsubscribe: this.store.subscribe(storeCallback),
        };
    };
    /**
     * @function set
     * @description Set presence for given sessionId of given group.
     * @param {string} sessionId a UUID indicating the current session (e.g. used to support correct presence data in use-cases such as visitors with several open tabs simultaneously)
     * @param {string} group a UUID indicating the host's group (e.g. In Inbox, it's the inbox instance-id, as visitors are scoped by per site)
     * @param {object} data the presence data
     */
    PresencePublicApi.prototype.set = function(sessionId, group, data) {
        var presence = {
            userId: this.currentUser.userId,
            sessionId: sessionId,
            group: group,
            data: data,
            status: ApiPresenceStatus.ONLINE,
        };
        if (!this.currentUser.token) {
            return Promise.reject('Unable to setPresence without chatToken');
        }
        return this.serverApi.http$setPresence(presence, this.currentUser.token);
    };
    PresencePublicApi.prototype.hasParticipants = function() {
        return !_isEmpty(this.store.getState().presence.participantsById);
    };
    return PresencePublicApi;
}());
export default PresencePublicApi;