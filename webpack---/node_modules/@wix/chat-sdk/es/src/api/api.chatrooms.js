import {
    __awaiter,
    __generator
} from "tslib";
import {
    createGetChatroomsSelector
} from '../state/reducer/selector.chatrooms';
import {
    getChatRoom,
    getListState
} from '../state/stateReader';
import {
    Chatroom
} from '../domain/chat-room';
import {
    generateFilterIdentifier
} from '../state/helpers/filter-identifier-generator';
import Message from '../domain/message';
import {
    extractChatroomsFromServerResults
} from '../utils/searchUtils';
import _get from 'lodash/get';
import _isEmpty from 'lodash/isEmpty';
import _isEqual from 'lodash/isEqual';
import {
    chatSdk
} from './chat-sdk';
import * as constants from '../constants/constants';
import uuid from 'uuid/v4';
import {
    STAR_LABEL_ID
} from '../constants/constants';
var ChatroomsApi = /** @class */ (function() {
    function ChatroomsApi(_a) {
        var store = _a.store,
            chatroomsActions = _a.chatroomsActions,
            unreadChatroomCountActions = _a.unreadChatroomCountActions,
            subscriptionService = _a.subscriptionService,
            serverApi = _a.serverApi;
        this.isUnreadFilterEnabled = function() {
            return chatSdk.isExperimentOn(constants.experiments.FilterByUnread);
        };
        this.isStarFilterEnabled = function() {
            return chatSdk.isExperimentOn(constants.experiments.InboxAllowStarConversations);
        };
        this.store = store;
        this.chatroomsActions = chatroomsActions;
        this.unreadChatroomCountActions = unreadChatroomCountActions;
        this.subscriptionService = subscriptionService;
        this.serverApi = serverApi;
    }
    ChatroomsApi.prototype.updateFilteredRoomsIdsIfNeeded = function(getChatroomsSelector, subscriberId, isStateFilterEnabledAndSelected) {
        if (!isStateFilterEnabledAndSelected) {
            return;
        }
        var _a = this,
            store = _a.store,
            chatroomsActions = _a.chatroomsActions;
        var state = store.getState();
        var newFilteredRoomsIds = getChatroomsSelector(state).map(function(room) {
            return room.id;
        });
        var filteredRoomsIds = (state.chatrooms.filter[subscriberId] || {}).filteredRoomsIds;
        var shouldUpdateFilteredRoomsIds = newFilteredRoomsIds.some(function(roomId) {
            return !(filteredRoomsIds === null || filteredRoomsIds === void 0 ? void 0 : filteredRoomsIds.includes(roomId));
        });
        if (shouldUpdateFilteredRoomsIds) {
            store.dispatch(chatroomsActions.action$setFilteredRoomsIds(subscriberId, false, newFilteredRoomsIds));
        }
    };
    ChatroomsApi.prototype.getCurrentFilterForSubscriber = function(subscriberId) {
        var _a;
        var state = this.store.getState();
        return ((_a = state.chatrooms.filter[subscriberId]) === null || _a === void 0 ? void 0 : _a.currentFilter) || {};
    };
    ChatroomsApi.prototype.subscribeToChatRoomsList = function(_a) {
        var _this = this;
        var _b;
        var subscriberId = _a.subscriberId,
            callback = _a.callback,
            _c = _a.filter,
            filter = _c === void 0 ? {} : _c;
        var _d = this,
            store = _d.store,
            chatroomsActions = _d.chatroomsActions;
        var _subscriberId = subscriberId || uuid();
        var _lastRooms;
        var getChatroomsSelector = createGetChatroomsSelector(_subscriberId, filter);
        var _lastStatus;
        var removeFromSubscriptionService = this._registerSubscriptionV2(filter);
        var filterHasChanged = !_isEqual(this.getCurrentFilterForSubscriber(_subscriberId), filter);
        var isUnreadFilter = filter === null || filter === void 0 ? void 0 : filter.isUnread;
        var isStarFilter = (_b = filter === null || filter === void 0 ? void 0 : filter.labelIds) === null || _b === void 0 ? void 0 : _b.includes(STAR_LABEL_ID);
        var isStateFilter = isUnreadFilter || isStarFilter;
        if ((this.isUnreadFilterEnabled() || this.isStarFilterEnabled()) && filterHasChanged) {
            var state = store.getState();
            var newFilteredRoomsIds = isStateFilter ? getChatroomsSelector(state).map(function(room) {
                return room.id;
            }) : [];
            store.dispatch(chatroomsActions.action$handleFilterChanged(_subscriberId, filter, newFilteredRoomsIds));
        }
        var _notify = function() {
            var state = store.getState();
            var rooms = getChatroomsSelector(state);
            var status = state.chatrooms.status;
            var listStateByFilter = getListState(state, generateFilterIdentifier(filter));
            var cursor = _get(listStateByFilter, 'cursor');
            if (rooms === _lastRooms && status === _lastStatus) {
                return;
            }
            _lastRooms = rooms;
            _lastStatus = status;
            try {
                callback({
                    rooms: rooms,
                    status: status,
                    cursor: cursor
                });
            } catch (e) {
                // TODO handle error state
                console.error('Error in subscribe callback', e);
            }
        };
        var unsubscribe = store.subscribe(function() {
            _notify();
            _this.updateFilteredRoomsIdsIfNeeded(getChatroomsSelector, _subscriberId, (_this.isUnreadFilterEnabled() && isUnreadFilter) || (_this.isStarFilterEnabled() && isStarFilter));
        });
        _notify();
        return this._activeSubscription(_subscriberId, unsubscribe, removeFromSubscriptionService, filter);
    };
    ChatroomsApi.prototype._registerSubscriptionV2 = function(filter) {
        var _this = this;
        var initialDataFetch = function() {
            return _this.fetchRooms({
                isSilent: false,
                filter: filter
            });
        };
        var refreshDataCallback = function() {
            return _this.fetchRooms({
                isSilent: true,
                filter: filter
            });
        };
        return this.subscriptionService.registerSubscription(filter, refreshDataCallback, initialDataFetch);
    };
    ChatroomsApi.prototype._activeSubscription = function(subscriberId, unsubscribe, removeFromSubscriptionService, filter) {
        var _this = this;
        return {
            subscriberId: subscriberId,
            unsubscribe: function() {
                unsubscribe();
                removeFromSubscriptionService();
            },
            fetchMore: function(cursor) {
                _this.fetchRooms({
                    cursor: cursor,
                    filter: filter
                });
            },
        };
    };
    ChatroomsApi.prototype.deleteChatroom = function(chatroomId) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.action$deleteRoom(chatroomId))];
            });
        });
    };
    ChatroomsApi.prototype.archiveChatroom = function(chatroomId) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.archiveRoom(chatroomId))];
            });
        });
    };
    ChatroomsApi.prototype.unarchiveChatroom = function(chatroomId) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.unarchiveRoom(chatroomId))];
            });
        });
    };
    ChatroomsApi.prototype.fetchRooms = function(_a) {
        var _b = _a.filter,
            filter = _b === void 0 ? {} : _b,
            _c = _a.cursor,
            cursor = _c === void 0 ? undefined : _c,
            _d = _a.isSilent,
            isSilent = _d === void 0 ? false : _d;
        return __awaiter(this, void 0, void 0, function() {
            var _e, store, chatroomsActions;
            return __generator(this, function(_f) {
                _e = this, store = _e.store, chatroomsActions = _e.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.fetchRooms({
                    filter: filter,
                    cursor: cursor,
                    isSilent: isSilent
                }))];
            });
        });
    };
    ChatroomsApi.prototype.addRooms = function(_a) {
        var rooms = _a.rooms;
        var _b = this,
            store = _b.store,
            chatroomsActions = _b.chatroomsActions;
        return store.dispatch(chatroomsActions.addRooms(rooms));
    };
    ChatroomsApi.prototype.getUnreadCountForRoom = function(chatroomId) {
        var chatroomState = getChatRoom(this.store.getState(), chatroomId);
        var chatroom = new Chatroom(chatroomState);
        return chatroom.count;
    };
    ChatroomsApi.prototype.getUnreadCountForRooms = function(chatroomIds) {
        var _this = this;
        return chatroomIds.reduce(function(acc, chatroomId) {
            acc[chatroomId] = _this.getUnreadCountForRoom(chatroomId);
            return acc;
        }, {});
    };
    ChatroomsApi.prototype.fetchMessageDrafts = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                store.dispatch(chatroomsActions.fetchMessageDrafts());
                return [2 /*return*/ ];
            });
        });
    };
    ChatroomsApi.prototype.markAllRoomsAsRead = function(filter, updateServer) {
        if (updateServer === void 0) {
            updateServer = true;
        }
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions, serverApi, res, _b;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions, serverApi = _a.serverApi;
                        if (!updateServer) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , serverApi.http$markAllRoomsAsRead(filter)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/ , 3];
                    case 2:
                        _b = Promise.resolve({
                            markedAsRead: 0
                        });
                        _c.label = 3;
                    case 3:
                        res = _b;
                        return [4 /*yield*/ , store.dispatch(chatroomsActions.fetchRooms({
                            filter: filter
                        }))];
                    case 4:
                        _c.sent();
                        if (!filter.participantIds) return [3 /*break*/ , 6];
                        return [4 /*yield*/ , store.dispatch(this.unreadChatroomCountActions.fetchAndUpdateUnreadChatrooms({
                            participantIds: filter.participantIds
                        }))];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6:
                        return [2 /*return*/ , res];
                }
            });
        });
    };
    ChatroomsApi.prototype.deleteChatrooms = function(chatroomIds) {
        var _a = this,
            store = _a.store,
            chatroomsActions = _a.chatroomsActions;
        return store.dispatch(chatroomsActions.action$deleteRooms(chatroomIds));
    };
    ChatroomsApi.prototype.archiveChatrooms = function(chatroomIds) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.archiveRooms(chatroomIds))];
            });
        });
    };
    ChatroomsApi.prototype.unarchiveChatrooms = function(chatroomIds) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, store, chatroomsActions;
            return __generator(this, function(_b) {
                _a = this, store = _a.store, chatroomsActions = _a.chatroomsActions;
                return [2 /*return*/ , store.dispatch(chatroomsActions.unarchiveRooms(chatroomIds))];
            });
        });
    };
    ChatroomsApi.prototype.search = function(_a) {
        var searchTerm = _a.searchTerm,
            participantIds = _a.participantIds,
            chatroomsPageSize = _a.chatroomsPageSize,
            chatroomsNextPointer = _a.chatroomsNextPointer,
            messagesPageSize = _a.messagesPageSize,
            messagesNextPointer = _a.messagesNextPointer;
        return __awaiter(this, void 0, void 0, function() {
            var searchResults, chatroomsFromSearchResults, chatrooms, messages;
            var _this = this;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        return [4 /*yield*/ , this.serverApi.http$search({
                            searchTerm: searchTerm,
                            participantIds: participantIds,
                            chatroomsPageSize: chatroomsPageSize,
                            chatroomsNextPointer: chatroomsNextPointer,
                            messagesPageSize: messagesPageSize,
                            messagesNextPointer: messagesNextPointer,
                        })];
                    case 1:
                        searchResults = _b.sent();
                        chatroomsFromSearchResults = extractChatroomsFromServerResults(searchResults);
                        this.addRooms({
                            rooms: chatroomsFromSearchResults
                        });
                        chatrooms = [];
                        searchResults.chatroomsPage.chatrooms.forEach(function(room) {
                            var chatroomState = getChatRoom(_this.store.getState(), room.id);
                            if (!_isEmpty(chatroomState)) {
                                var chatroom = new Chatroom(chatroomState);
                                chatrooms.push(chatroom);
                            }
                        });
                        messages = [];
                        searchResults.messagesPage.messages.forEach(function(messageSearchResultServerDto) {
                            var chatroomState = getChatRoom(_this.store.getState(), messageSearchResultServerDto.chatroom.id);
                            if (!_isEmpty(chatroomState)) {
                                var chatroom = new Chatroom(chatroomState);
                                var message = new Message(messageSearchResultServerDto.message);
                                messages.push({
                                    chatroom: chatroom,
                                    message: message
                                });
                            }
                        });
                        return [2 /*return*/ , {
                            chatroomsPage: {
                                chatrooms: chatrooms,
                                nextPointer: searchResults.chatroomsPage.nextPage.nextPointer,
                                total: searchResults.chatroomsPage.nextPage.total,
                            },
                            messagesPage: {
                                messages: messages,
                                nextPointer: searchResults.messagesPage.nextPage.nextPointer,
                                total: searchResults.messagesPage.nextPage.total,
                            },
                        }];
                }
            });
        });
    };
    return ChatroomsApi;
}());
export default ChatroomsApi;