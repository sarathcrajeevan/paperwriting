import {
    __assign
} from "tslib";
import {
    MessageTypes,
    MimeTypes
} from '../constants/constants';
import MessagePart from './message-part';
import {
    extractTextToCopy
} from '../utils/message-copy-utils';
import uuidV4 from 'uuid/v4';
import * as MessageDateFormat from '../utils/formatDate';
import getCtaFacade from './message-cta-facade';
var Message = /** @class */ (function() {
    function Message(dto, transit, indications, groupPosition, showSentTime) {
        if (transit === void 0) {
            transit = {};
        }
        this._messageParts = (dto.data || []).map(function(part) {
            return new MessagePart(part);
        });
        this._transit = transit;
        var summary = dto.summary ? dto.summary.slice(0, 250) : '';
        this._indications = indications;
        this._dto = __assign(__assign({}, dto), {
            summary: summary
        });
        this._groupPosition = groupPosition;
        this._showSentTime = showSentTime;
        this.messageType = dto.messageType;
        this.isEphemeral = dto.isEphemeral || false;
        this.messageTypeVersion = dto.messageTypeVersion;
        this.data = dto.data;
    }
    Object.defineProperty(Message.prototype, "indications", {
        get: function() {
            return this._indications;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "dto", {
        get: function() {
            return this._dto;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "isSilent", {
        get: function() {
            return this._dto.isSilent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "cta", {
        get: function() {
            return getCtaFacade(this._dto);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "sequence", {
        get: function() {
            return this._dto.sequence;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "summary", {
        get: function() {
            return this._dto.summary;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "type", {
        get: function() {
            return this._dto.messageType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "messageParts", {
        get: function() {
            return this._messageParts;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "mimeTypes", {
        get: function() {
            return this._messageParts.map(function(part) {
                return part.mimeType;
            });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "templateData", {
        get: function() {
            return this._dto.templateData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "textToCopy", {
        get: function() {
            return extractTextToCopy(this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "sender", {
        get: function() {
            return this._dto.sender;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "senderDisplayData", {
        get: function() {
            return this._dto.senderDisplayData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "id", {
        get: function() {
            return this._dto.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "chatroomId", {
        get: function() {
            return this._dto.chatroomId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "isTemplate", {
        get: function() {
            return Object.values(MessageTypes.Templates).includes(this._dto.messageType);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "transit", {
        get: function() {
            return this._transit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "isPending", {
        get: function() {
            return !!this._transit.isPending;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "createdAt", {
        get: function() {
            return this._dto.createdAt;
        },
        set: function(date) {
            this._dto.createdAt = date;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "age", {
        get: function() {
            return MessageDateFormat.forList(this.createdAt);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "createdAtFormatted", {
        get: function() {
            return MessageDateFormat.forThread(this.createdAt);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "groupPosition", {
        get: function() {
            return this._groupPosition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "showSentTime", {
        get: function() {
            return this._showSentTime;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "badges", {
        get: function() {
            return this._dto.badges;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "deliveryMethods", {
        get: function() {
            return this._dto.deliveryMethods;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "title", {
        get: function() {
            return this._dto.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Message.prototype, "originMethod", {
        get: function() {
            return this._dto.originMethod;
        },
        enumerable: false,
        configurable: true
    });
    return Message;
}());
var simpleMessageDTO = function(_a) {
    var id = _a.id,
        userId = _a.userId,
        _b = _a.userType,
        userType = _b === void 0 ? 'user' : _b,
        pluginName = _a.pluginName,
        mimeType = _a.mimeType,
        _c = _a.data,
        data = _c === void 0 ? {} : _c,
        chatroomId = _a.chatroomId,
        summary = _a.summary,
        senderDisplayData = _a.senderDisplayData,
        _d = _a.deliveryMethods,
        deliveryMethods = _d === void 0 ? [] : _d,
        _e = _a.badges,
        badges = _e === void 0 ? [] : _e,
        _f = _a.isEphemeral,
        isEphemeral = _f === void 0 ? false : _f,
        _g = _a.isSilent,
        isSilent = _g === void 0 ? false : _g,
        title = _a.title,
        originMethod = _a.originMethod;
    return {
        isAutomated: false,
        deliveryMethods: deliveryMethods,
        badges: badges,
        isEphemeral: isEphemeral,
        isSilent: isSilent,
        sequence: 0,
        id: id || uuidV4(),
        chatroomId: chatroomId,
        summary: summary,
        createdAt: new Date().getTime(),
        messageType: 'message',
        messageTypeVersion: 1,
        sender: userId ? {
            type: userType,
            userId: userId
        } : undefined,
        senderDisplayData: senderDisplayData,
        pluginName: pluginName,
        templateData: undefined,
        title: title,
        data: [{
            mimeType: mimeType,
            data: data,
        }, ],
        visibleBy: 'EVERYONE',
        originMethod: originMethod,
    };
};
Message.fromText = function(params) {
    var text = params.text,
        id = params.id,
        summary = params.summary,
        userId = params.userId,
        userType = params.userType,
        pluginName = params.pluginName,
        chatroomId = params.chatroomId,
        transit = params.transit,
        deliveryMethods = params.deliveryMethods,
        badges = params.badges,
        isEphemeral = params.isEphemeral,
        isSilent = params.isSilent,
        title = params.title,
        originMethod = params.originMethod;
    var dto = simpleMessageDTO({
        id: id,
        userId: userId,
        pluginName: pluginName,
        summary: summary,
        userType: userType,
        mimeType: MimeTypes.PlainText,
        data: {
            text: text
        },
        chatroomId: chatroomId,
        deliveryMethods: deliveryMethods,
        badges: badges,
        isEphemeral: isEphemeral,
        isSilent: isSilent,
        title: title,
        originMethod: originMethod,
    });
    return new Message(dto, transit);
};
Message.fromImage = function(_a) {
    var id = _a.id,
        uri = _a.uri,
        mediaFileId = _a.mediaFileId,
        width = _a.width,
        height = _a.height,
        fileName = _a.fileName,
        fileSize = _a.fileSize,
        mediaProvider = _a.mediaProvider,
        userId = _a.userId,
        pluginName = _a.pluginName,
        chatroomId = _a.chatroomId,
        transit = _a.transit,
        summary = _a.summary,
        deliveryMethods = _a.deliveryMethods,
        badges = _a.badges;
    return new Message(simpleMessageDTO({
        id: id,
        summary: summary,
        userId: userId,
        pluginName: pluginName,
        mimeType: MimeTypes.Image,
        data: {
            uri: uri,
            mediaFileId: mediaFileId,
            width: width,
            height: height,
            fileName: fileName,
            fileSize: fileSize,
            mediaProvider: mediaProvider
        },
        chatroomId: chatroomId,
        deliveryMethods: deliveryMethods,
        badges: badges,
    }), transit);
};
Message.fromFile = function(_a) {
    var id = _a.id,
        uri = _a.uri,
        mediaFileId = _a.mediaFileId,
        width = _a.width,
        height = _a.height,
        fileName = _a.fileName,
        fileSize = _a.fileSize,
        type = _a.type,
        mediaProvider = _a.mediaProvider,
        userId = _a.userId,
        pluginName = _a.pluginName,
        chatroomId = _a.chatroomId,
        transit = _a.transit,
        summary = _a.summary,
        deliveryMethods = _a.deliveryMethods,
        badges = _a.badges;
    return new Message(simpleMessageDTO({
        id: id,
        summary: summary,
        userId: userId,
        pluginName: pluginName,
        mimeType: MimeTypes.File,
        data: {
            uri: uri,
            mediaFileId: mediaFileId,
            width: width,
            height: height,
            fileName: fileName,
            fileSize: fileSize,
            type: type,
            mediaProvider: mediaProvider
        },
        chatroomId: chatroomId,
        deliveryMethods: deliveryMethods,
        badges: badges,
    }), transit);
};
Message.fromData = function(dataParam) {
    var data = dataParam.data,
        transit = dataParam.transit,
        userId = dataParam.userId,
        pluginName = dataParam.pluginName,
        chatroomId = dataParam.chatroomId,
        summary = dataParam.summary,
        userType = dataParam.userType,
        deliveryMethods = dataParam.deliveryMethods,
        badges = dataParam.badges,
        title = dataParam.title,
        originMethod = dataParam.originMethod;
    if (data) {
        if (data.text) {
            return Message.fromText({
                text: data.text,
                summary: summary,
                id: data.id,
                userId: userId,
                userType: userType,
                pluginName: pluginName,
                chatroomId: chatroomId,
                transit: transit,
                deliveryMethods: deliveryMethods,
                badges: badges,
                title: title,
                originMethod: originMethod,
            });
        } else if (data.image) {
            var _a = data.image,
                mediaFileId = _a.mediaFileId,
                width = _a.width,
                height = _a.height,
                fileName = _a.fileName,
                fileSize = _a.fileSize,
                mediaProvider = _a.mediaProvider;
            return Message.fromImage({
                id: data.id,
                uri: data.image.uri || data.image.imageUri,
                mediaFileId: mediaFileId,
                width: width,
                height: height,
                fileName: fileName,
                fileSize: fileSize,
                mediaProvider: mediaProvider,
                summary: summary,
                userId: userId,
                userType: userType,
                pluginName: pluginName,
                chatroomId: chatroomId,
                transit: transit,
                deliveryMethods: deliveryMethods,
                badges: badges,
            });
        }
    }
    return new Message(simpleMessageDTO({
        id: data.id,
        userId: userId,
        pluginName: pluginName,
        mimeType: MimeTypes.Image,
        chatroomId: chatroomId,
        summary: '',
        deliveryMethods: deliveryMethods,
        badges: badges,
    }));
};
Message.fromTemplate = function(data) {
    var userId = data.userId,
        _a = data.userType,
        userType = _a === void 0 ? 'user' : _a,
        pluginName = data.pluginName,
        chatroomId = data.chatroomId,
        messageType = data.messageType,
        templateData = data.templateData,
        _b = data.summary,
        summary = _b === void 0 ? '' : _b,
        sender = data.sender,
        _c = data.deliveryMethods,
        deliveryMethods = _c === void 0 ? [] : _c,
        _d = data.badges,
        badges = _d === void 0 ? [] : _d;
    var dto = {
        isAutomated: false,
        deliveryMethods: deliveryMethods,
        badges: badges,
        isEphemeral: false,
        isSilent: false,
        sequence: 0,
        id: uuidV4(),
        chatroomId: chatroomId,
        summary: summary,
        createdAt: new Date().getTime(),
        messageType: messageType,
        messageTypeVersion: 1,
        sender: sender || (userId ? {
            type: userType,
            userId: userId
        } : undefined),
        pluginName: pluginName,
        templateData: templateData.toJSON ? templateData.toJSON() : templateData,
        data: [],
        visibleBy: 'EVERYONE',
    };
    return new Message(dto);
};
Message.buildMessage = function(_a) {
    var messageData = _a.messageData,
        chatroomId = _a.chatroomId,
        userId = _a.userId,
        summary = _a.summary,
        _b = _a.deliveryMethods,
        deliveryMethods = _b === void 0 ? [] : _b,
        _c = _a.badges,
        badges = _c === void 0 ? [] : _c,
        title = _a.title,
        originMethod = _a.originMethod;
    if (messageData.type === MessageTypes.Message) {
        return Message.fromData({
            data: messageData.data,
            userId: userId,
            chatroomId: chatroomId,
            summary: summary,
            deliveryMethods: deliveryMethods,
            badges: badges,
            title: title,
            originMethod: originMethod,
        });
    } else if (messageData.type === MessageTypes.Templates.Standard ||
        messageData.type === MessageTypes.Templates.Custom) {
        return Message.fromTemplate({
            templateData: messageData.templateData,
            userId: userId,
            chatroomId: chatroomId,
            messageType: messageData.type,
            summary: summary,
            deliveryMethods: deliveryMethods,
            badges: badges,
        });
    } else {
        throw Error("Unable to build message of type " + messageData.type);
    }
};
export default Message;