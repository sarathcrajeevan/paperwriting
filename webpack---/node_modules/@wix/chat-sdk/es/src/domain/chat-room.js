import {
    throwDeprecationError
} from '../utils/utils.index';
import Message from './message';
import _get from 'lodash/get';
import {
    STAR_LABEL_ID
} from '../constants/constants';
var Chatroom = /** @class */ (function() {
    function Chatroom(chatroomState, isOnline) {
        this._chatroom = chatroomState;
        this._lastMessage = (chatroomState === null || chatroomState === void 0 ? void 0 : chatroomState.lastMessage) ? new Message(chatroomState.lastMessage) : null;
        this._online = !!isOnline;
    }
    Object.defineProperty(Chatroom.prototype, "id", {
        get: function() {
            return this._chatroom.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "participantId", {
        get: function() {
            return this._chatroom.participantId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "name", {
        get: function() {
            var _a;
            return (_a = this._chatroom.displayData) === null || _a === void 0 ? void 0 : _a.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "fullName", {
        get: function() {
            var _a;
            return (_a = this._chatroom.displayData) === null || _a === void 0 ? void 0 : _a.fullName;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "initials", {
        get: function() {
            var _a;
            return (_a = this._chatroom.displayData) === null || _a === void 0 ? void 0 : _a.initials;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "timestamp", {
        get: function() {
            return (this._lastMessage && this._lastMessage.age) || undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "text", {
        get: function() {
            if (!this.lastMessage) {
                return '';
            }
            var lastMessageSummary = this.lastMessage.summary || '';
            var senderName = _get(this.lastMessage, 'senderDisplayData.name');
            var senderNameDisplay = senderName ? senderName + ": " : '';
            return this.isPrivate ? lastMessageSummary : "" + senderNameDisplay + lastMessageSummary;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "lastMessage", {
        get: function() {
            return this._lastMessage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "thumbnail", {
        get: function() {
            var _a, _b, _c;
            return (_c = (_b = (_a = this._chatroom) === null || _a === void 0 ? void 0 : _a.displayData) === null || _b === void 0 ? void 0 : _b.image) === null || _c === void 0 ? void 0 : _c.url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "count", {
        get: function() {
            return this._chatroom.unreadCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "online", {
        get: function() {
            return this._online;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "isPrivate", {
        get: function() {
            return this._chatroom.isPrivate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "otherParticipantId", {
        get: function() {
            var _a;
            return (_a = this._chatroom.displayData) === null || _a === void 0 ? void 0 : _a.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "clientReference", {
        get: function() {
            return this._chatroom.clientReference;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "clientReferenceType", {
        get: function() {
            return this._chatroom.clientReferenceType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "siteUserType", {
        get: function() {
            var _a;
            return (_a = this._chatroom.displayData) === null || _a === void 0 ? void 0 : _a.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "participantCount", {
        get: function() {
            return this._chatroom.participantCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "createdBy", {
        get: function() {
            return this._chatroom.createdBy;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "createdAt", {
        get: function() {
            return this._chatroom.createdAt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "error", {
        get: function() {
            return this._chatroom.error;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "messageDeliveryError", {
        get: function() {
            return this._chatroom.messageDeliveryError;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "archived", {
        get: function() {
            throwDeprecationError('archive property on chatroom is deprecated, use isArchived instead');
            return;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "isArchived", {
        get: function() {
            return this._chatroom.isArchived;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "isTemporary", {
        get: function() {
            return this._chatroom.isTemporary;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "offlineChannels", {
        get: function() {
            return _get(this._chatroom, 'offlineChannels.channels');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "offlineChannel", {
        get: function() {
            var offlineChannels = this._chatroom.offlineChannels;
            var isConnectedToOfflineChannel = offlineChannels && offlineChannels.channels.some(function(channel) {
                return !!channel.type;
            });
            return isConnectedToOfflineChannel ? offlineChannels.channels[0].type : '';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "siteName", {
        get: function() {
            return this._chatroom.businessContext && this._chatroom.businessContext.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "businessContext", {
        get: function() {
            return this._chatroom.businessContext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "labelIds", {
        get: function() {
            return this._chatroom.labelIds;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Chatroom.prototype, "isStarred", {
        get: function() {
            var _a;
            return (_a = this._chatroom.labelIds) === null || _a === void 0 ? void 0 : _a.includes(STAR_LABEL_ID);
        },
        enumerable: false,
        configurable: true
    });
    return Chatroom;
}());
export {
    Chatroom
};