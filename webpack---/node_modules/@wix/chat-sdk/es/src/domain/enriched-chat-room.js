import {
    __extends
} from "tslib";
import {
    Chatroom
} from './chat-room';
import {
    getChatRoom
} from '../state/stateReader';
import {
    createGetChatroomMessagesSelector
} from '../state/reducer/selector.messages';
import * as messageDraftInitialStateCache from '../state/helpers/message-draft.initial-state-cache';
export var buildEnrichedChatroomFromState = function(state, chatroomId) {
    var chatroomState = getChatRoom(state, chatroomId);
    var messages = createGetChatroomMessagesSelector(chatroomId)(state);
    var messageDraft = messageDraftInitialStateCache.get(state.messageDraft.byId, chatroomId);
    var cursor = chatroomState.cursor,
        _a = chatroomState.typingStatus,
        typingStatus = _a === void 0 ? [] : _a,
        _b = chatroomState.unreadCount,
        unreadCount = _b === void 0 ? 0 : _b,
        lastReadMessageSequence = chatroomState.lastReadMessageSequence;
    var status = state.chatrooms ? state.chatrooms.status : {
        isFetchingRoom: false
    };
    var enrichedChatroomData = {
        messages: messages,
        initialMessageDraft: messageDraft.value,
        status: status,
        cursor: cursor,
        typingStatus: typingStatus,
        unreadCount: unreadCount,
        lastReadMessageSequence: lastReadMessageSequence,
    };
    var chatroom = createEnrichedChatroom(chatroomState, enrichedChatroomData);
    return chatroom;
};
var createEnrichedChatroom = function(chatroomState, enrichedChatroomData) {
    var enrichedChatroom = new EnrichedChatRoom(chatroomState, enrichedChatroomData);
    var chatroom = {
        id: enrichedChatroom.id,
        name: enrichedChatroom.name,
        fullName: enrichedChatroom.fullName,
        thumbnail: enrichedChatroom.thumbnail,
        initials: enrichedChatroom.initials,
        isPrivate: enrichedChatroom.isPrivate,
        isArchived: enrichedChatroom.isArchived,
        otherParticipantId: enrichedChatroom.otherParticipantId,
        participantId: enrichedChatroom.participantId,
        participantCount: enrichedChatroom.participantCount,
        clientReferenceType: enrichedChatroom.clientReferenceType,
        createdBy: enrichedChatroom.createdBy,
        createdAt: enrichedChatroom.createdAt,
        messages: enrichedChatroom.messages,
        error: enrichedChatroom.error,
        cursor: enrichedChatroom.cursor,
        typingStatus: enrichedChatroom.typingStatus,
        unreadCount: enrichedChatroom.unreadCount,
        lastReadMessageSequence: enrichedChatroom.lastReadMessageSequence,
        status: enrichedChatroom.status,
        initialMessageDraft: enrichedChatroom.initialMessageDraft,
        offlineChannels: enrichedChatroom.offlineChannels,
        participants: chatroomState.participants || [],
        labelIds: chatroomState.labelIds || [],
        siteUserType: enrichedChatroom.siteUserType,
        isStarred: enrichedChatroom.isStarred,
    };
    return chatroom;
};
var EnrichedChatRoom = /** @class */ (function(_super) {
    __extends(EnrichedChatRoom, _super);

    function EnrichedChatRoom(chatroomState, enrichedChatroomData) {
        var _this = _super.call(this, chatroomState) || this;
        _this._messages = enrichedChatroomData.messages;
        _this._initialMessageDraft = enrichedChatroomData.initialMessageDraft;
        _this._status = enrichedChatroomData.status;
        _this._cursor = enrichedChatroomData.cursor;
        _this._typingStatus = enrichedChatroomData.typingStatus;
        _this._unreadCount = enrichedChatroomData.unreadCount;
        _this._lastReadMessageSequence = enrichedChatroomData.lastReadMessageSequence;
        _this._participants = chatroomState.participants || [];
        return _this;
    }
    Object.defineProperty(EnrichedChatRoom.prototype, "messages", {
        get: function() {
            return this._messages;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "initialMessageDraft", {
        get: function() {
            return this._initialMessageDraft;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "status", {
        get: function() {
            return this._status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "cursor", {
        get: function() {
            return this._cursor;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "typingStatus", {
        get: function() {
            return this._typingStatus;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "unreadCount", {
        get: function() {
            return this._unreadCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "lastReadMessageSequence", {
        get: function() {
            return this._lastReadMessageSequence;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EnrichedChatRoom.prototype, "participants", {
        get: function() {
            return this._participants;
        },
        enumerable: false,
        configurable: true
    });
    return EnrichedChatRoom;
}(Chatroom));
export {
    EnrichedChatRoom
};