import {
    __assign,
    __spreadArrays
} from "tslib";
import {
    combineReducers
} from 'redux';
import types from '../state/types';
import _remove from 'lodash/remove';
import _omitBy from 'lodash/omitBy';
import {
    success
} from '../utils/promise-middleware-utils';
import {
    ApiPresenceStatus
} from './types';
var STALE_EVENTS_THRESHOLD_MS = 30 * 1000;
var EMPTY_PRESENCE = {};
var calculateOnlineSessions = function(previousOnlineSessions, sessionId, status) {
    if (status === ApiPresenceStatus.ONLINE) {
        return previousOnlineSessions.indexOf(sessionId) < 0 ?
            __spreadArrays(previousOnlineSessions, [sessionId]) : previousOnlineSessions;
    } else {
        return _remove(previousOnlineSessions, function(_sessionId) {
            return _sessionId !== sessionId;
        });
    }
};
export function participantsById(state, action) {
    if (state === void 0) {
        state = EMPTY_PRESENCE;
    }
    if (action.type === types.CLEAR_PRESENCE) {
        return EMPTY_PRESENCE;
    } else if (action.type === types.UPDATE_PRESENCE) {
        var data = action.meta.data;
        return updatePresence(data, state);
    } else if (action.type === types.PRESENCE_CLEAR_STALE) {
        var now_1 = new Date().getTime();
        return _omitBy(state, function(p) {
            return now_1 - p.clientSideReceivedAtTimestamp > STALE_EVENTS_THRESHOLD_MS;
        });
    } else if (action.type === success(types.FETCH_PRESENCE)) {
        var data = action.payload;
        var presence = toPresenceRealTimeEvent(data);
        if (presence) {
            return updatePresence(presence, state);
        }
    }
    return state;
}

function toPresenceRealTimeEvent(data) {
    if (!data.userPresence) {
        return;
    }
    return {
        userId: data.userPresence.userId,
        group: data.userPresence.group,
        sessionId: data.userPresence.sessionId,
        status: data.userPresence.status,
        data: data.userPresence.data,
        type: '',
        timestamp: new Date().getTime(),
    };
}

function updatePresence(data, state) {
    var _a;
    var previousOnlineSessions = state[data.userId] ? state[data.userId].onlineSessions : [];
    var onlineSessions = calculateOnlineSessions(previousOnlineSessions, data.sessionId, data.status);
    return __assign(__assign({}, state), (_a = {}, _a[data.userId] = {
        onlineSessions: onlineSessions,
        online: onlineSessions.length > 0,
        groupId: data.group,
        data: data.status === ApiPresenceStatus.OFFLINE && state[data.userId] ? state[data.userId].data : data.data,
        clientSideReceivedAtTimestamp: new Date().getTime(),
    }, _a));
}
export function didFetchPresence(state, action) {
    if (action.type === success(types.FETCH_PRESENCE)) {
        return true;
    }
    return !!state;
}
export var presenceReducer = combineReducers({
    participantsById: participantsById,
    didFetchPresence: didFetchPresence,
});