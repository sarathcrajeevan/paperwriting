import base64 from 'base-64';
var CurrentUser = /** @class */ (function() {
    function CurrentUser() {
        this._decodedToken = {};
    }
    CurrentUser.prototype.loadJwtChatToken = function(chatToken) {
        try {
            var encodedToken = chatToken.split('.')[1];
            this._decodedToken = JSON.parse(base64.decode(encodedToken) || '{}');
        } catch (e) {
            this._decodedToken = {};
        }
    };
    Object.defineProperty(CurrentUser.prototype, "token", {
        get: function() {
            return this._token;
        },
        set: function(token) {
            this._token = token;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "displayData", {
        get: function() {
            return this._displayData;
        },
        set: function(displayData) {
            this._displayData = displayData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "type", {
        get: function() {
            return this._decodedToken.type;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "participantIds", {
        get: function() {
            return this._decodedToken.participantIds;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "userId", {
        get: function() {
            return this._decodedToken.userId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "tokenExpirationTime", {
        get: function() {
            return this._decodedToken.exp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CurrentUser.prototype, "isExpiredToken", {
        get: function() {
            return (this.tokenExpirationTime || 0) * 1000 - new Date().getTime() < 1000;
        },
        enumerable: false,
        configurable: true
    });
    return CurrentUser;
}());
export default CurrentUser;