import {
    __assign
} from "tslib";
import {
    EVENTS
} from '../constants/bi-logger.config';
import * as chatEventEmitter from '../services/chat-event-emitter.service';
import appService from '../services/app-service';
import {
    UNREAD_CHATROOM_IDS_COUNT_LIMIT_PER_PARTICIPANT,
} from '../types/sdk-api.types';
var chatUrlV2Prefix = '_api/chat-web/v2/';
var ServerApi = /** @class */ (function() {
    function ServerApi(chatAgent) {
        this.chatAgent = chatAgent;
    }
    /**
     * Updates the headers that all the agent's http requests are sent with.
     *
     * This is useful in cases like authentication-related headers that expire and need refreshed.
     */
    ServerApi.prototype.updateHttpHeaders = function(headers) {
        this.chatAgent.updateHttpHeaders(headers);
    };
    ServerApi.prototype.http$fetchChatrooms = function(_a) {
        var nextPointer = _a.nextPointer,
            _b = _a.filter,
            filter = _b === void 0 ? {} : _b,
            _c = _a.pageSize,
            pageSize = _c === void 0 ? 100 : _c,
            unreadChatroomLimit = _a.unreadChatroomLimit;
        var query = {
            nextPointer: nextPointer,
            pageSize: pageSize,
            archived: filter.isArchived,
            onlyUnread: filter.isUnread,
            lastMessageLimit: ServerApi.LAST_MESSAGES_COUNT_LIMIT,
            unreadChatroomLimit: unreadChatroomLimit || ServerApi.DEFAULT_UNREAD_CHATROOM_IDS_COUNT_LIMIT,
        };
        var data = {
            participantIds: filter.participantIds || [],
            labelIds: filter.labelIds || [],
        };
        var urlSuffix = "chatrooms-for-list-view" + (filter.participantType ? "/" + filter.participantType : '');
        return this.chatAgent.post({
            urlSuffix: urlSuffix,
            data: data,
            query: query
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$search = function(_a) {
        var searchTerm = _a.searchTerm,
            participantIds = _a.participantIds,
            chatroomsPageSize = _a.chatroomsPageSize,
            chatroomsNextPointer = _a.chatroomsNextPointer,
            messagesPageSize = _a.messagesPageSize,
            messagesNextPointer = _a.messagesNextPointer;
        var data = {
            query: searchTerm,
            participantIds: participantIds,
            chatroomsPaginator: {
                pageSize: chatroomsPageSize,
                lastMessageLimit: ServerApi.LAST_MESSAGES_COUNT_LIMIT,
                nextPointer: chatroomsNextPointer,
            },
            messagesPaginator: {
                pageSize: messagesPageSize,
                nextPointer: messagesNextPointer,
            },
        };
        return this.chatAgent
            .post({
                urlPrefix: '_serverless/',
                urlSuffix: 'chat-search/search',
                data: data
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchRoomMessages = function(_a) {
        var chatroomId = _a.chatroomId,
            cursor = _a.cursor,
            _b = _a.pageSize,
            pageSize = _b === void 0 ? 50 : _b;
        return this.chatAgent
            .get({
                urlSuffix: "chatrooms/" + chatroomId + "/messages",
                query: {
                    pageSize: pageSize,
                    nextPointer: cursor
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$deleteMessage = function(_a) {
        var chatroomId = _a.chatroomId,
            messageSequenceToDelete = _a.messageSequenceToDelete;
        return this.chatAgent
            .zdelete({
                urlSuffix: "chatrooms/" + chatroomId + "/messages",
                data: {
                    messageSequenceToDelete: messageSequenceToDelete
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$resendMessage = function(_a) {
        var chatroomId = _a.chatroomId,
            messageSequenceToReSend = _a.messageSequenceToReSend;
        return this.chatAgent
            .post({
                urlSuffix: "chatrooms/" + chatroomId + "/messages/resend",
                data: {
                    messageSequenceToReSend: messageSequenceToReSend
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$deleteLabel = function(_a) {
        var chatroomId = _a.chatroomId,
            labelId = _a.labelId;
        return this.chatAgent
            .zdelete({
                urlSuffix: "chatrooms/label",
                data: {
                    chatroomId: chatroomId,
                    labelId: labelId
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$updateLabel = function(_a) {
        var chatroomId = _a.chatroomId,
            labelId = _a.labelId;
        return this.chatAgent
            .post({
                urlSuffix: "chatrooms/label",
                data: {
                    chatroomId: chatroomId,
                    labelId: labelId
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchMessagesErrorIndications = function(_a) {
        var chatroomId = _a.chatroomId,
            from = _a.from,
            to = _a.to;
        return this.chatAgent
            .get({
                urlSuffix: "indications/" + chatroomId + "/failed",
                query: {
                    from: from,
                    to: to
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchRoomMessagesPage = function(_a) {
        var chatroomId = _a.chatroomId,
            messageSequence = _a.messageSequence,
            _b = _a.pageSize,
            pageSize = _b === void 0 ? 30 : _b;
        return this.chatAgent
            .get({
                urlSuffix: "chatrooms/" + chatroomId + "/messages/page",
                query: {
                    pageSize: pageSize,
                    pointer: messageSequence
                }
            })
            .then(function(response) {
                return response.data.items;
            });
    };
    ServerApi.prototype.http$fetchRoom = function(_a) {
        var chatroomId = _a.chatroomId;
        return this.chatAgent.get({
            urlSuffix: "chatrooms/" + chatroomId
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$fetchEnrichedChatroom = function(_a) {
        var chatroomId = _a.chatroomId,
            _b = _a.force,
            force = _b === void 0 ? false : _b;
        return this.chatAgent
            .get({
                urlSuffix: "chatrooms/" + chatroomId + "/enriched",
                force: force
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchUnreadChatroomIds = function(_a) {
        var _b = _a === void 0 ? {} : _a,
            _c = _b.unreadChatroomLimit,
            unreadChatroomLimit = _c === void 0 ? ServerApi.DEFAULT_UNREAD_CHATROOM_IDS_COUNT_LIMIT : _c,
            filter = _b.filter;
        if (filter) {
            var participantIds = filter.participantIds;
            return this.chatAgent
                .post({
                    urlSuffix: 'unread-chatrooms',
                    data: {
                        participantIds: participantIds
                    },
                    query: {
                        unreadChatroomLimit: unreadChatroomLimit
                    }
                })
                .then(function(response) {
                    return response.data;
                });
        } else {
            return this.chatAgent
                .get({
                    urlSuffix: 'unread-chatrooms',
                    query: {
                        unreadChatroomLimit: unreadChatroomLimit
                    }
                })
                .then(function(response) {
                    return response.data;
                });
        }
    };
    ServerApi.prototype.http$fetchUnreadChatroomIdsMap = function(_a) {
        var _b = _a === void 0 ? {} : _a,
            _c = _b.unreadChatroomLimit,
            unreadChatroomLimit = _c === void 0 ? UNREAD_CHATROOM_IDS_COUNT_LIMIT_PER_PARTICIPANT : _c,
            filter = _b.filter;
        var participantIds = (filter || {}).participantIds;
        return this.chatAgent
            .post({
                urlSuffix: 'unread-chatrooms-per-participant',
                data: {
                    participantIds: participantIds
                },
                query: {
                    unreadChatroomLimit: unreadChatroomLimit
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$setMessagesRead = function(_a) {
        var chatroomId = _a.chatroomId,
            lastReadMessageSequence = _a.lastReadMessageSequence;
        chatEventEmitter.emit(chatEventEmitter.CHAT_EVENTS.MESSAGES_READ, chatroomId);
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/" + chatroomId + "/users",
                data: {
                    lastReadMessageSequence: lastReadMessageSequence
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$setMessagesUnread = function(_a) {
        var chatroomId = _a.chatroomId,
            lastReadMessageSequence = _a.lastReadMessageSequence;
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/" + chatroomId + "/unread",
                data: {
                    lastReadMessageSequence: lastReadMessageSequence
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$deleteChatroom = function(_a) {
        var chatroomId = _a.chatroomId;
        return this.chatAgent.zdelete({
            urlSuffix: "chatrooms/" + chatroomId
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$deleteChatrooms = function(chatroomIds) {
        return this.chatAgent.zdelete({
            urlSuffix: "chatrooms",
            data: {
                chatroomIds: chatroomIds
            }
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$archiveChatroom = function(_a) {
        var chatroomId = _a.chatroomId;
        return this.chatAgent.put({
            urlSuffix: "chatrooms/" + chatroomId + "/archive"
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$archiveChatrooms = function(chatroomIds) {
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/archive",
                data: {
                    chatroomIds: chatroomIds
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$unarchiveChatrooms = function(chatroomIds) {
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/unarchive",
                data: {
                    chatroomIds: chatroomIds
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$unarchiveChatroom = function(_a) {
        var chatroomId = _a.chatroomId;
        return this.chatAgent.put({
            urlSuffix: "chatrooms/" + chatroomId + "/unarchive"
        }).then(function(response) {
            return response.data;
        });
    };
    ServerApi.prototype.http$initRealtimeToken = function(chatToken) {
        return this.chatAgent
            .post({
                urlSuffix: "real-time-tokens",
                data: {
                    token: chatToken
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$sendMessage = function(chatroomId, message) {
        message.createdAt = message.createdAt || Date.now();
        var type = message.type,
            sender = message.sender,
            id = message.id;
        chatEventEmitter.emit(chatEventEmitter.CHAT_EVENTS.MESSAGE_SENT, message);
        chatEventEmitter.emit(chatEventEmitter.CHAT_EVENTS.BI, __assign(__assign({}, EVENTS.sendMessage), {
            messageId: id,
            chatRoomId: chatroomId,
            messageType: type,
            uuid: sender === null || sender === void 0 ? void 0 : sender.userId,
            mimeType: message.mimeTypes,
            hostName: appService.appName
        }));
        return this.chatAgent
            .post({
                urlSuffix: "chatrooms/" + chatroomId + "/messages",
                data: message.dto
            })
            .then(function(response) {
                return response.data;
            })
            .catch(function(error) {
                chatEventEmitter.emit(chatEventEmitter.CHAT_EVENTS.BI_ERROR, {
                    tag: 'send-message',
                    description: 'failed to send message',
                    errorName: error,
                });
                throw error;
            });
    };
    ServerApi.prototype.http$sendMessageV2 = function(message, options) {
        return this.chatAgent.post({
            urlPrefix: chatUrlV2Prefix,
            urlSuffix: "chatrooms/" + message.chatroomId + "/messages",
            data: {
                sendMessageBody: message.dto,
                sendMessageOptions: options.dto,
            },
        });
    };
    ServerApi.prototype.http$fetchCurrentUserDisplayData = function() {
        return this.chatAgent
            .get({
                urlSuffix: 'display-data/current-user'
            })
            .then(function(response) {
                return (response.data ? response.data.content : undefined);
            });
    };
    ServerApi.prototype.http$notifyTyping = function(chatroomId, eventType, expiryDuration) {
        return this.chatAgent
            .post({
                urlSuffix: "chatrooms/" + chatroomId + "/typing-events",
                data: {
                    type: eventType,
                    expiryDuration: expiryDuration
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$markRoomsAsRead = function(chatroomIds, lastMessageSequence) {
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/read",
                data: {
                    chatroomIds: chatroomIds,
                    lastMessageSequence: lastMessageSequence
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$markAllRoomsAsRead = function(filter) {
        var serverFilter = {
            participantId: filter.participantIds,
            participantType: filter.participantType,
        };
        return this.chatAgent
            .put({
                urlSuffix: "chatrooms/mark-all-read",
                query: serverFilter
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchParticipantsDisplayData = function(_a) {
        var chatroomId = _a.chatroomId,
            participantIds = _a.participantIds;
        return this.chatAgent
            .post({
                urlSuffix: "display-data/" + chatroomId,
                data: {
                    participantIds: participantIds
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchDrillInMessageIndications = function(chatroomId, sequence) {
        return this.chatAgent
            .get({
                urlSuffix: "indications/" + chatroomId + "/detailed",
                query: {
                    sequence: sequence
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$fetchUnseenChatroomCount = function(filter, limit) {
        if (limit === void 0) {
            limit = ServerApi.DEFAULT_UNREAD_CHATROOM_IDS_COUNT_LIMIT;
        }
        return this.chatAgent.get({
            urlSuffix: 'unseen-chatrooms',
            query: __assign(__assign({}, filter), {
                limit: limit
            })
        }).then(function(res) {
            return res.data;
        });
    };
    ServerApi.prototype.http$markChatroomsAsSeen = function(filter, lastSeenMessageSequence) {
        return this.chatAgent
            .put({
                urlSuffix: 'chatrooms/seen',
                data: {
                    lastSeenMessageSequence: lastSeenMessageSequence
                },
                query: filter
            })
            .then(function(res) {
                return res.data;
            });
    };
    ServerApi.prototype.http$watch = function(useNewConvention) {
        return this.chatAgent
            .put({
                urlSuffix: "chat-presence/watch/group",
                data: {
                    useNewConvention: useNewConvention
                }
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.prototype.http$setPresence = function(presence, token) {
        return this.chatAgent
            .post({
                urlPrefix: '_api/chat-presence-server/v1/',
                urlSuffix: 'presence/user-presence',
                data: {
                    userPresence: presence,
                    token: token,
                    context: {
                        operation: 'UPDATE',
                    },
                },
            })
            .then(function(response) {
                return response.data;
            });
    };
    ServerApi.LAST_MESSAGES_COUNT_LIMIT = 10;
    ServerApi.DEFAULT_UNREAD_CHATROOM_IDS_COUNT_LIMIT = 100;
    return ServerApi;
}());
export default ServerApi;