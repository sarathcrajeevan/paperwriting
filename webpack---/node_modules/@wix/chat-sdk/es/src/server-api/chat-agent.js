import {
    __assign,
    __awaiter,
    __extends,
    __generator
} from "tslib";
import {
    getHandshakeChatToken
} from '../services/handshake-token-service';
import qs from 'qs';
import HttpAgent from '../utils/http-agent';
import CurrentUser from './current-user';
var chatUrlPrefix = '_api/chat-web/v1/';
var chatUrlV2Prefix = '_api/chat-web/v2/';
var ChatAgent = /** @class */ (function(_super) {
    __extends(ChatAgent, _super);

    function ChatAgent(chatAgentParams) {
        var _this = this;
        var baseUrl = chatAgentParams.baseUrl,
            currentUser = chatAgentParams.currentUser,
            httpHeaders = chatAgentParams.httpHeaders,
            tokenServer = chatAgentParams.tokenServer,
            throttleThreshold = chatAgentParams.throttleThreshold;
        _this = _super.call(this, {
            baseUrl: baseUrl,
            throttleThreshold: throttleThreshold
        }) || this;
        _this.currentUser = currentUser;
        _this.headers = httpHeaders;
        _this.tokenServer = tokenServer;
        return _this;
    }
    /**
     * Updates the headers that all the agent's http requests are sent with.
     *
     * This is useful in cases like authentication-related headers that expire and need refreshed.
     */
    ChatAgent.prototype.updateHttpHeaders = function(headerUpdates) {
        this.headers = __assign(__assign({}, this.headers), headerUpdates);
    };
    ChatAgent.prototype._getRelativeUrl = function(urlSuffix, query) {
        var tokenParam = (urlSuffix === null || urlSuffix === void 0 ? void 0 : urlSuffix.startsWith(chatUrlV2Prefix)) ? {} : {
            chatToken: this.currentUser.token
        };
        var queryParams = Object.assign(tokenParam, query);
        var queryString = qs.stringify(queryParams, {
            indices: false
        });
        return "/" + urlSuffix + "?" + queryString;
    };
    ChatAgent.prototype._getHeaders = function(urlSuffix) {
        var tokenParam = (urlSuffix === null || urlSuffix === void 0 ? void 0 : urlSuffix.startsWith(chatUrlV2Prefix)) ? {
            chatToken: this.currentUser.token
        } : {};
        return Object.assign(tokenParam, this.headers);
    };
    ChatAgent.prototype._issueNewTokenIfNeeded = function() {
        return __awaiter(this, void 0, void 0, function() {
            var newToken;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.tokenServer && this.currentUser.isExpiredToken)) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , getHandshakeChatToken(this.tokenServer)];
                    case 1:
                        newToken = _a.sent();
                        this.currentUser = new CurrentUser();
                        this.currentUser.loadJwtChatToken(newToken);
                        this.currentUser.token = newToken;
                        _a.label = 2;
                    case 2:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    ChatAgent.prototype.post = function(_a) {
        var _b = _a.urlPrefix,
            urlPrefix = _b === void 0 ? chatUrlPrefix : _b,
            urlSuffix = _a.urlSuffix,
            data = _a.data,
            _c = _a.query,
            query = _c === void 0 ? {} : _c;
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_d) {
                switch (_d.label) {
                    case 0:
                        return [4 /*yield*/ , this._issueNewTokenIfNeeded()];
                    case 1:
                        _d.sent();
                        url = "" + urlPrefix + urlSuffix;
                        return [2 /*return*/ , _super.prototype.post.call(this, url, data, query)];
                }
            });
        });
    };
    ChatAgent.prototype.get = function(_a) {
        var _b = _a.urlPrefix,
            urlPrefix = _b === void 0 ? chatUrlPrefix : _b,
            urlSuffix = _a.urlSuffix,
            _c = _a.query,
            query = _c === void 0 ? {} : _c,
            _d = _a.force,
            force = _d === void 0 ? false : _d;
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_e) {
                switch (_e.label) {
                    case 0:
                        return [4 /*yield*/ , this._issueNewTokenIfNeeded()];
                    case 1:
                        _e.sent();
                        url = "" + urlPrefix + urlSuffix;
                        return [2 /*return*/ , _super.prototype.get.call(this, url, query, force)];
                }
            });
        });
    };
    ChatAgent.prototype.put = function(_a) {
        var _b = _a.urlPrefix,
            urlPrefix = _b === void 0 ? chatUrlPrefix : _b,
            urlSuffix = _a.urlSuffix,
            data = _a.data,
            _c = _a.query,
            query = _c === void 0 ? {} : _c;
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_d) {
                switch (_d.label) {
                    case 0:
                        return [4 /*yield*/ , this._issueNewTokenIfNeeded()];
                    case 1:
                        _d.sent();
                        url = "" + urlPrefix + urlSuffix;
                        return [2 /*return*/ , _super.prototype.put.call(this, url, data, query)];
                }
            });
        });
    };
    ChatAgent.prototype.zdelete = function(_a) {
        var _b = _a.urlPrefix,
            urlPrefix = _b === void 0 ? chatUrlPrefix : _b,
            urlSuffix = _a.urlSuffix,
            data = _a.data;
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        return [4 /*yield*/ , this._issueNewTokenIfNeeded()];
                    case 1:
                        _c.sent();
                        url = "" + urlPrefix + urlSuffix;
                        return [2 /*return*/ , _super.prototype.zdelete.call(this, url, data)];
                }
            });
        });
    };
    return ChatAgent;
}(HttpAgent));
export default ChatAgent;