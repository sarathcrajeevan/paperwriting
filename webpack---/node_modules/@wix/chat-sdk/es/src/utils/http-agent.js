import ChatSdkError from '../domain/chat-sdk-error';
import axios from 'axios';
var throttleAdapterEnhancer = require('axios-extensions').throttleAdapterEnhancer;
var axiosRetry = require('axios-retry');
var RETRY_DELAY = 500;
var HttpAgent = /** @class */ (function() {
    function HttpAgent(_a) {
        var _b = _a === void 0 ? {} : _a,
            _c = _b.baseUrl,
            baseUrl = _c === void 0 ? '/' : _c,
            _d = _b.retryOnAllErrors,
            retryOnAllErrors = _d === void 0 ? false : _d,
            _e = _b.throttleThreshold,
            throttleThreshold = _e === void 0 ? 0 : _e;
        if (global.__xSessionId) {
            axios.defaults.headers.common.xsessionid = global.__xSessionId;
        }
        this.baseUrl = baseUrl;
        var config = throttleThreshold ?
            {
                adapter: throttleAdapterEnhancer(axios.defaults.adapter, {
                    threshold: throttleThreshold
                }),
            } :
            {};
        this.axios = axios.create(config);
        var axiosRetryOptions = {
            retries: 2,
            retryDelay: function() {
                return RETRY_DELAY;
            },
        };
        axiosRetryOptions.retryCondition = function(error) {
            if (axiosRetry.isNetworkOrIdempotentRequestError(error) || error.code === 'ECONNABORTED') {
                return true;
            }
            return true;
        };
        if (retryOnAllErrors) {
            axiosRetryOptions.retryCondition = function() {
                return true;
            };
        }
        var isAbsoluteUrl = baseUrl && /^(http|https)/.test(baseUrl);
        if (isAbsoluteUrl) {
            axiosRetry(this.axios, axiosRetryOptions);
        }
    }
    HttpAgent.prototype.get = function(urlSuffix, query, force) {
        if (query === void 0) {
            query = {};
        }
        if (force === void 0) {
            force = false;
        }
        if (force) {
            // cache busting throttler, forcing request
            query.cache_buster = new Date().getTime().toString();
        }
        return this._request('get', urlSuffix, query);
    };
    HttpAgent.prototype.post = function(urlSuffix, data, query) {
        if (query === void 0) {
            query = {};
        }
        return this._request('post', urlSuffix, query, {
            data: data
        });
    };
    HttpAgent.prototype.zdelete = function(urlSuffix, data) {
        return this._request('delete', urlSuffix, {}, {
            data: data
        });
    };
    HttpAgent.prototype.put = function(urlSuffix, data, query) {
        if (data === void 0) {
            data = {};
        }
        if (query === void 0) {
            query = {};
        }
        return this._request('put', urlSuffix, query, {
            data: data
        });
    };
    HttpAgent.prototype._request = function(method, urlSuffix, query, options) {
        var _this = this;
        if (query === void 0) {
            query = {};
        }
        if (options === void 0) {
            options = {};
        }
        var config = this._getRequestConfig(method, urlSuffix, query, options);
        if (global.debug) {
            console.log(">>> " + method + "  " + config.url + " | " + JSON.stringify(options));
        }
        return this.axios
            .request(config)
            .then(function(response) {
                return _this._logResponse(response);
            })
            .catch(function(error) {
                throw new ChatSdkError(error, ChatSdkError.TYPES.HTTP_REQUEST);
            });
    };
    HttpAgent.prototype._getRequestConfig = function(method, urlSuffix, query, options) {
        var url = this._getRelativeUrl(urlSuffix, query, options);
        var baseURL = this.baseUrl;
        var headers = this._getHeaders(urlSuffix, query, options);
        return Object.assign({
            url: url,
            method: method,
            baseURL: baseURL,
        }, headers ? {
            headers: headers
        } : undefined, options);
    };
    HttpAgent.prototype._logResponse = function(response) {
        if (global.debug) {
            console.log("Response: " + response.url + " " + response.status);
        }
        return response;
    };
    return HttpAgent;
}());
export default HttpAgent;