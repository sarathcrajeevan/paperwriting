import {
    __assign,
    __awaiter,
    __extends,
    __generator
} from "tslib";
import {
    error,
    pending,
    success
} from './promise-middleware-utils';

function toStateObj(array, key, addProperties) {
    var state = {};
    array.forEach(function(obj) {
        if (obj) {
            state[obj[key]] = Object.assign({}, obj, addProperties);
        } else {
            console.warn('toStateObj: array contained an undefined', array);
        }
    });
    return state;
}

function addIdToAllObjectFields(obj) {
    var state = {};
    Object.keys(obj).forEach(function(key) {
        return (state[key] = Object.assign({
            id: key
        }, obj[key]));
    });
    return state;
}

function stateObjToArray(obj) {
    return Object.keys(obj).map(function(id) {
        return (__assign({
            id: id
        }, obj[id]));
    });
}
var throwDeprecationWarning = function(message) {
    console.warn("DEPRECATED (chat-sdk): " + message);
};
var throwDeprecationError = function(message) {
    var s = "DEPRECATED (chat-sdk): " + message;
    console.warn(s);
    throw new Error(s);
};
var PromiseTimeoutError = /** @class */ (function(_super) {
    __extends(PromiseTimeoutError, _super);

    function PromiseTimeoutError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PromiseTimeoutError;
}(Error));
var promiseTimeout = function(promise, timeout, name) {
    return __awaiter(void 0, void 0, void 0, function() {
        var timeoutId;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    timeoutId = null;
                    return [4 /*yield*/ , Promise.race([
                        promise,
                        new Promise(function(_, reject) {
                            timeoutId = setTimeout(function() {
                                reject(new PromiseTimeoutError("'" + name + "': timeout of " + timeout + " milliseconds exceeded"));
                            }, timeout);
                        }),
                    ])];
                case 1:
                    _a.sent();
                    if (timeoutId != null) {
                        clearTimeout(timeoutId);
                    }
                    return [2 /*return*/ , promise];
            }
        });
    });
};
var toArray = function(obj) {
    return Object.keys(obj).map(function(key) {
        return obj[key];
    });
};
export {
    success,
    error,
    pending,
    toStateObj,
    stateObjToArray,
    addIdToAllObjectFields,
    toArray,
    throwDeprecationWarning,
    throwDeprecationError,
    promiseTimeout,
    PromiseTimeoutError,
};