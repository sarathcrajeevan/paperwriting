import {
    __assign,
    __awaiter,
    __generator
} from "tslib";
import _throttle from 'lodash/throttle';
var defaultConfig = {
    serverApiThrottlingTimout: 2000,
    localStateThrottlingTimout: 1000,
};
var TextTypingService = /** @class */ (function() {
    function TextTypingService(store, chatroomsActions, serverApi, persistenceService, config) {
        var _this = this;
        if (config === void 0) {
            config = defaultConfig;
        }
        this.store = store;
        this.chatroomsActions = chatroomsActions;
        this.serverApi = serverApi;
        this.persistenceService = persistenceService;
        this.config = config;
        this.sendTypingEventToServerThrottled = _throttle(function(chatroomId) {
            return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    return [2 /*return*/ , this.serverApi.http$notifyTyping(chatroomId, 'start', 5000)];
                });
            });
        }, this.config.serverApiThrottlingTimout, {
            leading: true,
            trailing: false
        });
        this.sendTypingEventThrottled = _throttle(function(_a) {
            var chatroomId = _a.chatroomId,
                text = _a.text;
            return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_b) {
                    this.store.dispatch(this.chatroomsActions.typing(chatroomId, text));
                    this.persistMessageDraft({
                        chatroomId: chatroomId,
                        text: text
                    });
                    return [2 /*return*/ ];
                });
            });
        }, this.config.localStateThrottlingTimout, {
            leading: true,
            trailing: true
        });
    }
    TextTypingService.prototype.notifyTextChange = function(chatroomId, text, activeTyping) {
        if (activeTyping === void 0) {
            activeTyping = false;
        }
        if (text !== undefined) {
            this.sendTypingEventThrottled({
                chatroomId: chatroomId,
                text: text
            });
        }
        if (activeTyping) {
            this.sendTypingEventToServerThrottled(chatroomId);
        }
    };
    TextTypingService.prototype.notifyTyping = function(chatroomId, text) {
        this.notifyTextChange(chatroomId, text, true);
    };
    TextTypingService.prototype.persistMessageDraft = function(_a) {
        var chatroomId = _a.chatroomId,
            text = _a.text;
        if (this.canPersist()) {
            this.sendMessageDraftToPersistence({
                chatroomId: chatroomId,
                text: text
            });
        }
    };
    TextTypingService.prototype.canPersist = function() {
        var state = this.store.getState();
        return !state.messageDraft.isFetching;
    };
    TextTypingService.prototype.sendMessageDraftToPersistence = function(_a) {
        var _b;
        var chatroomId = _a.chatroomId,
            text = _a.text;
        var currentState = this.store.getState().messageDraft.byId;
        var dataWithUpsertedChatroomTypedText = __assign(__assign({}, currentState), (_b = {}, _b[chatroomId] = text, _b));
        this.persistenceService.saveMessageDrafts(dataWithUpsertedChatroomTypedText);
    };
    return TextTypingService;
}());
export default TextTypingService;