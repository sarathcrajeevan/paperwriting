import uuid from 'uuid/v4';
import _find from 'lodash/find';
import _isEqual from 'lodash/isEqual';
import _isEmpty from 'lodash/isEmpty';
var SubscriptionService = /** @class */ (function() {
    function SubscriptionService() {
        this.reset();
    }
    SubscriptionService.prototype.registerSubscription = function(identifier, refreshDataCallback, initialDataFetch) {
        var _this = this;
        if (_isEmpty(identifier)) {
            identifier = {
                isArchived: false
            };
        }
        var id = uuid();
        var existingCallbackWithTheSameIdentifier = _find(Object.values(this.refreshDataCallbacks), function(c) {
            return _isEqual(identifier, c.identifier);
        });
        if (existingCallbackWithTheSameIdentifier) {
            return function() {
                return existingCallbackWithTheSameIdentifier;
            };
        }
        if (initialDataFetch) {
            initialDataFetch();
        }
        this.refreshDataCallbacks[id] = {
            identifier: identifier,
            refreshDataCallback: refreshDataCallback
        };
        return function() {
            delete _this.refreshDataCallbacks[id];
        };
    };
    SubscriptionService.prototype.refreshSubscribedData = function() {
        var refreshDataCallbacksValues = Object.values(this.refreshDataCallbacks, function(c) {
            return c.identifier;
        });
        var promises = refreshDataCallbacksValues.map(function(_a) {
            var refreshDataCallback = _a.refreshDataCallback;
            return refreshDataCallback();
        });
        return Promise.all(promises);
    };
    SubscriptionService.prototype.reset = function() {
        this.refreshDataCallbacks = {};
    };
    return SubscriptionService;
}());
export default SubscriptionService;