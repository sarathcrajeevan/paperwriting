import {
    __awaiter,
    __generator
} from "tslib";
import HandshakeAgent from '../utils/handshake-agent';
import HandshakeServerApi from '../server-api/handshake-server-api';
import PersistenceService from './persistence.service';
import CurrentUser from '../server-api/current-user';
export function getHandshakeChatToken(tokenServer) {
    return __awaiter(this, void 0, void 0, function() {
        var url, authorization, handshakeAgent, handshakeServerApi, chatToken;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    url = tokenServer.url, authorization = tokenServer.authorization;
                    handshakeAgent = new HandshakeAgent({
                        baseUrl: url,
                        authorization: authorization
                    });
                    handshakeServerApi = HandshakeServerApi({
                        handshakeAgent: handshakeAgent
                    });
                    return [4 /*yield*/ , handshakeServerApi.http$getToken()];
                case 1:
                    chatToken = _a.sent();
                    return [2 /*return*/ , chatToken];
            }
        });
    });
}
export function getCachedChatToken(persistenceEngine) {
    return __awaiter(this, void 0, void 0, function() {
        var persistenceService, chatToken;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    if (!persistenceEngine) return [3 /*break*/ , 2];
                    persistenceService = new PersistenceService(persistenceEngine);
                    return [4 /*yield*/ , persistenceService.getChatToken()];
                case 1:
                    chatToken = _a.sent();
                    if (chatToken && !isExpiredToken(chatToken)) {
                        return [2 /*return*/ , chatToken];
                    }
                    _a.label = 2;
                case 2:
                    return [2 /*return*/ ];
            }
        });
    });
}
export function saveToken(chatToken, persistenceEngine) {
    return __awaiter(this, void 0, void 0, function() {
        var persistenceService;
        return __generator(this, function(_a) {
            switch (_a.label) {
                case 0:
                    if (!persistenceEngine) return [3 /*break*/ , 2];
                    persistenceService = new PersistenceService(persistenceEngine);
                    return [4 /*yield*/ , persistenceService.saveToken(chatToken)];
                case 1:
                    return [2 /*return*/ , _a.sent()];
                case 2:
                    return [2 /*return*/ ];
            }
        });
    });
}
export function isExpiredToken(chatToken) {
    var user = new CurrentUser();
    user.loadJwtChatToken(chatToken);
    return user.isExpiredToken;
}