import {
    __assign
} from "tslib";
import config from '../../constants/unread-chatroom-count-config';
import _isEmpty from 'lodash/isEmpty';
import _uniq from 'lodash/uniq';
var collectChatroomIds = function(participantIds, state) {
    return participantIds.reduce(function(acc, participantId) {
        var filtered = state === null || state === void 0 ? void 0 : state.unreadChatroomCount.byFilter[participantId];
        var chatrooms = (filtered ? filtered : {
            chatrooms: {}
        }).chatrooms;
        return {
            chatrooms: __assign(__assign({}, acc.chatrooms), chatrooms)
        };
    }, {
        chatrooms: {}
    });
};
export var getUnreadChatroomCountBreakdown = function(state) {
    var byFilter = state === null || state === void 0 ? void 0 : state.unreadChatroomCount.byFilter;
    return Object.keys(byFilter).reduce(function(acc, participantId) {
        acc[participantId] = {
            count: Object.keys(byFilter[participantId].chatrooms).length,
        };
        return acc;
    }, {});
};
var collectAllChatrooms = function(byFilter) {
    var allUnreadChatroomIds = Object.values(byFilter).reduce(function(acc, current) {
        var currentChatrooms = current.chatrooms;
        acc.push.apply(acc, Object.keys(currentChatrooms));
        return acc;
    }, []);
    return {
        count: Math.min(config.maxUnreadsCount, Object.keys(_uniq(allUnreadChatroomIds)).length),
        overflow: false,
    };
};
var EMPTY_STATE = {
    count: 0,
    overflow: false,
};
export var getUnreadChatroomCount = function(state, filter) {
    if (_isEmpty(state === null || state === void 0 ? void 0 : state.unreadChatroomCount.byFilter)) {
        return EMPTY_STATE;
    }
    if (!(filter === null || filter === void 0 ? void 0 : filter.participantIds)) {
        return collectAllChatrooms(state.unreadChatroomCount.byFilter);
    }
    var chatrooms = collectChatroomIds(filter === null || filter === void 0 ? void 0 : filter.participantIds, state).chatrooms;
    var count = Math.min(config.maxUnreadsCount, Object.keys(chatrooms).length);
    return {
        count: count,
        overflow: false,
    };
};