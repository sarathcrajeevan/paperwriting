function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

import React, {
    Component
} from 'react';
import {
    I18nextProvider
} from 'react-i18next';

var Provider = /*#__PURE__*/ function(_Component) {
    _inheritsLoose(Provider, _Component);

    function Provider(props) {
        var _this;

        _this = _Component.call(this, props) || this;
        var i18n = _this.props.i18n;
        var _i18n$options$react = i18n.options.react,
            useSuspense = _i18n$options$react.useSuspense,
            wait = _i18n$options$react.wait;
        _this.state = {
            isWaitingForPolyfills: wait && !useSuspense && i18n.options._polyfill.isLoading
        };
        return _this;
    }

    var _proto = Provider.prototype;

    _proto.componentDidMount = function componentDidMount() {
        var _this2 = this;

        var i18n = this.props.i18n;

        if (this.state.isWaitingForPolyfills) {
            i18n.options._polyfill.promise.then(function() {
                _this2.setState({
                    isWaitingForPolyfills: false
                });
            });
        }
    };

    _proto.render = function render() {
        var _this$props = this.props,
            children = _this$props.children,
            i18n = _this$props.i18n;
        var isWaitingForPolyfills = this.state.isWaitingForPolyfills;

        if (i18n.options._polyfill.isLoading && i18n.options.react.useSuspense) {
            throw i18n.options._polyfill.promise; // use react suspense to pause until polyfills loaded
        }

        if (isWaitingForPolyfills) {
            return null; // Prevent rendering until polyfills loaded
        }

        return /*#__PURE__*/ React.createElement(I18nextProvider, {
            i18n: i18n
        }, children);
    };

    return Provider;
}(Component);

export default Provider;