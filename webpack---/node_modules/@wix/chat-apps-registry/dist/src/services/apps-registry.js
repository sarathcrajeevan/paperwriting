Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _errors = require('../constants/errors');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var

    AppsRegistry = function() {
        function AppsRegistry() {
            _classCallCheck(this, AppsRegistry);
            this.
            _registry = new Map();
        }
        _createClass(AppsRegistry, [{
            key: 'registerApp',
            value: function registerApp(_ref)

            {
                var appName = _ref.appName,
                    component = _ref.component,
                    options = _ref.options;
                if (!appName) {
                    throw _errors.MISSING_APP_NAME;
                }
                if (!component) {
                    throw _errors.MISSING_COMPONENT;
                }
                if (this.isAppRegistered(appName)) {
                    throw _errors.APP_NAME_ALREADY_EXIST;
                }
                this._registry.set(
                    appName, {
                        component: component,
                        config: options
                    });

            }
        }, {
            key: 'removeApp',
            value: function removeApp(

                appName) {
                this._registry.delete(appName);
            }
        }, {
            key: 'isAppRegistered',
            value: function isAppRegistered(

                appName) {
                return this._registry.has(appName);
            }
        }, {
            key: 'getComponentByApp',
            value: function getComponentByApp(

                appName) {
                return this._registry.get(appName).component;
            }
        }, {
            key: 'getConfigByApp',
            value: function getConfigByApp(

                appName) {
                return this._registry.get(appName).config;
            }
        }]);
        return AppsRegistry;
    }();
exports.default =


    AppsRegistry;