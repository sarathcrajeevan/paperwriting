import {
    __assign,
    __awaiter,
    __generator
} from "tslib";
export var attachmentTypes = {
    IMAGE: 'image',
    PPT: 'ppt',
    UNKNOWN: 'unknown',
    XLS: 'xls',
    DOC: 'doc',
    PDF: 'pdf',
    CSV: 'csv',
    SVG: 'svg',
    ICO: 'ico',
};
export var mediaProviders = {
    WIX_MEDIA: 'WixMedia',
    WIX_MEDIA_PUBLIC: 'WixMediaPublic',
};
var microsoftSubtypes = [
    'vnd.ms-powerpoint',
    'vnd.openxmlformats-officedocument.presentationml',
    'vnd.ms-excel',
    'vnd.openxmlformats-officedocument.spreadsheetml',
    'vnd.ms-word',
    'vnd.openxmlformats-officedocument.wordprocessingml',
];
var stripMicrosoftSubtype = function(originalMime) {
    var _a = originalMime.split('/'),
        mimeType = _a[0],
        mimeSubtype = _a[1];
    var microsoftSubtypeRegex = new RegExp(microsoftSubtypes.map(function(subtype) {
        return subtype.replace('.', '\\.');
    }).join('|'));
    var res = microsoftSubtypeRegex.exec(mimeSubtype);
    return res ? mimeType + "/" + res : originalMime;
};
var stripImageSubtype = function(originalMime) {
    var _a = originalMime.split('/'),
        mimeType = _a[0],
        mimeSubtype = _a[1];
    var specialImageTypes = ['svg+xml', 'vnd.microsoft.icon', 'x-icon'];
    return specialImageTypes.indexOf(mimeSubtype) > -1 || mimeType !== 'image' ?
        originalMime :
        'image';
};
var stripSubtype = function(originalMime) {
    var stripedMicrosoftType = stripMicrosoftSubtype(originalMime);
    return stripImageSubtype(stripedMicrosoftType);
};
export var getAttachmentType = function(contentType) {
    switch (stripSubtype(contentType)) {
        case 'text/csv':
            return attachmentTypes.CSV;
        case 'image':
            return attachmentTypes.IMAGE;
        case 'image/svg+xml':
            return attachmentTypes.SVG;
        case 'image/vnd.microsoft.icon':
        case 'image/x-icon':
            return attachmentTypes.ICO;
        case 'application/msword':
        case 'application/vnd.ms-word':
        case 'application/vnd.openxmlformats-officedocument.wordprocessingml':
            return attachmentTypes.DOC;
        case 'application/excel':
        case 'application/vnd.ms-excel':
        case 'application/vnd.openxmlformats-officedocument.spreadsheetml':
            return attachmentTypes.XLS;
        case 'application/pdf':
            return attachmentTypes.PDF;
        case 'application/vnd.ms-powerpoint':
        case 'application/vnd.openxmlformats-officedocument.presentationml':
            return attachmentTypes.PPT;
        default:
            return attachmentTypes.UNKNOWN;
    }
};
var updateQueryStringParameter = function(uri, key, value) {
    key = encodeURIComponent(key);
    value = encodeURIComponent(value);
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", 'i');
    var separator = uri.indexOf('?') !== -1 ? '&' : '?';
    if (uri.match(re)) {
        return uri.replace(re, "$1" + key + "=" + value + "$2");
    }
    return "" + uri + separator + key + "=" + value;
};
export var getAttachmentDownloadUrl = function(_a) {
    var filename = _a.filename,
        url = _a.url;
    var cloudPlatformAttachmentParam = 'response-content-disposition';
    var cloudPlatformAttachmentParamValue = "attachment;filename=\"" + filename + "\"";
    return updateQueryStringParameter(url, cloudPlatformAttachmentParam, cloudPlatformAttachmentParamValue);
};
var getAttachmentDownloadUrlFromGoogle = function(_a) {
    var filename = _a.filename,
        url = _a.url;
    return {
        url: getAttachmentDownloadUrl({
            filename: filename,
            url: url
        })
    };
};
var getAttachmentDownloadUrlFromWixMediaPublic = function(_a) {
    var filename = _a.filename,
        url = _a.url;
    return {
        url: url + "?dn=" + encodeURIComponent(filename)
    };
};
var getAttachmentDownloadUrlFromWixMedia = function(_a) {
    var _b = _a.baseUrl,
        baseUrl = _b === void 0 ? '/' : _b,
        url = _a.url,
        width = _a.width,
        height = _a.height,
        instance = _a.instance;
    return __awaiter(void 0, void 0, void 0, function() {
        var fetchUrl, res, resJson, prefix;
        var _c;
        return __generator(this, function(_d) {
            switch (_d.label) {
                case 0:
                    fetchUrl = baseUrl + "_api/crm-inbox-server/attachment/" + url;
                    if (width && height) {
                        fetchUrl += "?height=" + height + "&width=" + width;
                    }
                    return [4 /*yield*/ , fetch(fetchUrl, {
                        method: 'GET',
                        headers: (_c = {},
                            _c["X-Wix-Inbox-Instance"] = instance,
                            _c),
                    })];
                case 1:
                    res = _d.sent();
                    if (!res.ok) {
                        throw new Error("Error " + res.status);
                    }
                    return [4 /*yield*/ , res.json()];
                case 2:
                    resJson = _d.sent();
                    prefix = 'https://files.wix.com';
                    return [2 /*return*/ , Object.keys(resJson).reduce(function(acc, key) {
                        var _a;
                        return (__assign(__assign({}, acc), (_a = {}, _a[key] = "" + prefix + resJson[key], _a)));
                    }, {})];
            }
        });
    });
};
export var getAttachmentUrl = function(_a) {
    var url = _a.url,
        mediaProvider = _a.mediaProvider,
        instance = _a.instance,
        baseUrl = _a.baseUrl,
        filename = _a.filename,
        width = _a.width,
        height = _a.height;
    return __awaiter(void 0, void 0, void 0, function() {
        var isFileId, isWixMediaUrl;
        return __generator(this, function(_b) {
            isFileId = !/^(http|https):\/\//.test(url);
            isWixMediaUrl = /wixstatic/.test(url);
            if (mediaProvider === mediaProviders.WIX_MEDIA && isFileId) {
                return [2 /*return*/ , getAttachmentDownloadUrlFromWixMedia({
                    baseUrl: baseUrl,
                    url: url,
                    width: width,
                    height: height,
                    instance: instance,
                })];
            }
            if ((!mediaProvider && isWixMediaUrl) ||
                mediaProvider === mediaProviders.WIX_MEDIA_PUBLIC) {
                return [2 /*return*/ , getAttachmentDownloadUrlFromWixMediaPublic({
                    filename: filename,
                    url: url
                })];
            }
            return [2 /*return*/ , getAttachmentDownloadUrlFromGoogle({
                filename: filename,
                url: url
            })];
        });
    });
};
export var attachments = {
    attachmentTypes: attachmentTypes,
    mediaProviders: mediaProviders,
    getAttachmentType: getAttachmentType,
    getAttachmentDownloadUrl: getAttachmentDownloadUrl,
    getAttachmentUrl: getAttachmentUrl,
};
//# sourceMappingURL=attachments.js.map