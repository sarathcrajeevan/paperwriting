"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var websocket_1 = __importDefault(require("../../transport/websocket"));
var xhr_1 = __importDefault(require("../../transport/xhr"));
var http_streaming_1 = __importDefault(require("../../transport/http-streaming"));
var transports_manager_1 = __importDefault(require("../../transport/transports-manager"));
var strategy_presets_1 = require("../../strategies/strategy-presets");

function transports(opts, useHttpStreaming) {
    if (useHttpStreaming === void 0) {
        useHttpStreaming = false;
    }
    var strategies = [];
    var ws = createWebSocket(opts);
    var httpStreaming = createHttpStreaming(opts);
    var httpLongPolling = createHttpLongPolling(opts);
    // tests purposes only
    var forcedTransport = process.env.DUPLEXER_FORCED_TRANSPORT;
    if (forcedTransport === 'websocket') {
        strategies = [strategy_presets_1.primaryPreset(ws)];
    } else if (forcedTransport === 'http') {
        strategies = [strategy_presets_1.primaryPreset(httpLongPolling)];
    } else if (forcedTransport === 'http_streaming') {
        strategies = [strategy_presets_1.primaryPreset(httpStreaming)];
    } else if (websocket_1.default.isSupported()) {
        var httpStrategies = useHttpStreaming ?
            [strategy_presets_1.secondaryPreset(httpStreaming), strategy_presets_1.tertiaryPreset(httpLongPolling)] :
            [strategy_presets_1.secondaryPreset(httpLongPolling)];
        strategies = __spreadArrays([strategy_presets_1.primaryPreset(ws)], httpStrategies);
    } else {
        strategies = useHttpStreaming ?
            [strategy_presets_1.primaryPreset(httpStreaming), strategy_presets_1.secondaryPreset(httpLongPolling)] :
            [strategy_presets_1.primaryPreset(httpLongPolling)];
    }
    return new transports_manager_1.default(strategies);
}
exports.default = transports;

function createWebSocket(opts) {
    var protocol = isSSL() ? 'wss://' : 'ws://';
    var url = "" + protocol + opts.baseUrl;
    return new websocket_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function createHttpStreaming(opts) {
    var url = httpUrl(opts.baseUrl);
    return new http_streaming_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function createHttpLongPolling(opts) {
    var url = httpUrl(opts.baseUrl);
    return new xhr_1.default(url, opts.instanceUpdater, opts.siteRevision);
}

function httpUrl(baseUrl) {
    var protocol = isSSL() ? 'https://' : 'http://';
    return "" + protocol + baseUrl;
}

function isSSL() {
    return typeof self !== 'undefined' && self.location.protocol !== 'http:';
}
//# sourceMappingURL=transports.js.map