"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/* eslint-disable no-shadow */
var event_emitter_1 = require("../utils/event-emitter");
var ready_state_1 = __importDefault(require("../ready-state"));
/**
 * Transport responsibilities:
 *
 * - Open/close connection
 * - Encode/decode packets and pass through
 * - Mark connection as open by waiting for connection_established packet, dealing with session id
 * - Todo: handling packets queue (move from virtual socket)
 *
 * Events:
 *
 * - "open" - on "connection_established" packet from connectioon.
 * - "close" - on close either from transport side or client one, error might be attached.
 * - "packet" - pass through packets coming from connection.
 */
var Transport = /** @class */ (function(_super) {
    __extends(Transport, _super);

    function Transport(opts) {
        var _this = _super.call(this) || this;
        _this.readyState = ready_state_1.default.CLOSED;
        _this.restoreState();
        _this.keepAlive = opts.keepAlive;
        return _this;
    }
    Object.defineProperty(Transport.prototype, "keepAliveEnabled", {
        get: function() {
            return this.keepAlive;
        },
        enumerable: true,
        configurable: true
    });
    Transport.prototype.send = function(packet, opts) {
        this.write(packet, opts);
    };
    Transport.prototype.updatePayload = function(params) {
        this.payload = params;
    };
    Transport.prototype.close = function(error) {
        var transportError = error ? this.transportError(error) : undefined;
        this.closeClient();
        this.onTransportClose(transportError);
    };
    Transport.prototype.transportError = function(error) {
        return __assign(__assign({}, error), {
            transport: this.name
        });
    };
    Transport.prototype.onData = function(packet) {
        var _this = this;
        if (!Array.isArray(packet)) {
            this.handlePacket(packet);
        } else {
            packet.forEach(function(packet) {
                return _this.handlePacket(packet);
            });
        }
    };
    /**
     * this function should be called by transport when it decides to close - for whatever
     * reason (usually unexpected on such as network error or invalid request). then it
     * propagaes to the client until it reaches virtual socket.
     */
    Transport.prototype.onTransportClose = function(error) {
        if (this.readyState !== ready_state_1.default.CLOSED) {
            this.restoreState();
            this.emit('close', error);
        } else {
            this.emit('connect_error', error);
        }
    };
    Transport.prototype.restoreState = function() {
        this.readyState = ready_state_1.default.CLOSED;
        this.sessionId = '';
    };
    Transport.prototype.handlePacket = function(packet) {
        switch (packet.type) {
            case 'connection_established':
                this.sessionId = packet.sessionId;
                this.readyState = ready_state_1.default.OPEN;
                this.emit('open', packet);
                break;
            default:
                this.emit('packet', packet);
        }
    };
    return Transport;
}(event_emitter_1.Emitter));
exports.default = Transport;
//# sourceMappingURL=transport.js.map