"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var event_emitter_1 = require("../utils/event-emitter");
var ready_state_1 = __importDefault(require("../ready-state"));
var on_1 = __importDefault(require("../utils/on"));
var deferred_1 = __importDefault(require("../utils/deferred"));
/**
 * TransportsManager responsibilities:
 *
 * - Initizlize "first to connect" (according given strategies)
 * - Close active connection or connection process
 *
 * Events:
 * - "close" - in case (1) connected trasnport closed or (2) connect canceled
 * - "connect_error" - passes through "close" events coming from trasnports during connection
 * phase, may occurs several times during the connect tries.
 * - "message" - pass through packets coming from open transport.
 */
var TransportsManager = /** @class */ (function(_super) {
    __extends(TransportsManager, _super);

    function TransportsManager(strategies) {
        var _this = _super.call(this) || this;
        _this.strategies = strategies;
        _this.disposables = [];
        _this.readyState = ready_state_1.default.CLOSED;
        return _this;
    }
    Object.defineProperty(TransportsManager.prototype, "transport", {
        get: function() {
            return this._transport;
        },
        enumerable: true,
        configurable: true
    });
    TransportsManager.prototype.connect = function() {
        return __awaiter(this, void 0, void 0, function() {
            var connectionEstablishedPacket, e_1;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (this.readyState !== ready_state_1.default.CLOSED) {
                            return [2 /*return*/ , connectCanceled()];
                        }
                        this.cancelToken = new deferred_1.default();
                        this.readyState = ready_state_1.default.OPENING;
                        this.listenAndEmitConnectErrorsInAllTransportsOnConnecting();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/ , this.connectToFirstToRespondStrategy()];
                    case 2:
                        connectionEstablishedPacket = _a.sent();
                        return [3 /*break*/ , 4];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/ , connectCanceled()];
                    case 4:
                        this.cancelToken = null;
                        this.removeListeners();
                        this.abortStrategiesWithNoOpenTransport();
                        this.listenEventsOfActiveTransport();
                        return [2 /*return*/ , connectSuccess(connectionEstablishedPacket)];
                }
            });
        });
    };
    TransportsManager.prototype.close = function() {
        if (this.isOpen()) {
            // transport emits 'close' event, so this.onClose() will be called later on
            this.transport.close();
        } else if (this.isOpening()) {
            this.cancelToken && this.cancelToken.reject();
            this.onClose();
            this.strategies.forEach(function(s) {
                return s.abort();
            });
        }
    };
    TransportsManager.prototype.isOpen = function() {
        return this.readyState === ready_state_1.default.OPEN;
    };
    TransportsManager.prototype.isClosed = function() {
        return this.readyState === ready_state_1.default.CLOSED;
    };
    TransportsManager.prototype.isOpening = function() {
        return this.readyState === ready_state_1.default.OPENING;
    };
    TransportsManager.prototype.connectToFirstToRespondStrategy = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, transport, connectionEstablishedPacket;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        return [4 /*yield*/ , Promise.race(__spreadArrays(this.strategies.map(function(s) {
                            return s.connect();
                        }), [
                            this.cancelToken.promise,
                        ]))];
                    case 1:
                        _a = _b.sent(), transport = _a.transport, connectionEstablishedPacket = _a.connectionEstablishedPacket;
                        this._transport = transport;
                        this.readyState = ready_state_1.default.OPEN;
                        return [2 /*return*/ , connectionEstablishedPacket];
                }
            });
        });
    };
    TransportsManager.prototype.onClose = function(error) {
        this.readyState = ready_state_1.default.CLOSED;
        this._transport = null;
        this.cancelToken = null;
        this.removeListeners();
        /**
         * the reason we always propagaes 'close' event is that some entities in the system
         * have to make a clean up or just react, for instance:
         *
         * - connection manager MAY reconnect.
         * - vritual socket must notify to its user (disconnected event).
         *
         * so it doesn't matter WHY close happened - everyone should always get notified.
         */
        this.emit('close', error);
    };
    TransportsManager.prototype.abortStrategiesWithNoOpenTransport = function() {
        this.strategies
            .filter(function(s) {
                return s.transport.readyState !== ready_state_1.default.OPEN;
            })
            .forEach(function(s) {
                return s.abort();
            });
    };
    TransportsManager.prototype.listenAndEmitConnectErrorsInAllTransportsOnConnecting = function() {
        var _this = this;
        this.disposables = this.strategies.map(function(s) {
            return on_1.default(s, 'connect_error', function(error) {
                if (error.recoverable) {
                    _this.emit('connect_error', error);
                } else {
                    _this.close();
                }
            });
        });
    };
    TransportsManager.prototype.listenEventsOfActiveTransport = function() {
        var _this = this;
        this.disposables = [
            /**
             * might be called either because transport got error or due to a side-effect
             * when someone calls TransportsManager.close().
             */
            on_1.default(this.transport, 'close', function(error) {
                _this.onClose(error);
            }),
            on_1.default(this.transport, 'packet', function(packet) {
                _this.onData(packet);
            }),
        ];
    };
    TransportsManager.prototype.removeListeners = function() {
        this.disposables.forEach(function(l) {
            return l.destroy();
        });
        this.disposables = [];
    };
    // todo: rewrite this method, it looks ugly
    TransportsManager.prototype.onData = function(packet) {
        switch (packet.type) {
            case 'message':
            case 'ack':
            case 'error':
            case 'UpdateRestoreStrategyOverrides':
                this.emit('message', packet);
                break;
            default:
                break;
        }
    };
    return TransportsManager;
}(event_emitter_1.Emitter));
exports.default = TransportsManager;

function connectSuccess(connectionEstablishedPacket) {
    return {
        success: true,
        connectionEstablishedPacket: connectionEstablishedPacket,
    };
}

function connectCanceled() {
    return {
        success: false,
    };
}
//# sourceMappingURL=transports-manager.js.map