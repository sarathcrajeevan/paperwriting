"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var transport_1 = __importDefault(require("./transport"));
var params_1 = require("./params");
var WS = /** @class */ (function(_super) {
    __extends(WS, _super);

    function WS(url, instanceUpdater, siteRevision) {
        if (instanceUpdater === void 0) {
            instanceUpdater = null;
        }
        var _this = _super.call(this, {
            keepAlive: true
        }) || this;
        _this.url = url;
        _this.instanceUpdater = instanceUpdater;
        _this.siteRevision = siteRevision;
        return _this;
    }
    WS.isSupported = function() {
        return typeof WebSocket !== 'undefined';
    };
    Object.defineProperty(WS.prototype, "name", {
        get: function() {
            return 'websocket';
        },
        enumerable: true,
        configurable: true
    });
    WS.prototype.open = function() {
        var params = params_1.createParams(this.instanceUpdater, this.siteRevision);
        var url = params_1.withParams(this.url, params);
        var opts = process.env.DUPLEXER_NODE_ENV === 'true' ?
            {
                headers: maybeHeaders(this.instanceUpdater)
            } :
            undefined;
        this.closeClient();
        this.ws = new WebSocket(url, opts);
        this.listen();
    };
    WS.prototype.closeClient = function() {
        if (this.ws) {
            this.cleanWebSocketHooks();
            /**
             * normal closure, the connection successfully completed whatever purpose
             * for which it was created.
             * more info here: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
             */
            this.ws.close(1000);
        }
    };
    WS.prototype.write = function(packet) {
        var normalized = JSON.stringify(packet);
        this.ws.send(normalized);
    };
    WS.prototype.listen = function() {
        var _this = this;
        this.ws.onclose = function(event) {
            /**
             * event is not clean when it's closed unexpectedly, usually during a network
             * error that the client experiences (but not only - it happens on service GA for
             * instace).
             *
             * error will be clean, but unrecoverable, when sockets service initiates it:
             *
             * - in case connection is idle (no subscribes).
             * - in case signed instance is invalid.
             *
             * note: when client decides to close the connection proactivly, this handler will
             * not be invoked, this.we.onclose becomes noop before we call this.ws.close.
             */
            var isRecoverable = !event.wasClean;
            var error = _this.transportError({
                status: event.code,
                message: event.reason,
                recoverable: isRecoverable,
            });
            _this.cleanWebSocketHooks();
            _this.onTransportClose(error);
        };
        this.ws.onmessage = function(ev) {
            var normalized = JSON.parse(ev.data);
            _this.onData(normalized);
        };
        this.ws.onerror = function() {};
    };
    WS.prototype.cleanWebSocketHooks = function() {
        if (this.ws) {
            this.ws.onmessage = function() {};
            this.ws.onclose = function() {};
        }
    };
    return WS;
}(transport_1.default));
exports.default = WS;

function maybeHeaders(instanceUpdater) {
    return ((instanceUpdater &&
        instanceUpdater.getHeaders &&
        instanceUpdater.getHeaders()) || {});
}
//# sourceMappingURL=websocket.js.map