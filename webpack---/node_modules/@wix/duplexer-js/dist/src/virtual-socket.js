"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var event_emitter_1 = require("./utils/event-emitter");
var wix_duplexer_protocol_1 = require("@wix/wix-duplexer-protocol");
var ready_state_1 = __importDefault(require("./ready-state"));
var channels_1 = __importDefault(require("./channels/channels"));
var on_1 = __importDefault(require("./utils/on"));
var constants_1 = require("./constants");
var VirtualSocket = /** @class */ (function(_super) {
    __extends(VirtualSocket, _super);

    function VirtualSocket(duplexer, _a) {
        var appDefId = _a.appDefId,
            apiKey = _a.apiKey;
        var _this = _super.call(this) || this;
        _this.duplexer = duplexer;
        _this.acks = {};
        _this.ids = 1;
        _this.connected = false;
        _this.sendBuffer = [];
        _this.socketListeners = [];
        _this.channels = new channels_1.default(_this);
        _this.appDefId = appDefId || apiKey;
        _this.restoreState();
        _this.listen();
        _this.open();
        return _this;
    }
    VirtualSocket.prototype.subscribe = function(channelName, opts) {
        if (opts === void 0) {
            opts = {};
        }
        var channel = this.channels.add(channelName, opts.resourceId, opts.info);
        channel.subscribe(opts);
        return channel;
    };
    VirtualSocket.prototype.subscribeToUserChannel = function() {
        return this.subscribe(constants_1.userChannel);
    };
    VirtualSocket.prototype.unsubscribe = function(channelName, resourceId) {
        var channel = this.channels.remove(channelName, resourceId);
        channel.unsubscribe();
    };
    VirtualSocket.prototype.unsubscribeFromUserChannel = function() {
        this.unsubscribe(constants_1.userChannel);
    };
    /* internal usages only */
    VirtualSocket.prototype.open = function() {
        var _this = this;
        var readyState = this.duplexer.connection.readyState;
        if (readyState === ready_state_1.default.CLOSED) {
            // this.onConnect will be called after connection established,
            this.duplexer.connection.connect();
        } else if (readyState === ready_state_1.default.OPEN) {
            setTimeout(function() {
                return _this.onConnect();
            }, 0);
        }
    };
    VirtualSocket.prototype.disconnect = function() {
        this.send({
            type: 'disconnect'
        });
        this.socketListeners.forEach(function(l) {
            return l.destroy();
        });
        this.socketListeners = [];
        this.onClose();
        this.duplexer.closeVirtualSocket(this);
    };
    /* internal usages only */
    VirtualSocket.prototype.send = function(message, opts) {
        var _this = this;
        return new Promise(function(resolve) {
            if (_this.connected) {
                var id = _this.issueAckId();
                _this.acks[id] = resolve;
                message.id = id;
                _this.packet(message, opts);
            } else {
                _this.sendBuffer.push({
                    message: message,
                    resolve: resolve
                });
            }
        });
    };
    /* internal usages only */
    VirtualSocket.prototype.whenConnected = function() {
        var _this = this;
        return new Promise(function(resolve) {
            _this.duplexer.connection.readyState === ready_state_1.default.OPEN ?
                resolve() :
                _this.once('@duplexer:connected', resolve);
        });
    };
    VirtualSocket.prototype.onClose = function(error) {
        this.restoreState();
        this.emit('@duplexer:disconnected', error);
    };
    VirtualSocket.prototype.listen = function() {
        this.socketListeners = [
            on_1.default(this.duplexer, 'open', this.onConnect.bind(this)),
            on_1.default(this.duplexer, 'packet', this.onPacket.bind(this)),
            on_1.default(this.duplexer, 'close', this.onClose.bind(this)),
            on_1.default(this.duplexer.connection, 'connect_error', this.onConnectError.bind(this)),
        ];
    };
    VirtualSocket.prototype.onConnectError = function(error) {
        this.emit('@duplexer:connect_error', error);
    };
    VirtualSocket.prototype.onPacket = function(packet) {
        if (packet.ns !== this.appDefId) {
            return;
        }
        switch (packet.type) {
            case 'ack':
            case 'error':
                this.onAck(packet);
                break;
            case 'message':
                this.onMessage(packet);
                break;
            default:
                break;
        }
    };
    VirtualSocket.prototype.onConnect = function() {
        this.channels.subscribeAll();
        this.connected = true;
        this.emit('@duplexer:connected');
        this.emitBuffered();
    };
    VirtualSocket.prototype.onMessage = function(message) {
        var channel = this.channels.find(message.channel, message.resourceId);
        if (channel !== undefined) {
            var restore = channel.setMessageIdRestore(message.id);
            var override = new wix_duplexer_protocol_1.PollOverrideRestoreStrategyBuilder()
                .withNs(this.appDefId)
                .withChannelName(channel.name)
                .withRestoreStrategy(restore)
                .build();
            this.duplexer.addRestoreOverride(override);
            try {
                channel.emit(message.event, message.payload, createAttachments(message));
            } catch (_a) {
                // not duplexer's responsibility to handle app-level errors
            }
        }
    };
    VirtualSocket.prototype.onAck = function(packet) {
        var ack = this.acks[packet.id];
        if (typeof ack === 'function') {
            ack(packet);
            // eslint-disable-next-line
            delete this.acks[packet.id];
        }
    };
    VirtualSocket.prototype.packet = function(packet, opts) {
        packet.ns = this.appDefId;
        this.duplexer.packet(packet, opts);
    };
    VirtualSocket.prototype.emitBuffered = function() {
        var _this = this;
        this.sendBuffer.forEach(function(msg) {
            var message = msg.message,
                resolve = msg.resolve;
            _this.send(message).then(resolve);
        });
        this.sendBuffer = [];
    };
    VirtualSocket.prototype.issueAckId = function() {
        var id = this.ids++;
        return id.toString();
    };
    VirtualSocket.prototype.restoreState = function() {
        this.connected = false;
        this.channels.setUnsubscribeAll();
        this.sendBuffer = [];
        this.acks = {};
    };
    return VirtualSocket;
}(event_emitter_1.Emitter));
exports.default = VirtualSocket;

function createAttachments(_a) {
    var user = _a.user,
        publisher = _a.publisher;
    return {
        user: user,
        publisher: publisher,
    };
}
//# sourceMappingURL=virtual-socket.js.map