"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/*
Base on: https://github.com/component/emitter/blob/master/index.js
*/
var Emitter = /** @class */ (function() {
    function Emitter() {}
    Emitter.prototype.on = function(event, fn) {
        return this._on(event, fn);
    };
    Emitter.prototype.addEventListener = function(event, fn) {
        return this._on(event, fn);
    };
    Emitter.prototype.once = function(event, fn) {
        function on() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this.off(event, on);
            fn.apply(this, args);
        }
        on.fn = fn;
        this.on(event, on);
        return this;
    };
    Emitter.prototype.off = function(event, fn) {
        return this._off(event, fn);
    };
    Emitter.prototype.removeEventListener = function(event, fn) {
        return this._off(event, fn);
    };
    Emitter.prototype.removeListener = function(event) {
        return this._off(event);
    };
    Emitter.prototype.removeAllListeners = function() {
        return this._off();
    };
    Emitter.prototype.emit = function(event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._callbacks = this._callbacks || {};
        var callbacks = this._callbacks['$' + event];
        if (callbacks) {
            callbacks = callbacks.slice(0);
            for (var i = 0, len = callbacks.length; i < len; ++i) {
                callbacks[i].apply(this, args);
            }
        }
        return this;
    };
    Emitter.prototype.listeners = function(event) {
        this._callbacks = this._callbacks || {};
        return this._callbacks['$' + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
        return !!this.listeners(event).length;
    };
    Emitter.prototype._on = function(event, fn) {
        this._callbacks = this._callbacks || {};
        (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
        return this;
    };
    Emitter.prototype._off = function(event, fn) {
        this._callbacks = this._callbacks || {};
        // all
        if (!event && !fn) {
            this._callbacks = {};
            return this;
        }
        // specific event
        var callbacks = this._callbacks['$' + event];
        if (!callbacks) {
            return this;
        }
        // remove all handlers
        if (!fn) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this._callbacks['$' + event];
            return this;
        }
        // remove specific handler
        var cb;
        for (var i = 0; i < callbacks.length; i++) {
            cb = callbacks[i];
            if (cb === fn || cb.fn === fn) {
                callbacks.splice(i, 1);
                break;
            }
        }
        // Remove event specific arrays for event types that no
        // one is subscribed for to avoid memory leak.
        if (callbacks.length === 0) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this._callbacks['$' + event];
        }
        return this;
    };
    return Emitter;
}());
exports.Emitter = Emitter;
//# sourceMappingURL=event-emitter.js.map