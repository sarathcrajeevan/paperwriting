"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var event_emitter_1 = require("./utils/event-emitter");
var on_1 = __importDefault(require("./utils/on"));
var keep_alive_1 = __importDefault(require("./keep-alive"));
var assert_1 = require("./utils/assert");
var is_transport_error_1 = __importDefault(require("./errors/is-transport-error"));
/**
 * ConnectionManager responsibilities:
 * - Auto reconnections on abrupt disconnections and environment state changes
 * - Keep alive (in relevant transports only)
 * - Network state changes (on online hints)
 * - Dealing with TransportsManager
 *
 * Events:
 * - "open" - on connection open, depends on result from TransportsManager#connect
 * - "close" - passed through from TransportsManager
 * - "connect_error" - passed through from TransportsManager
 * - "message" - passed through from TransportsManager
 */
var ConnectionManager = /** @class */ (function(_super) {
    __extends(ConnectionManager, _super);

    function ConnectionManager(opts) {
        var _this = _super.call(this) || this;
        _this.opts = opts;
        _this.environment = opts.environment;
        _this.timeline = opts.timeline;
        _this.autoConnectEnabled = opts.autoConnectEnabed;
        _this.listenNeworkStateChanges();
        _this.listenTransportEvents();
        return _this;
    }
    Object.defineProperty(ConnectionManager.prototype, "sessionId", {
        get: function() {
            return this.transport.sessionId;
        },
        enumerable: true,
        configurable: true
    });
    ConnectionManager.prototype.updatePayload = function(payload) {
        this.transport.updatePayload(payload);
    };
    ConnectionManager.prototype.send = function(packet, opts) {
        this.transport.send(packet, opts);
    };
    ConnectionManager.prototype.close = function() {
        this.autoConnect = false;
        this.environment.transportsManager.close();
        this.dispose();
    };
    Object.defineProperty(ConnectionManager.prototype, "readyState", {
        get: function() {
            return this.environment.transportsManager.readyState;
        },
        enumerable: true,
        configurable: true
    });
    ConnectionManager.prototype.connect = function() {
        return __awaiter(this, void 0, void 0, function() {
            var result;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        this.autoConnect = this.autoConnectEnabled;
                        return [4 /*yield*/ , this.environment.transportsManager.connect()];
                    case 1:
                        result = _a.sent();
                        if (result.success) {
                            this.keepAlive = new keep_alive_1.default(this.transport, this.opts);
                            this.transport.keepAliveEnabled && this.keepAlive.schedule();
                            this.timeline.log({
                                type: 'connect_succeeded',
                                data: {
                                    transport: this.transport.name,
                                },
                            });
                            this.emit('open', result.connectionEstablishedPacket);
                        }
                        return [2 /*return*/ ];
                }
            });
        });
    };
    ConnectionManager.prototype.isClosed = function() {
        return this.environment.transportsManager.isClosed();
    };
    ConnectionManager.prototype.isOpen = function() {
        return this.environment.transportsManager.isOpen();
    };
    Object.defineProperty(ConnectionManager.prototype, "transport", {
        get: function() {
            assert_1.defined(this.environment.transportsManager.transport, 'transport was not initialized yet');
            return this.environment.transportsManager.transport;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * we reconnect in the following scenarios only:
     *
     * - unexpected close, due to command that errored out or any other unexpected
     *   network error.
     * - keep alive failed to return a pong during the defined timeout/timeframe.
     * - sessions expired.
     *
     * note: invalid signed instance is currently an error we do not recover, it's a todo.
     * basically we can recover it, because instance updater provided by the user should
     * always return a valid signed instance, so we can retry multiple times.
     */
    ConnectionManager.prototype.shouldReconnect = function(error) {
        return this.autoConnect && (error === null || error === void 0 ? void 0 : error.recoverable);
    };
    ConnectionManager.prototype.listenNeworkStateChanges = function() {
        var _this = this;
        this.environment.network.on('online', function() {
            /**
             * the ONLY responsibility of "online" hook is to speed up reconnections
             * in case our backoff reached top intervals (10s between reconnections),
             * it should restart it. hence, we MUST NOT close connection in case it
             * is considered ESTABLISHED one (yes - although it MAY be an half-open one).
             * in case of half-open connection, it's keep alive responsibility to
             * disconnect us (and reconnect will happen automatically).
             */
            if (_this.autoConnect && !_this.isOpen()) {
                _this.timeline.log({
                    type: 'network_state_changed',
                    data: 'online',
                });
                // cleanup strategies and reconnect faster
                _this.close();
                _this.connect();
            }
        });
    };
    ConnectionManager.prototype.listenTransportEvents = function() {
        var _this = this;
        on_1.default(this.environment.transportsManager, 'connect_error', function(error) {
            _this.timeline.log({
                type: 'connect_error',
                data: error,
            });
            // eventually, it is propagaed to client as "@duplexer:connect_error" event,
            // by VirtualSocket, error is attached.
            _this.emit('connect_error', error);
        });
        on_1.default(this.environment.transportsManager, 'close', function(error) {
            _this.dispose();
            _this.maybeLogDisconnectionError(error);
            if (_this.shouldReconnect(error)) {
                _this.connect();
            }
            // eventually, it is propagaed to client as "@duplexer:disconnected" event,
            // by VirtualSocket, error is attached in case it exists.
            _this.emit('close', error);
        });
        on_1.default(this.environment.transportsManager, 'message', function(message) {
            _this.emit('message', message);
        });
    };
    ConnectionManager.prototype.dispose = function() {
        this.keepAlive && this.keepAlive.dispose();
    };
    ConnectionManager.prototype.maybeLogDisconnectionError = function(error) {
        if (is_transport_error_1.default(error)) {
            this.timeline.log({
                type: 'disconnect_error',
                data: error,
            });
        }
    };
    return ConnectionManager;
}(event_emitter_1.Emitter));
exports.default = ConnectionManager;
//# sourceMappingURL=connection-manager.js.map