"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var event_emitter_1 = require("./utils/event-emitter");
var wix_duplexer_protocol_1 = require("@wix/wix-duplexer-protocol");
var deferred_1 = __importDefault(require("./utils/deferred"));
var virtual_socket_1 = __importDefault(require("./virtual-socket"));
var environment_1 = __importDefault(require("./environments/web/environment"));
var connection_manager_1 = __importDefault(require("./connection-manager"));
var noop_timeline_1 = __importDefault(require("./timeline/noop-timeline"));
var Duplexer = /** @class */ (function(_super) {
    __extends(Duplexer, _super);

    function Duplexer(urlOrEnvironment, _a) {
        var _b = _a === void 0 ? {} : _a,
            _c = _b.pingInterval,
            pingInterval = _c === void 0 ? 30000 : _c,
            _d = _b.pingTimeout,
            pingTimeout = _d === void 0 ? 5000 : _d,
            _e = _b.timeline,
            timeline = _e === void 0 ? noop_timeline_1.default() : _e,
            _f = _b.autoConnect,
            autoConnect = _f === void 0 ? true : _f,
            instanceUpdater = _b.instanceUpdater,
            siteRevision = _b.siteRevision,
            _experimentalHttpStreaming = _b._experimentalHttpStreaming;
        var _this = _super.call(this) || this;
        _this.virtualSockets = [];
        _this.payloadBuilder = new wix_duplexer_protocol_1.PollPayloadBuilder();
        _this.connectionServerTimeDeferred = new deferred_1.default();
        _this.environment =
            typeof urlOrEnvironment === 'string' ?
            environment_1.default({
                url: urlOrEnvironment,
                instanceUpdater: instanceUpdater,
                siteRevision: siteRevision,
                useHttpStreaming: _experimentalHttpStreaming,
            }) :
            urlOrEnvironment;
        _this.connection = new connection_manager_1.default({
            pingTimeout: pingTimeout,
            pingInterval: pingInterval,
            environment: _this.environment,
            timeline: timeline,
            autoConnectEnabed: autoConnect,
        });
        _this.listen();
        return _this;
    }
    Duplexer.prototype.triggerInstanceChanged = function() {
        this.close();
        this.connection.connect();
    };
    Duplexer.prototype.connect = function(opts) {
        var vSocket = new virtual_socket_1.default(this, opts);
        this.virtualSockets.push(vSocket);
        return vSocket;
    };
    Duplexer.prototype.getConnectionServerTime = function() {
        return this.connectionServerTimeDeferred.promise;
    };
    Duplexer.prototype.close = function() {
        this.connection.close();
    };
    /* internal usages only */
    Duplexer.prototype.addRestoreOverride = function(override) {
        var payload = this.payloadBuilder
            .withOverrideRestoreStrategy(override)
            .build();
        this.connection.updatePayload(payload);
    };
    /* internal usages only */
    Duplexer.prototype.closeVirtualSocket = function(virtualSocket) {
        this.virtualSockets = this.virtualSockets.filter(function(vs) {
            return vs !== virtualSocket;
        });
        if (this.virtualSockets.length === 0) {
            this.close();
        }
    };
    /* internal usages only */
    Duplexer.prototype.packet = function(packet, opts) {
        this.connection.send(packet, opts);
    };
    Duplexer.prototype.listen = function() {
        var _this = this;
        this.connection.on('open', function(packet) {
            var timestampRestoreStrategy = wix_duplexer_protocol_1.RestoreStrategyBuilderFactory.timestamp()
                .withT(packet.t)
                .build();
            _this.payloadBuilder.withDefaultRestoreStrategy(timestampRestoreStrategy);
            _this.connection.updatePayload(_this.payloadBuilder.build());
            _this.emit('open');
            _this.connectionServerTimeDeferred.resolve(packet.t);
        });
        this.connection.on('message', function(message) {
            switch (message.type) {
                case 'UpdateRestoreStrategyOverrides':
                    _this.overwriteRestoreOverrides(message
                        .overrides);
                    break;
                default:
                    _this.emit('packet', message);
            }
        });
        this.connection.on('close', this.onClose.bind(this));
    };
    Duplexer.prototype.onClose = function(error) {
        this.emit('close', error);
        this.connectionServerTimeDeferred = new deferred_1.default();
    };
    Duplexer.prototype.overwriteRestoreOverrides = function(overrides) {
        var _this = this;
        this.payloadBuilder = new wix_duplexer_protocol_1.PollPayloadBuilder();
        overrides.forEach(function(override) {
            return _this.payloadBuilder.withOverrideRestoreStrategy(override);
        });
        var payload = this.payloadBuilder.build();
        this.connection.updatePayload(payload);
    };
    return Duplexer;
}(event_emitter_1.Emitter));
exports.Duplexer = Duplexer;
//# sourceMappingURL=duplexer.js.map