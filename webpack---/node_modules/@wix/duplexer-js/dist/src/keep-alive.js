"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (b.hasOwnProperty(p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var event_emitter_1 = require("./utils/event-emitter");
var timer_1 = __importDefault(require("./utils/timer"));
var on_1 = __importDefault(require("./utils/on"));
var KeepAlive = /** @class */ (function(_super) {
    __extends(KeepAlive, _super);

    function KeepAlive(transport, opts) {
        var _this = _super.call(this) || this;
        _this.transport = transport;
        _this.opts = opts;
        _this.started = false;
        on_1.default(_this.transport, 'packet', function() {
            return _this.started && _this.schedule();
        });
        return _this;
    }
    KeepAlive.prototype.schedule = function() {
        var _this = this;
        this.dispose();
        this.started = true;
        this.intervalTimer = new timer_1.default(this.opts.pingInterval, function() {
            return _this.sendHeartbeat();
        });
        this.intervalTimer.schedule();
    };
    KeepAlive.prototype.dispose = function() {
        this.started = false;
        this.intervalTimer && this.intervalTimer.cancel();
        this.timeoutTimer && this.timeoutTimer.cancel();
    };
    KeepAlive.prototype.sendHeartbeat = function() {
        var _this = this;
        this.ping();
        this.timeoutTimer = new timer_1.default(this.opts.pingTimeout, function() {
            _this.transport.close({
                status: 0,
                message: 'keep alive has not recieved pong in defined timeframe',
                recoverable: true,
            });
        });
        this.timeoutTimer.schedule();
    };
    KeepAlive.prototype.ping = function() {
        this.transport.send({
            type: 'ping'
        }, {
            affectState: false
        });
    };
    return KeepAlive;
}(event_emitter_1.Emitter));
exports.default = KeepAlive;
//# sourceMappingURL=keep-alive.js.map