import {
    assert
} from './errors';
export var IS_IDLE_SAMPLE_TIME = 1000 * 30; // 30 seconds
var ONE_MINUTE = 1000 * 60;
var IsIdle = /** @class */ (function() {
    function IsIdle(opts) {
        var _this = this;
        this.opts = opts;
        this.state = {
            active: false,
            running: false,
        };
        this.onIdle = function() {
            _this.state.active = false;
            _this.opts.onIdle();
        };
        this.onAliveness = function() {
            if (!_this.state.active) {
                _this.opts.onActive();
            }
            _this.state.active = true;
            _this.removeEventListeners();
            _this.clearTimeouts();
            _this.scheduleSample();
        };
        assert(typeof opts.isIdleTime === 'number' && opts.isIdleTime >= ONE_MINUTE, 'isIdleTime must be a number, bigger than 1 min');
        assert(typeof opts.onIdle === 'function', 'onIdle must be a function');
        assert(typeof opts.onActive === 'function', 'onActive must be a function');
    }
    IsIdle.prototype.listen = function() {
        if (this.state.running) {
            return;
        }
        this.state.running = true;
        this.state.active = true;
        this.scheduleSample();
    };
    IsIdle.prototype.stop = function() {
        this.state.running = false;
        this.clearTimeouts();
        this.removeEventListeners();
    };
    IsIdle.prototype.scheduleSample = function() {
        var _this = this;
        this.sampleTimeout = setTimeout(function() {
            _this.sample();
        }, IS_IDLE_SAMPLE_TIME);
    };
    IsIdle.prototype.sample = function() {
        this.addEventListeners();
        this.idleTimeout = setTimeout(this.onIdle, this.opts.isIdleTime);
    };
    IsIdle.prototype.addEventListeners = function() {
        document.addEventListener('mousemove', this.onAliveness);
        document.addEventListener('keydown', this.onAliveness);
    };
    IsIdle.prototype.removeEventListeners = function() {
        document.removeEventListener('mousemove', this.onAliveness);
        document.removeEventListener('keydown', this.onAliveness);
    };
    IsIdle.prototype.clearTimeouts = function() {
        clearTimeout(this.idleTimeout);
        clearTimeout(this.sampleTimeout);
    };
    return IsIdle;
}());
export {
    IsIdle
};
export function isIdle(opts) {
    return new IsIdle(opts);
}
//# sourceMappingURL=is-idle.js.map