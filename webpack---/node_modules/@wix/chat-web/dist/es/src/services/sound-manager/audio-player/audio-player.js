import {
    __awaiter,
    __generator
} from "tslib";
var AudioPlayer = /** @class */ (function() {
    function AudioPlayer() {
        this.files = {};
        this.library = {};
    }
    AudioPlayer.prototype.add = function(audioName, urlGetter) {
        this.files[audioName] = urlGetter;
    };
    AudioPlayer.prototype.get = function(audioName) {
        return this.library[audioName];
    };
    AudioPlayer.prototype.play = function(audioName) {
        if (!this.files[audioName]) {
            throw new Error('please call add() before trying to play an audio');
        }
        if (!this.library[audioName]) {
            this.loadAudio(audioName, this.files[audioName]).catch(function(e) {
                return console.log(e);
            });
        }
        void this.get(audioName)
            .then(function(audio) {
                return audio.play();
            })
            .catch(function() {});
    };
    AudioPlayer.prototype.loadAudio = function(audioName, urlGetter) {
        var _this = this;
        return (this.library[audioName] = new Promise(function(resolve, reject) {
            return __awaiter(_this, void 0, void 0, function() {
                var audioObj, _a;
                var _this = this;
                return __generator(this, function(_b) {
                    switch (_b.label) {
                        case 0:
                            _a = Audio.bind;
                            return [4 /*yield*/ , urlGetter()];
                        case 1:
                            audioObj = new(_a.apply(Audio, [void 0, _b.sent()]))();
                            audioObj.addEventListener('loadeddata', function() {
                                resolve(audioObj);
                            });
                            audioObj.addEventListener('error', function(e) {
                                // tslint:disable-next-line:no-dynamic-delete
                                delete _this.library[audioName];
                                reject(e);
                            });
                            return [2 /*return*/ ];
                    }
                });
            });
        }));
    };
    return AudioPlayer;
}());
export var audioPlayer = new AudioPlayer();
//# sourceMappingURL=audio-player.js.map