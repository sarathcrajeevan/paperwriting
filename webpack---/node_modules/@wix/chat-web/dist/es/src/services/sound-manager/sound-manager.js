import {
    chatEventEmitter
} from '@wix/chat-sdk';
import {
    audioPlayer
} from './audio-player/audio-player';
import _merge from 'lodash/merge';
export var DEFAULT_SOUNDS_ASSETS = {
    send: function() {
        return import ('../../assets/audio/wm_message_sent_3.mp3').then(function(f) {
            return f.default;
        });
    },
    receive: function() {
        return import ('../../assets/audio/wm_message_recieve_1.mp3').then(function(f) {
            return f.default;
        });
    },
    push: function() {
        return import ('../../assets/audio/wm_message_push_6.mp3').then(function(f) {
            return f.default;
        });
    },
};
export var SOUND_TYPES;
(function(SOUND_TYPES) {
    SOUND_TYPES["MESSAGE_SENT"] = "message-sent";
    SOUND_TYPES["MESSAGE_RECEIVED"] = "message-received";
    SOUND_TYPES["MESSAGE_RECEIVED_INACTIVE"] = "message-received-inactive";
})(SOUND_TYPES || (SOUND_TYPES = {}));
var SoundManager = /** @class */ (function() {
    function SoundManager(_a) {
        var _b;
        var _this = this;
        var _c = _a === void 0 ? {} : _a,
            configuration = _c.configuration,
            isChatActivePredicate = _c.isChatActivePredicate;
        this._isChatActivePredicate = function() {
            return true;
        };
        this._configuration = (_b = {},
            _b[SOUND_TYPES.MESSAGE_SENT] = {
                mute: false,
                sound: DEFAULT_SOUNDS_ASSETS.send,
            },
            _b[SOUND_TYPES.MESSAGE_RECEIVED] = {
                mute: false,
                sound: DEFAULT_SOUNDS_ASSETS.receive,
            },
            _b[SOUND_TYPES.MESSAGE_RECEIVED_INACTIVE] = {
                mute: false,
                sound: DEFAULT_SOUNDS_ASSETS.push,
            },
            _b);
        this.setConfiguration = function(_a) {
            var configuration = _a.configuration;
            _this._configuration = configuration;
            audioPlayer.add(SOUND_TYPES.MESSAGE_SENT, configuration[SOUND_TYPES.MESSAGE_SENT].sound);
            audioPlayer.add(SOUND_TYPES.MESSAGE_RECEIVED, configuration[SOUND_TYPES.MESSAGE_RECEIVED].sound);
            audioPlayer.add(SOUND_TYPES.MESSAGE_RECEIVED_INACTIVE, configuration[SOUND_TYPES.MESSAGE_RECEIVED_INACTIVE].sound);
        };
        this.removeSoundListeners = function() {
            chatEventEmitter.removeListener(chatEventEmitter.CHAT_EVENTS.NEW_REALTIME_MESSAGE, _this.handleMessageReceivedSound);
            chatEventEmitter.removeListener(chatEventEmitter.CHAT_EVENTS.MESSAGE_SENT, _this.handleMessageSentSound);
        };
        this.addSoundListeners = function() {
            chatEventEmitter.addListener(chatEventEmitter.CHAT_EVENTS.NEW_REALTIME_MESSAGE, _this.handleMessageReceivedSound);
            chatEventEmitter.addListener(chatEventEmitter.CHAT_EVENTS.MESSAGE_SENT, _this.handleMessageSentSound);
        };
        this.handleMessageSentSound = function() {
            var isMute = _this._configuration[SOUND_TYPES.MESSAGE_SENT].mute;
            if (!isMute) {
                audioPlayer.play(SOUND_TYPES.MESSAGE_SENT);
            }
        };
        this.handleMessageReceivedSound = function(receivedMessage) {
            if (receivedMessage.isSilent) {
                return;
            }
            var isActiveSound = _this._isChatActivePredicate();
            var isMute = isActiveSound ?
                _this._configuration[SOUND_TYPES.MESSAGE_RECEIVED].mute :
                _this._configuration[SOUND_TYPES.MESSAGE_RECEIVED_INACTIVE].mute;
            if (!isMute) {
                audioPlayer.play(isActiveSound ?
                    SOUND_TYPES.MESSAGE_RECEIVED :
                    SOUND_TYPES.MESSAGE_RECEIVED_INACTIVE);
            }
        };
        this.setConfiguration({
            configuration: _merge(this._configuration, configuration),
        });
        this._isChatActivePredicate =
            isChatActivePredicate || this._isChatActivePredicate;
        this.addSoundListeners();
    }
    return SoundManager;
}());
export default SoundManager;
//# sourceMappingURL=sound-manager.js.map