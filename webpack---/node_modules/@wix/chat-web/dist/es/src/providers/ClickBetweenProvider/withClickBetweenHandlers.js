import {
    __assign,
    __extends
} from "tslib";
import PropTypes from 'prop-types';
import React from 'react';
export var withClickOutsideHandler = function(Component) {
    var _a;
    return _a = /** @class */ (function(_super) {
            __extends(class_1, _super);

            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.wrappedComponentOnClick = function(e) {
                    e.stopPropagation();
                };
                _this.setClickBetweenHandler = function(handler) {
                    var registerHandler = _this.context.registerHandler;
                    return registerHandler === null || registerHandler === void 0 ? void 0 : registerHandler(handler);
                };
                return _this;
            }
            class_1.prototype.componentWillUnmount = function() {
                var unregisterHandler = this.context.unregisterHandler;
                unregisterHandler && unregisterHandler();
            };
            class_1.prototype.render = function() {
                // `as P` can be removed once the following issue closes
                // https://github.com/Microsoft/TypeScript/issues/28884
                var injectedProps = __assign(__assign({}, this.props), {
                    setClickBetweenHandler: this.setClickBetweenHandler,
                    preventClickBetween: this.wrappedComponentOnClick
                });
                return React.createElement(Component, __assign({}, injectedProps));
            };
            return class_1;
        }(React.Component)),
        _a.contextTypes = {
            registerHandler: PropTypes.func,
            unregisterHandler: PropTypes.func,
        },
        _a;
};
//# sourceMappingURL=withClickBetweenHandlers.js.map