import {
    __assign,
    __extends
} from "tslib";
import React, {
    Component
} from 'react';
import SoundManager from '../../services/sound-manager/sound-manager';
import _omit from 'lodash/omit';
export default (function(_a) {
    var isChatActivePredicate = (_a === void 0 ? {} : _a).isChatActivePredicate;
    return function(CompToWrap) {
        return /** @class */ (function(_super) {
            __extends(class_1, _super);

            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.wrappedComponentInstance = null;
                _this._isChatActivePredicate = isChatActivePredicate &&
                    (function() {
                        return isChatActivePredicate(_this.wrappedComponentInstance);
                    });
                _this.configureSoundManager = function() {
                    var soundConfiguration = _this.props.soundConfiguration;
                    if (_this._soundManager) {
                        _this._soundManager.removeSoundListeners();
                    }
                    _this._soundManager = new SoundManager({
                        configuration: soundConfiguration,
                        isChatActivePredicate: _this._isChatActivePredicate,
                    });
                };
                _this.propsWithoutSoundConfiguration = function() {
                    return _omit(_this.props, 'soundConfiguration');
                };
                return _this;
            }
            class_1.prototype.componentDidMount = function() {
                this.configureSoundManager();
            };
            class_1.prototype.componentDidUpdate = function(prevProps) {
                if (prevProps.soundConfiguration !== this.props.soundConfiguration) {
                    this.configureSoundManager();
                }
            };
            class_1.prototype.componentWillUnmount = function() {
                this._soundManager.removeSoundListeners();
            };
            class_1.prototype.render = function() {
                var _this = this;
                return (React.createElement(CompToWrap, __assign({
                    ref: function(wrappedComponentInstance) {
                        return (_this.wrappedComponentInstance = wrappedComponentInstance);
                    }
                }, this.propsWithoutSoundConfiguration())));
            };
            return class_1;
        }(Component));
    };
});
//# sourceMappingURL=withSounds.js.map