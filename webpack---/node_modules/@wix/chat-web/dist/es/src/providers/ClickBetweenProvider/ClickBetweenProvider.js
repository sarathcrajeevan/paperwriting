import {
    __extends
} from "tslib";
import React, {
    Children
} from 'react';
import PropTypes from 'prop-types';
var ClickBetweenProvider = /** @class */ (function(_super) {
    __extends(ClickBetweenProvider, _super);

    function ClickBetweenProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.registerHandler = function(clickBetweenHandler) {
            _this.setState({
                clickBetweenHandler: clickBetweenHandler
            });
        };
        _this.unregisterHandler = function() {
            _this.setState({
                clickBetweenHandler: undefined
            });
        };
        _this.clickHandler = function(e) {
            var clickBetweenHandler = _this.state.clickBetweenHandler;
            if (_this.props.children) {
                var originalClickHandler = Children.only(_this.props.children).props.onClick;
                clickBetweenHandler && clickBetweenHandler();
                originalClickHandler && originalClickHandler(e);
            }
        };
        _this.state = {};
        return _this;
    }
    ClickBetweenProvider.prototype.getChildContext = function() {
        return {
            registerHandler: this.registerHandler,
            unregisterHandler: this.unregisterHandler,
        };
    };
    ClickBetweenProvider.prototype.render = function() {
        var children = this.props.children;
        return children ?
            React.cloneElement(Children.only(children), {
                onClick: this.clickHandler,
            }) :
            null;
    };
    ClickBetweenProvider.childContextTypes = {
        registerHandler: PropTypes.func,
        unregisterHandler: PropTypes.func,
    };
    return ClickBetweenProvider;
}(React.Component));
export {
    ClickBetweenProvider
};
//# sourceMappingURL=ClickBetweenProvider.js.map