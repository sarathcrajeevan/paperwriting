import {
    __extends
} from "tslib";
import React from 'react';
import {
    Constants
} from '@wix/chat-sdk';
import classNames from 'classnames';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import styles from './StandardTemplateBubble.scss';
import withAppMode from '../../../providers/appMode/withAppMode';
import {
    AppMode
} from '../../../constants/app-mode';
var StandardTemplateBubble = /** @class */ (function(_super) {
    __extends(StandardTemplateBubble, _super);

    function StandardTemplateBubble() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StandardTemplateBubble.prototype.render = function() {
        var _this = this;
        var _a = this.props,
            message = _a.message,
            theme = _a.theme,
            appMode = _a.appMode,
            eventHooks = _a.eventHooks;
        var _b = message.templateData,
            image = _b.image,
            icon = _b.icon,
            title = _b.title,
            text = _b.text,
            lines = _b.lines,
            buttons = _b.buttons,
            orientation = _b.orientation;
        var className = orientation === Constants.MessageOrientation.Portrait ? 'vertical' : '';
        var inheritFont = _get(theme, 'room.template.inheritFont', true);
        var fontFamily = inheritFont ? _get(theme, 'room.fontFamily') : undefined;
        var templateBackgroundColor = _get(theme, 'room.template.backgroundColor');
        var templateWidth = _get(theme, 'room.template.width');
        var templateImageHeight = _get(theme, 'room.template.imageHeight');
        var wrapperStyle = {
            background: templateBackgroundColor,
            width: templateWidth,
        };
        var buttonBackgroundColor = _get(theme, 'room.button.background');
        var borderRadius = _get(theme, 'room.button.borderRadius');
        var buttonTextColor = _get(theme, 'room.button.textColor');
        var iconUrl = _get(theme, ['room', 'icons', icon]);
        var imageIcon = iconUrl ? iconUrl : image;
        var isFullApp = appMode === AppMode.FullApp;
        var style = {
            backgroundColor: buttonBackgroundColor,
            borderRadius: borderRadius,
            color: buttonTextColor,
            fontFamily: fontFamily,
        };
        var handleCallToActionClick = function(url) {
            if (eventHooks.onCallToActionClick) {
                eventHooks.onCallToActionClick(url);
            }
        };
        var linesComp = lines &&
            lines.map(function(line, index) {
                return (React.createElement("div", {
                    className: styles.standardTemplateLine + " " + (isFullApp && styles.fullApp),
                    "data-hook": "standard-template-line",
                    style: {
                        fontFamily: fontFamily
                    },
                    key: index
                }, line));
            });
        var getButtonsBackwardCompatibility = function() {
            // Here I access dto which is private only to fix a data structure mistake.
            return (_this.props.message.dto.data &&
                _this.props.message.dto.data
                .filter(function(dataItem) {
                    return dataItem.mimeType === 'button';
                })
                .map(function(button) {
                    return button.data;
                }));
        };
        var renderCTAButtons = function() {
            var buttonsIncludingBackwardCompatibility = buttons && buttons.length ? buttons : getButtonsBackwardCompatibility();
            return (buttonsIncludingBackwardCompatibility && (React.createElement("span", {
                className: styles.buttons
            }, buttonsIncludingBackwardCompatibility.map(function(button, index) {
                var _a;
                return (React.createElement("button", {
                    "data-hook": "standard-template-button",
                    style: style,
                    className: classNames(styles.button, (_a = {},
                        _a[styles.fullApp] = isFullApp,
                        _a)),
                    key: index,
                    onClick: function() {
                        return handleCallToActionClick(button.cta);
                    }
                }, button.text));
            }))));
        };
        return (React.createElement("div", {
                "data-hook": "standard-template-wrapper",
                className: styles.standardTemplate + " " + styles[className] + " " + styles[appMode],
                style: wrapperStyle
            },
            imageIcon && (React.createElement("img", {
                className: styles.image,
                "data-hook": "standard-template-image",
                src: imageIcon,
                style: {
                    width: templateWidth,
                    height: templateImageHeight
                }
            })),
            React.createElement("div", {
                    className: styles.text
                },
                React.createElement("div", {
                    "data-hook": "standard-template-title",
                    className: styles.standardTemplateTitle + " && " + (isFullApp && styles.fullApp),
                    style: {
                        fontFamily: fontFamily
                    }
                }, title),
                text && (React.createElement("div", {
                    "data-hook": "standard-template-text",
                    className: styles.standardTemplateText,
                    style: {
                        fontFamily: fontFamily
                    }
                }, text)),
                linesComp),
            renderCTAButtons()));
    };
    return StandardTemplateBubble;
}(React.PureComponent));
export default withTheme(withAppMode(StandardTemplateBubble));
//# sourceMappingURL=StandardTemplateBubble.js.map