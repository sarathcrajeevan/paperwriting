import React, {
    useState
} from 'react';
import withTheme from '../../../providers/theme/withTheme';
import {
    MimeTypes
} from '@wix/chat-sdk/lib/src/constants/constants';
import PlainTextBubble from '../PlainTextBubble/PlainTextBubble';
import FileAttachment from '../../attachments/FileAttachment/FileAttachment';
import ImageAttachment from '../../attachments/ImageAttachment/ImageAttachment';
import {
    Box,
    TextButton
} from 'wix-style-react';
import ChevronDown from 'wix-ui-icons-common/ChevronDown';
import ChevronUp from 'wix-ui-icons-common/ChevronUp';
import {
    translate
} from 'react-i18next';
var MultipartBubble = function(_a) {
    var message = _a.message,
        t = _a.t,
        instanceId = _a.instanceId;
    var _b, _c, _d;
    var _e = useState(false),
        collapsed = _e[0],
        setCollapsed = _e[1];
    var textParts = (_b = message.messageParts) === null || _b === void 0 ? void 0 : _b.filter(function(part) {
        return part.mimeType === MimeTypes.PlainText;
    });
    var fileParts = (_c = message.messageParts) === null || _c === void 0 ? void 0 : _c.filter(function(part) {
        return part.mimeType === MimeTypes.File;
    });
    var imageParts = (_d = message.messageParts) === null || _d === void 0 ? void 0 : _d.filter(function(part) {
        return part.mimeType === MimeTypes.Image;
    });
    var totalAttachments = fileParts.length + imageParts.length;
    var attachmentAreaPaddingTop = (textParts === null || textParts === void 0 ? void 0 : textParts.length) ? '0' : '12px';
    return (React.createElement(Box, {
            direction: "vertical"
        }, textParts === null || textParts === void 0 ? void 0 :
        textParts.map(function(textPart, i) {
            return (React.createElement(PlainTextBubble, {
                key: "text-part-" + i,
                fullWidth: true,
                messagePart: textPart
            }));
        }),
        totalAttachments ? (React.createElement(Box, {
                padding: attachmentAreaPaddingTop + " 15px 12px",
                direction: "vertical"
            },
            React.createElement(TextButton, {
                    as: "div",
                    onClick: function() {
                        setCollapsed(!collapsed);
                    },
                    size: "tiny",
                    suffixIcon: collapsed ? React.createElement(ChevronDown, null) : React.createElement(ChevronUp, null)
                }, totalAttachments === 1 ?
                t('message.total.attachment', {
                    count: totalAttachments,
                }) :
                t('message.total.attachments', {
                    count: totalAttachments,
                })),
            React.createElement(Box, {
                    display: collapsed ? 'none' : undefined,
                    margin: "6px 0"
                },
                React.createElement(Box, {
                        flexWrap: "wrap"
                    },
                    (fileParts === null || fileParts === void 0 ? void 0 : fileParts.map(function(part, i) {
                        return (React.createElement(Box, {
                                key: "file-part-" + i,
                                marginRight: "4px"
                            },
                            React.createElement(FileAttachment, {
                                messagePart: part,
                                instanceId: instanceId,
                                transit: message.transit,
                                maxWidth: 160
                            })));
                    })) || null,
                    (imageParts === null || imageParts === void 0 ? void 0 : imageParts.map(function(part, i) {
                        return (React.createElement(Box, {
                                key: "image-part-" + i,
                                marginRight: "4px"
                            },
                            React.createElement(ImageAttachment, {
                                messagePart: part,
                                instanceId: instanceId,
                                transit: message.transit,
                                maxWidth: 160
                            })));
                    })) || null)))) : null));
};
export default translate()(withTheme(MultipartBubble));
//# sourceMappingURL=MultipartBubble.js.map