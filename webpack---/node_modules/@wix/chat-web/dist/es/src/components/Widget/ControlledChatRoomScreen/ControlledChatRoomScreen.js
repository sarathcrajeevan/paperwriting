import {
    __assign,
    __extends
} from "tslib";
import React from 'react';
import ChatRoom from '../../ChatRoom/ChatRoom';
import i18n from '../../../i18n';
import {
    I18nextProvider
} from 'react-i18next';
import ThemeProvider from '../../../providers/theme/ThemeProvider';
import AppModeProvider from '../../../providers/appMode/AppModeProvider';
import {
    AppMode
} from '../../..';
var ControlledChatRoomScreen = /** @class */ (function(_super) {
    __extends(ControlledChatRoomScreen, _super);

    function ControlledChatRoomScreen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControlledChatRoomScreen.prototype.componentDidMount = function() {
        if (this.props.messages && this.props.messages.length > 0) {
            var foldHeader = this.props.foldHeader;
            foldHeader && foldHeader();
        }
    };
    ControlledChatRoomScreen.prototype.UNSAFE_componentWillReceiveProps = function(nextProps) {
        var messages = nextProps.messages,
            foldHeader = nextProps.foldHeader,
            unfoldHeader = nextProps.unfoldHeader,
            isExpanded = nextProps.isExpanded;
        if ((messages || []).length === (this.props.messages || []).length &&
            isExpanded === this.props.isExpanded) {
            return;
        }
        if ((messages || []).length > 0 || !isExpanded) {
            foldHeader && foldHeader();
        } else {
            unfoldHeader && unfoldHeader({
                animation: true
            });
        }
    };
    ControlledChatRoomScreen.prototype.render = function() {
        var _this = this;
        var _a;
        var chatRoomProps = __assign({
            isVisible: this.props.isExpanded,
            onSendMessage: function(message) {
                var _a, _b;
                (_b = (_a = _this.props.eventHooks) === null || _a === void 0 ? void 0 : _a.onSendMessage) === null || _b === void 0 ? void 0 : _b.call(_a, message.dto);
            },
            onButtonInteraction: function(button) {
                var _a, _b;
                (_b = (_a = _this.props.eventHooks) === null || _a === void 0 ? void 0 : _a.onButtonInteraction) === null || _b === void 0 ? void 0 : _b.call(_a, button);
            },
            onAddMessage: function() {},
            onUploadFile: function() {
                throw new Error('onUploadFile not implemented!');
            },
            onClearUnreadDisplay: function() {},
            eventHooks: (_a = this.props.eventHooks) !== null && _a !== void 0 ? _a : {},
            loadMore: function() {},
            offlineChannels: [],
            chatroomId: '',
            initialFetchDone: true,
            otherParticipantId: '',
            hasError: false
        }, this.props);
        return (React.createElement(I18nextProvider, {
                i18n: i18n({
                    locale: this.props.locale
                })
            },
            React.createElement(ThemeProvider, {
                    theme: this.props.theme
                },
                React.createElement(AppModeProvider, {
                        appMode: AppMode.Widget
                    },
                    React.createElement(ChatRoom, __assign({}, chatRoomProps))))));
    };
    return ControlledChatRoomScreen;
}(React.Component));
export default ControlledChatRoomScreen;
//# sourceMappingURL=ControlledChatRoomScreen.js.map