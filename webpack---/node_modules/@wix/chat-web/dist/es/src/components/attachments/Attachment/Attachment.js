import React, {
    useMemo
} from 'react';
import classNames from 'classnames';
import {
    translate
} from 'react-i18next';
import {
    formattedFileSize
} from '../../../services/media-utils';
import {
    Box,
    Text,
    CloseButton,
    SkeletonGroup,
    Tooltip,
    Loader,
} from 'wix-style-react';
import styles from './Attachment.scss';
var Attachment = function(_a) {
    var name = _a.name,
        size = _a.size,
        image = _a.image,
        onRemove = _a.onRemove,
        onClickName = _a.onClickName,
        onClickImage = _a.onClickImage,
        pending = _a.pending,
        maxWidth = _a.maxWidth,
        t = _a.t;
    var Wrapper = useMemo(function() {
        return (pending ? SkeletonGroup : React.Fragment);
    }, [pending]);
    var imageOrSkeleton = useMemo(function() {
        return !pending ? (image) : (React.createElement(Box, {
                className: styles.attachmentLoaderWrapper,
                align: "center",
                verticalAlign: "middle",
                width: "100%",
                height: "100%"
            },
            React.createElement(Loader, {
                dataHook: "attachment-loader",
                size: "tiny"
            }),
            React.createElement("div", {
                hidden: true
            }, image)));
    }, [pending, image]);
    var removeButton = useMemo(function() {
        return (React.createElement(Box, {
                zIndex: 1,
                position: "absolute",
                top: "0px",
                right: "0px",
                className: styles.closeButton
            },
            React.createElement(Tooltip, {
                    content: t('input.attachment.remove')
                },
                React.createElement(CloseButton, {
                    dataHook: "attachment-remove-button",
                    skin: "dark",
                    size: "medium",
                    onClick: onRemove
                }))));
    }, []);
    return (React.createElement(Wrapper, null,
        React.createElement(Box, {
                dataHook: "attachment-wrapper",
                className: classNames(styles.wrapper),
                margin: "4px 0px 4px 0",
                maxWidth: maxWidth ? maxWidth + "px" : '300px',
                position: "relative",
                overflow: "hidden"
            },
            onRemove ? removeButton : null,
            React.createElement(Box, {
                    background: "white",
                    className: classNames(styles.attachmentBox),
                    verticalAlign: "middle",
                    align: "center",
                    borderRadius: "6px",
                    height: "48px",
                    paddingRight: "15px",
                    overflow: "hidden"
                },
                React.createElement(Box, {
                        dataHook: "attachment-body",
                        className: styles.attachmentBody
                    },
                    React.createElement(Box, {
                            minWidth: "48px",
                            width: "48px",
                            minHeight: "48px",
                            align: "center",
                            verticalAlign: "middle",
                            overflow: "hidden"
                        },
                        React.createElement("div", {
                            style: {
                                width: '100%',
                                display: 'flex',
                                height: '100%',
                                alignItems: 'center',
                                justifyContent: 'center',
                                cursor: 'pointer',
                            },
                            "data-hook": "attachment-image-wrapper",
                            onClick: onClickImage
                        }, imageOrSkeleton)),
                    React.createElement(Box, {
                            verticalAlign: "middle",
                            direction: "vertical",
                            maxWidth: maxWidth ? maxWidth / 2 + "px" : '150px',
                            margin: "0 6px"
                        },
                        React.createElement(Box, {
                                cursor: "pointer",
                                className: styles.attachmentName
                            },
                            React.createElement(Text, {
                                weight: "normal",
                                size: "small",
                                ellipsis: true,
                                showTooltip: false,
                                onClick: onClickName,
                                dataHook: "attachment-file-name"
                            }, name ? name : 'no-name')),
                        React.createElement(Box, {
                                height: "14px"
                            },
                            React.createElement(Text, {
                                size: "tiny",
                                secondary: true,
                                light: true,
                                dataHook: "attachment-file-size"
                            }, size ? formattedFileSize(size) : ''))))))));
};
export default translate()(Attachment);
//# sourceMappingURL=Attachment.js.map