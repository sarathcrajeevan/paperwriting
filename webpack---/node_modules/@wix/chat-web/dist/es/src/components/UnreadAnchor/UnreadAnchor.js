import {
    __extends
} from "tslib";
import React, {
    Component
} from 'react';
import _get from 'lodash/get';
import styles from './UnreadAnchor.scss';
import withAppMode from '../../providers/appMode/withAppMode';
import withTheme from '../../providers/theme/withTheme';
var UnreadAnchor = /** @class */ (function(_super) {
    __extends(UnreadAnchor, _super);

    function UnreadAnchor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnreadAnchor.prototype.render = function() {
        var _a = this.props,
            anchorText = _a.anchorText,
            appMode = _a.appMode,
            theme = _a.theme;
        var color = _get(theme, 'room.unreadAnchor.color');
        var strokeColor = _get(theme, 'room.unreadAnchor.strokeColor');
        var look = _get(theme, 'room.unreadAnchor.look');
        var hideStroke = _get(theme, 'room.unreadAnchor.hideStroke');
        var strokeStyle = strokeColor ? {
            backgroundColor: strokeColor
        } : {};
        var fontFamily = _get(theme, 'room.fontFamily');
        var rootStyle = !look ? {
            fontFamily: fontFamily
        } : {};
        var textStyle = !look && color ? {
            color: color
        } : {};
        return (React.createElement("div", {
                "data-hook": "unread-anchor-wrapper",
                id: "chat-unread-anchor-wrapper",
                className: styles.unreadAnchorBackground + " " + styles[appMode] + " " + styles[look],
                style: rootStyle
            },
            React.createElement("span", {
                    style: textStyle,
                    "data-hook": "unread-anchor",
                    className: styles.unreadAnchor
                }, !hideStroke && (React.createElement("span", {
                    style: strokeStyle,
                    className: styles.stroke
                })),
                anchorText, !hideStroke && (React.createElement("span", {
                    style: strokeStyle,
                    className: styles.stroke
                })))));
    };
    return UnreadAnchor;
}(Component));
export default withTheme(withAppMode(UnreadAnchor));
//# sourceMappingURL=UnreadAnchor.js.map