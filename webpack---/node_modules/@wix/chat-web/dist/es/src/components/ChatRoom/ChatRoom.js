import {
    __assign,
    __extends
} from "tslib";
import React, {
    Component
} from 'react';
import {
    chatSdk,
} from '@wix/chat-sdk';
import MessagesList from '../MessagesList/MessagesList';
import styles from './ChatRoom.scss';
import classNames from 'classnames';
import _get from 'lodash/get';
import {
    translate
} from 'react-i18next';
import withAppMode from '../../providers/appMode/withAppMode';
import withTheme from '../../providers/theme/withTheme';
import InputSplitter from '../InputSplitter/InputSplitter';
import {
    ClickBetweenProvider
} from '../../providers/ClickBetweenProvider/ClickBetweenProvider';
import withDropzone from './withDropzone/withDropzone';
import DropzoneCloud from '../../svgIcons/dist/components/dropzoneCloud';
import {
    DEFAULT_HEADER_COLOR
} from '../../constants/default-widget-colors';
import {
    Experiments
} from '../../constants/experiments';
var ChatRoom = /** @class */ (function(_super) {
    __extends(ChatRoom, _super);

    function ChatRoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChatRoom.prototype.render = function() {
        var _a, _b;
        var _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var _o = this.props,
            messages = _o.messages,
            appMode = _o.appMode,
            _p = _o.className,
            className = _p === void 0 ? '' : _p,
            disabled = _o.disabled,
            onSendMessage = _o.onSendMessage,
            onSendAgain = _o.onSendAgain,
            onAddMessage = _o.onAddMessage,
            onUploadFile = _o.onUploadFile,
            onClearUnreadDisplay = _o.onClearUnreadDisplay,
            handleTyping = _o.handleTyping,
            header = _o.header,
            unreadCount = _o.unreadCount,
            lastReadMessageSequence = _o.lastReadMessageSequence,
            userId = _o.userId,
            chatroomId = _o.chatroomId,
            eventHooks = _o.eventHooks,
            messageDirectionOverride = _o.messageDirectionOverride,
            hasMore = _o.hasMore,
            loadMore = _o.loadMore,
            sendOnEnter = _o.sendOnEnter,
            instanceId = _o.instanceId,
            isVisible = _o.isVisible,
            isGroupChat = _o.isGroupChat,
            foldHeader = _o.foldHeader,
            unfoldHeader = _o.unfoldHeader,
            isHeaderFolded = _o.isHeaderFolded,
            isMobile = _o.isMobile,
            isCollapsedAndRounded = _o.isCollapsedAndRounded,
            theme = _o.theme,
            shouldApplyCollapseAnimation = _o.shouldApplyCollapseAnimation,
            sendersData = _o.sendersData,
            getInputSendViaIndication = _o.getInputSendViaIndication,
            offlineChannels = _o.offlineChannels,
            banner = _o.banner,
            unfoldWhenEmpty = _o.unfoldWhenEmpty,
            inputOverrideComponent = _o.inputOverrideComponent,
            messageDraft = _o.messageDraft,
            messageDisplayOption = _o.messageDisplayOption,
            typingStatus = _o.typingStatus,
            timestampTooltipConfig = _o.timestampTooltipConfig,
            customTypingAnimation = _o.customTypingAnimation,
            useAvatarTooltip = _o.useAvatarTooltip,
            inputPlaceholder = _o.inputPlaceholder,
            inputKeyboards = _o.inputKeyboards,
            setMessagesRead = _o.setMessagesRead,
            containerStyle = _o.containerStyle,
            compactView = _o.compactView,
            emptyState = _o.emptyState,
            loadingState = _o.loadingState,
            errorState = _o.errorState,
            hasError = _o.hasError,
            initialFetchDone = _o.initialFetchDone,
            otherParticipantId = _o.otherParticipantId,
            droppedFiles = _o.droppedFiles,
            dropRootProps = _o.dropRootProps,
            isDragActive = _o.isDragActive,
            clearDroppedFiles = _o.clearDroppedFiles,
            deliveryMethods = _o.deliveryMethods,
            showSendButton = _o.showSendButton,
            onButtonInteraction = _o.onButtonInteraction,
            getIndicationData = _o.getIndicationData,
            getFooter = _o.getFooter,
            subjectStrategy = _o.subjectStrategy,
            inputButtons = _o.inputButtons,
            t = _o.t;
        var isCollapsedToRounded = _get(theme, 'header.collapsedAsRounded', false);
        var chatRoomClasses = classNames(styles.chatRoom, styles[appMode], className, appMode, (_a = {},
            _a[styles.collapsedAndRounded] = isCollapsedAndRounded,
            _a[styles.shouldApplyCollapseAnimation] = isCollapsedToRounded && shouldApplyCollapseAnimation,
            _a[styles.hidden] = !isVisible,
            _a));
        var hasMessages = !!(messages === null || messages === void 0 ? void 0 : messages.length);
        var messagesReady = initialFetchDone || hasMessages;
        var showLoadingState = loadingState && !messagesReady;
        var showEmptyState = emptyState && !hasMessages;
        var showMessageList = !showEmptyState && !showLoadingState && messagesReady;
        var loadingOrEmptyState = showLoadingState ?
            loadingState :
            showEmptyState ?
            emptyState :
            null;
        if (hasError && errorState) {
            return errorState;
        }
        var isWidgetRedesign = chatSdk.isExperimentOn(Experiments.WidgetRedesignPhase1);
        return (React.createElement(ClickBetweenProvider, null,
            React.createElement("div", __assign({
                    "data-hook": "chat-room",
                    className: chatRoomClasses
                }, dropRootProps),
                header,
                showMessageList ? (React.createElement(MessagesList, {
                    hasMore: hasMore,
                    loadMore: loadMore,
                    messages: messages,
                    unreadCount: unreadCount,
                    lastReadMessageSequence: lastReadMessageSequence,
                    userId: userId,
                    headerExists: header !== null,
                    messageDirectionOverride: messageDirectionOverride,
                    instanceId: instanceId,
                    isVisible: isVisible,
                    isGroupChat: isGroupChat,
                    foldHeader: foldHeader,
                    unfoldHeader: unfoldHeader,
                    isHeaderFolded: isHeaderFolded,
                    eventHooks: eventHooks,
                    sendersData: sendersData,
                    onSendAgain: onSendAgain,
                    unfoldWhenEmpty: unfoldWhenEmpty,
                    messageDisplayOption: messageDisplayOption,
                    typingStatus: typingStatus,
                    timestampTooltipConfig: timestampTooltipConfig,
                    customTypingAnimation: customTypingAnimation,
                    useAvatarTooltip: useAvatarTooltip,
                    setMessagesRead: setMessagesRead,
                    containerStyle: containerStyle,
                    chatroomId: chatroomId,
                    onButtonInteraction: onButtonInteraction,
                    getIndicationData: getIndicationData,
                    getFooter: getFooter,
                    compactView: compactView
                })) : (loadingOrEmptyState),
                isDragActive && (React.createElement("div", {
                        "data-hook": "drag-active",
                        className: classNames(styles.dragActive, (_b = {},
                            _b[styles.newDesign] = isWidgetRedesign,
                            _b)),
                        style: {
                            backgroundColor: (_d = (_c = theme.room) === null || _c === void 0 ? void 0 : _c.dropzone) === null || _d === void 0 ? void 0 : _d.backgroundColor,
                        }
                    },
                    React.createElement(DropzoneCloud, {
                        color: isWidgetRedesign ?
                            (_f = (_e = theme.room) === null || _e === void 0 ? void 0 : _e.dropzone) === null || _f === void 0 ? void 0 : _f.color : (_h = (_g = theme.header) === null || _g === void 0 ? void 0 : _g.background) !== null && _h !== void 0 ? _h : DEFAULT_HEADER_COLOR,
                        size: (_k = (_j = theme.room) === null || _j === void 0 ? void 0 : _j.dropzone) === null || _k === void 0 ? void 0 : _k.dropLogoSize
                    }),
                    React.createElement("h2", {
                        style: {
                            color: (_m = (_l = theme.room) === null || _l === void 0 ? void 0 : _l.dropzone) === null || _m === void 0 ? void 0 : _m.color,
                        }
                    }, t('chatroom.dropzone.explanation')))), !isWidgetRedesign && banner && (React.createElement("div", {
                    "data-hook": "banner"
                }, banner)),
                inputOverrideComponent || (React.createElement(InputSplitter, {
                    isVisible: isVisible,
                    disabled: disabled || !isVisible,
                    handleChange: handleTyping,
                    message: messageDraft,
                    eventHooks: eventHooks,
                    sendOnEnter: sendOnEnter,
                    foldHeader: foldHeader,
                    isMobile: isMobile,
                    getInputSendViaIndication: getInputSendViaIndication,
                    offlineChannels: offlineChannels,
                    messages: messages,
                    isHeaderFolded: isHeaderFolded,
                    placeholder: inputPlaceholder,
                    inputKeyboards: inputKeyboards,
                    chatroomId: chatroomId,
                    userId: userId,
                    onSendMessage: onSendMessage,
                    onAddMessage: onAddMessage,
                    onUploadFile: onUploadFile,
                    onClearUnreadDisplay: onClearUnreadDisplay,
                    compactView: compactView,
                    otherParticipantId: otherParticipantId,
                    droppedFiles: droppedFiles,
                    onDroppedFilesUpload: clearDroppedFiles,
                    deliveryMethods: deliveryMethods,
                    banner: isWidgetRedesign ? banner : undefined,
                    showSendButton: showSendButton,
                    subjectStrategy: subjectStrategy,
                    instanceId: instanceId,
                    inputButtons: inputButtons
                })))));
    };
    ChatRoom.defaultProps = {
        sendersData: [],
        onSendMessage: function() {},
        handleTyping: function() {},
    };
    return ChatRoom;
}(Component));
export default withTheme(withAppMode(withDropzone(translate()(ChatRoom))));
//# sourceMappingURL=ChatRoom.js.map