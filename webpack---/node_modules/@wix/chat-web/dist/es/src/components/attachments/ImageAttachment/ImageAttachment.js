import {
    __awaiter,
    __generator
} from "tslib";
import React, {
    useState
} from 'react';
import styles from './ImageAttachment.scss';
import {
    attachments
} from '@wix/inbox-common';
import withOnImageMessageClick from '../../../providers/ChatConfiguration/withOnImageMessageClick';
import {
    translate
} from 'react-i18next';
import Attachment from '../Attachment/Attachment';
var ImageAttachment = function(_a) {
    var messagePart = _a.messagePart,
        instanceId = _a.instanceId,
        transit = _a.transit,
        onImageMessageClick = _a.onImageMessageClick,
        onRemove = _a.onRemove,
        maxWidth = _a.maxWidth,
        t = _a.t;
    var _b, _c;
    var _d = useState(false),
        isLoading = _d[0],
        setIsLoading = _d[1];
    var isPending = transit && transit.isPending;
    var src = messagePart.data.uri;
    var isLoadingOrPending = isLoading || isPending;
    var fileName = messagePart.data.fileName || ((_b = transit.file) === null || _b === void 0 ? void 0 : _b.name);
    var fileSize = messagePart.data.fileSize || ((_c = transit.file) === null || _c === void 0 ? void 0 : _c.size);
    var handleImageClick = function(onClick) {
        return function() {
            return __awaiter(void 0, void 0, void 0, function() {
                var _a, filename, url, mediaProvider, width, height, size, downloadImageData;
                return __generator(this, function(_b) {
                    switch (_b.label) {
                        case 0:
                            _a = messagePart.data, filename = _a.fileName, url = _a.uri, mediaProvider = _a.mediaProvider, width = _a.width, height = _a.height, size = _a.fileSize;
                            return [4 /*yield*/ , attachments.getAttachmentUrl({
                                filename: filename,
                                url: url,
                                mediaProvider: mediaProvider,
                                instance: instanceId,
                            })];
                        case 1:
                            downloadImageData = _b.sent();
                            onClick({
                                url: downloadImageData.url,
                                width: width,
                                height: height,
                                fileName: filename,
                                fileSize: size,
                            });
                            return [2 /*return*/ ];
                    }
                });
            });
        };
    };
    var handleImageLoad = function() {
        setIsLoading(false);
    };
    return (React.createElement(Attachment, {
        name: fileName,
        size: fileSize,
        pending: !!isLoadingOrPending,
        onClickImage: handleImageClick(onImageMessageClick),
        onClickName: handleImageClick(onImageMessageClick),
        onRemove: onRemove,
        maxWidth: maxWidth,
        image: src ? (React.createElement("img", {
            onLoad: handleImageLoad,
            className: styles.image,
            src: src,
            alt: fileName,
            "aria-label": t('messages.image-bubble.open.aria-label'),
            role: "button",
            tabIndex: -1,
            "data-hook": "attachment-image"
        })) : null
    }));
};
export default withOnImageMessageClick(translate()(ImageAttachment));
//# sourceMappingURL=ImageAttachment.js.map