import React from 'react';
import {
    Button as sdkButton
} from '@wix/chat-sdk';
import classNames from 'classnames';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import _isEmpty from 'lodash/isEmpty';
import styles from './StandardTemplateV2Bubble.scss';
import withAppMode from '../../../providers/appMode/withAppMode';
import {
    AppMode
} from '../../../constants/app-mode';
import {
    ButtonType
} from '@wix/ambassador-serverless-chat-platform/types';
var StandardTemplateV2Bubble = function(_a) {
    var _b;
    var message = _a.message,
        theme = _a.theme,
        appMode = _a.appMode,
        eventHooks = _a.eventHooks,
        onButtonInteraction = _a.onButtonInteraction;
    var _c = message.templateData,
        image = _c.image,
        icon = _c.icon,
        title = _c.title,
        text = _c.text,
        lines = _c.lines,
        buttons = _c.buttons;
    var isFullApp = appMode === AppMode.FullApp;
    var fontFamily = _get(theme, 'room.fontFamily');
    var sendIconColor = _get(theme, 'input.sendIconColor');
    var iconUrl = _get(theme, ['room', 'icons', icon]);
    var imageIcon = iconUrl || image;
    var handleButtonClick = function(button) {
        if (button.type === ButtonType.POSTBACK) {
            onButtonInteraction && onButtonInteraction(sdkButton.buildButton(button));
        }
        if (button.cta && eventHooks.onCallToActionClick) {
            eventHooks.onCallToActionClick(button.cta);
        }
    };
    var linesComp = lines &&
        lines.map(function(line, index) {
            return (React.createElement("div", {
                className: styles.standardTemplateV2Line,
                "data-hook": "standard-template-v2-line",
                style: {
                    fontFamily: fontFamily
                },
                key: index
            }, line));
        });
    var hasText = !_isEmpty(lines) || title || text;
    var getButtonsBackwardCompatibility = function() {
        // Here I access dto which is private only to fix a data structure mistake.
        return (message.dto.data &&
            message.dto.data
            .filter(function(dataItem) {
                return dataItem.mimeType === 'button';
            })
            .map(function(dtoData) {
                return dtoData.data;
            }));
    };
    var renderButtons = function() {
        var buttonsIncludingBackwardCompatibility = _isEmpty(buttons) ?
            getButtonsBackwardCompatibility() :
            buttons;
        return (buttonsIncludingBackwardCompatibility && (React.createElement("div", {
            className: styles.buttons
        }, buttonsIncludingBackwardCompatibility.map(function(button, index) {
            var _a;
            return (React.createElement("button", {
                "data-hook": "standard-template-v2-button",
                style: {
                    color: isFullApp ? undefined : sendIconColor,
                },
                className: classNames((_a = {},
                    _a[styles.button] = true,
                    _a[styles.disabled] = isFullApp && button.type === ButtonType.POSTBACK,
                    _a)),
                key: index,
                onClick: function() {
                    return handleButtonClick(button);
                },
                disabled: isFullApp && button.type === ButtonType.POSTBACK
            }, button.text));
        }))));
    };
    return (React.createElement("div", {
            "data-hook": "standard-template-v2-wrapper",
            className: classNames((_b = {},
                _b[styles.standardTemplateV2] = true,
                _b[styles[appMode]] = styles[appMode],
                _b))
        },
        imageIcon && (React.createElement("img", {
            className: styles.image,
            "data-hook": "standard-template-v2-image",
            src: imageIcon
        })),
        hasText && (React.createElement("div", {
                className: styles.textsContainer
            },
            title && (React.createElement("div", {
                "data-hook": "standard-template-v2-title",
                className: styles.standardTemplateV2Title,
                style: {
                    fontFamily: fontFamily
                }
            }, title)),
            text && (React.createElement("div", {
                "data-hook": "standard-template-v2-text",
                className: styles.standardTemplateV2Text,
                style: {
                    fontFamily: fontFamily
                }
            }, text)),
            linesComp)),
        renderButtons()));
};
export default withTheme(withAppMode(StandardTemplateV2Bubble));
//# sourceMappingURL=StandardTemplateV2Bubble.js.map