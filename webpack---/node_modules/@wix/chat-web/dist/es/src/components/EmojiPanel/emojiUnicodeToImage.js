/**
 *
 * Here's a thing that will look through all the text nodes of a document, and
 * upon encountering an emoji codepoint, will replace it with an image.
 * For now, those images are pulled from GitHub, which isn't very nice, so I
 * need to find a more suitable host.
 *
 * Much of this code was gleaned from staring at the minified GitHub JS.
 *
 * Copyright (c) 2013 Mark Wunsch. Licensed under the MIT License.
 * @markwunsch
 *
 */
var IMAGE_HOST = 'assets.github.com',
    IMAGE_PATH = '/images/icons/emoji/unicode/',
    IMAGE_EXT = '.png';
// String.fromCodePoint is super helpful
if (!String.fromCodePoint) {
    /*!
     * ES6 Unicode Shims 0.1
     * (c) 2012 Steven Levithan <http://slevithan.com/>
     * MIT License
     **/
    String.fromCodePoint = function() {
        var chars = [];
        var point, offset, units, i;
        for (i = 0; i < arguments.length; ++i) {
            point = arguments[i];
            offset = point - 0x10000;
            units =
                point > 0xffff ?
                [0xd800 + (offset >> 10), 0xdc00 + (offset & 0x3ff)] :
                [point]; // eslint-disable-line no-bitwise
            chars.push(String.fromCharCode.apply(null, units));
        }
        return chars.join('');
    };
}
/**
 * Create a treewalker to walk an element and return an Array of Text Nodes.
 * This function is (hopefully) smart enough to exclude unwanted text nodes
 * like whitespace and script tags.
 * https://gist.github.com/mwunsch/4693383
 */
function getLegitTextNodes(element) {
    // tslint:disable-next-line:deprecation
    if (!document.createTreeWalker) {
        return [];
    }
    var blacklist = ['SCRIPT', 'OPTION', 'TEXTAREA'];
    var textNodes = [];
    // tslint:disable-next-line:deprecation
    var walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, (function(node) {
        if (node.parentElement &&
            blacklist.indexOf(node.parentElement.nodeName.toUpperCase()) >= 0) {
            return NodeFilter.FILTER_REJECT;
        }
        if (String.prototype.trim && !node.nodeValue.trim().length) {
            return NodeFilter.FILTER_SKIP;
        }
        return NodeFilter.FILTER_ACCEPT;
    }), false);
    while (walker.nextNode()) {
        textNodes.push(walker.currentNode);
    }
    return textNodes;
}
/**
 * For a UTF-16 (JavaScript's preferred encoding...kinda) surrogate pair,
 * return a Unicode codepoint.
 */
function surrogatePairToCodepoint(lead, trail) {
    return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000; // eslint-disable-line no-mixed-operators
}
/**
 * Get an Image element for an emoji codepoint (in hex).
 */
function getImageForCodepoint(hex) {
    var img = document.createElement('img');
    img.style.width = '1em';
    img.style.verticalAlign = 'top';
    img.src = "//" + IMAGE_HOST + IMAGE_PATH + hex + IMAGE_EXT;
    return img;
}
/**
 * Convert an HTML string into a DocumentFragment, for insertion into the dom.
 */
function fragmentForString(htmlString) {
    var tmpDoc = document.createElement('DIV'),
        fragment = document.createDocumentFragment();
    var childNode;
    tmpDoc.innerHTML = htmlString;
    // tslint:disable-next-line:no-conditional-assignment
    while ((childNode = tmpDoc.firstChild)) {
        fragment.appendChild(childNode);
    }
    return fragment;
}
/**
 * Iterate through a list of nodes, find emoji, replace with images.
 */
function emojiReplace(nodes) {
    var PATTERN = /([\ud800-\udbff])([\udc00-\udfff])/g;
    nodes.forEach(function(node) {
        var replacement;
        var value = node.nodeValue,
            matches = value.match(PATTERN);
        if (matches) {
            replacement = value.replace(PATTERN, function(match, p1, p2) {
                var codepoint = surrogatePairToCodepoint(p1.charCodeAt(0), p2.charCodeAt(0)),
                    img = getImageForCodepoint(codepoint.toString(16));
                return img.outerHTML;
            });
            node.parentNode.replaceChild(fragmentForString(replacement), node);
        }
    });
}
export var shouldReplaceWithEmojiImg = function() {
    var userAgent = window.navigator.userAgent.toLowerCase();
    return (userAgent.indexOf('windows nt 6.1') > -1 ||
        userAgent.indexOf('windows nt 5.1') > -1);
};
export var emojiReplaceAll = function() {
    return emojiReplace(getLegitTextNodes(document.body));
};
export var emojiReplaceNode = function(node) {
    return emojiReplace([node]);
};
export var emojiReplaceNodeChildren = function(node) {
    return emojiReplace(getLegitTextNodes(node));
};
//# sourceMappingURL=emojiUnicodeToImage.js.map