import {
    __extends
} from "tslib";
import React, {
    Component
} from 'react';
import styles from './EmojiPanel.scss';
import data from './EmojiData';
import classNames from 'classnames';
import {
    emojiReplaceNodeChildren,
    shouldReplaceWithEmojiImg,
} from './emojiUnicodeToImage';
import withTheme from '../../providers/theme/withTheme';
import _get from 'lodash/get';
import {
    chatSdk,
    Constants
} from '@wix/chat-sdk';
import withAppMode from '../../providers/appMode/withAppMode';
import {
    AppMode
} from '../../constants/app-mode';
export default withTheme(withAppMode( /** @class */ (function(_super) {
    __extends(class_1, _super);

    function class_1(props) {
        var _this = _super.call(this, props) || this;
        _this.panel = null;
        _this._isLazyLoadPanel = function() {
            return chatSdk.isExperimentOn(Constants.experiments.LazyLoadEmojiPanel);
        };
        _this.buildTabs = function() {
            var firstTab = _this.buildTab(data[0], 0);
            var restOfTabs = data
                .slice(1)
                .map(function(category, index) {
                    return _this.buildTab(category, index + 1);
                });
            return [firstTab, restOfTabs];
        };
        _this.inputFullAppCategoryEmoji = function(category) {
            return category.iconFullApp ? category.iconFullApp : null;
        };
        _this.legacyCategoryEmoji = function(category) {
            return category.icon ? _this.createEmoji(category.icon) : null;
        };
        _this.rootClasses = function() {
            var _a;
            return classNames((_a = {},
                _a[styles.emojiPanel] = true,
                _a[styles.fullApp] = _this.props.appMode === AppMode.FullApp,
                _a));
        };
        _this.state = {
            activeTab: '0',
            tabs: [],
            preBuiltTabs: [],
        };
        return _this;
    }
    class_1.prototype.componentDidMount = function() {
        var _this = this;
        if (shouldReplaceWithEmojiImg()) {
            emojiReplaceNodeChildren(this.panel);
        }
        if (this._isLazyLoadPanel()) {
            var preBuiltTabs = data.map(function(category, index) {
                return _this.buildTab(category, index);
            });
            this.setState({
                preBuiltTabs: preBuiltTabs
            });
        }
    };
    class_1.prototype.createEmoji = function(unicode) {
        if (Array.isArray(unicode)) {
            return String.fromCodePoint(Number("0x" + unicode[0]), Number("0x" + unicode[1]));
        }
        return String.fromCodePoint(Number("0x" + unicode));
    };
    class_1.prototype.isActive = function(index) {
        return this.state.activeTab === index.toString();
    };
    class_1.prototype.setActiveTab = function(index) {
        this.setState({
            activeTab: index.toString()
        });
    };
    class_1.prototype.componentDidUpdate = function() {
        if (this._isLazyLoadPanel()) {
            var _a = this.state,
                tabs = _a.tabs,
                preBuiltTabs = _a.preBuiltTabs;
            if (tabs.length === 0) {
                this.setState({
                    tabs: preBuiltTabs
                });
            }
            if (shouldReplaceWithEmojiImg()) {
                emojiReplaceNodeChildren(this.panel);
            }
        }
    };
    class_1.prototype.buildTab = function(category, index) {
        var _this = this;
        var filteredEmojies = shouldReplaceWithEmojiImg() ?
            category.emojis.filter(function(emojiData) {
                return !emojiData.filter;
            }) :
            category.emojis;
        return (React.createElement("div", {
            id: "emojis-tab-content-" + index,
            role: "tabpanel",
            "aria-labelledby": "emojis-tab-" + index,
            className: this.isActive(index) ? styles.active : '',
            key: index
        }, filteredEmojies.map(function(emojiData, i) {
            var emoji = _this.createEmoji(emojiData.unicode);
            var unicode = emojiData.unicode.toString();
            return (React.createElement("button", {
                className: styles.emoji,
                "data-hook": "emoji",
                "data-unicode": unicode,
                onClick: function() {
                    return _this.props.onAddItemToTextArea(emoji, {
                        closeKeyboard: false,
                        addNewLine: false,
                    });
                },
                key: i
            }, emoji));
        })));
    };
    class_1.prototype.render = function() {
        var _a;
        var _this = this;
        var backgroundColor = _get(this.props.theme, 'room.emojiPanel.backgroundColor');
        var activeCategoryColor = _get(this.props.theme, 'room.emojiPanel.borderColor');
        var innerPanelStyle = backgroundColor ? {
            backgroundColor: backgroundColor
        } : {};
        var fullApp = this.props.appMode === AppMode.FullApp;
        return (React.createElement("div", {
                ref: function(panel) {
                    return (_this.panel = panel);
                },
                "data-hook": "emoji-panel",
                className: this.rootClasses()
            },
            React.createElement("div", {
                "data-hook": "categories",
                className: styles.categories,
                role: "tablist"
            }, data.map(function(category, index) {
                var categoryStyle = activeCategoryColor && _this.isActive(index) ?
                    {
                        borderBottomColor: activeCategoryColor
                    } :
                    {};
                return (React.createElement("button", {
                        role: "tab",
                        "aria-selected": _this.isActive(index),
                        "aria-controls": "emojis-tab-content-" + index,
                        id: "emojis-tab-" + index,
                        style: categoryStyle,
                        key: index,
                        "data-hook": "emoji-category",
                        onClick: function() {
                            return _this.setActiveTab(index);
                        },
                        className: styles.emoji + " " + category.class + " " + (_this.isActive(index) ? styles.active : '')
                    }, fullApp ?
                    _this.inputFullAppCategoryEmoji(category) :
                    _this.legacyCategoryEmoji(category)));
            })),
            React.createElement("div", {
                    "data-hook": "inner-panel",
                    style: innerPanelStyle,
                    className: classNames(styles.innerPanel, (_a = {},
                        _a[styles.fullApp] = fullApp,
                        _a[styles.eager] = !this._isLazyLoadPanel(),
                        _a))
                }, this._isLazyLoadPanel() ?
                this.state.tabs[this.state.activeTab] :
                this.buildTabs())));
    };
    return class_1;
}(Component))));
//# sourceMappingURL=EmojiPanel.js.map