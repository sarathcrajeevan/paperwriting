import {
    __awaiter,
    __extends,
    __generator
} from "tslib";
import React from 'react';
import classNames from 'classnames';
import styles from './FileBubble.scss';
import DownloadFileIcon from '../../../svgIcons/dist/components/downloadFile';
import {
    attachments
} from '@wix/inbox-common';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import withAppMode from '../../../providers/appMode/withAppMode';
import {
    translate
} from 'react-i18next';
import {
    getFileSecureUrl
} from '../../../services/media-utils';
var FileBubble = /** @class */ (function(_super) {
    __extends(FileBubble, _super);

    function FileBubble() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleFileDownload = function() {
            return __awaiter(_this, void 0, void 0, function() {
                var _a, filename, url, mediaProvider, instance, downloadFileData;
                return __generator(this, function(_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.props.messagePart.data, filename = _a.fileName, url = _a.uri, mediaProvider = _a.mediaProvider;
                            instance = this.props.instanceId;
                            return [4 /*yield*/ , attachments.getAttachmentUrl({
                                filename: filename,
                                url: url,
                                mediaProvider: mediaProvider,
                                instance: instance,
                            })];
                        case 1:
                            downloadFileData = _b.sent();
                            window.open(getFileSecureUrl(downloadFileData.url));
                            return [2 /*return*/ ];
                    }
                });
            });
        };
        return _this;
    }
    FileBubble.prototype.formattedFileSize = function(fileSize) {
        var kb = 1024;
        var mb = kb * 1024;
        if (fileSize >= mb) {
            return (fileSize / mb).toFixed(2) + " MB";
        }
        return (fileSize / kb).toFixed(2) + " KB";
    };
    FileBubble.prototype.render = function() {
        var _a;
        var _b = this.props,
            messagePart = _b.messagePart,
            appMode = _b.appMode,
            transit = _b.transit,
            theme = _b.theme,
            t = _b.t;
        var type = messagePart.data.type;
        var fileType = type ?
            attachments.getAttachmentType(type) :
            attachments.attachmentTypes.UNKNOWN;
        var isPending = transit && transit.isPending;
        var inheritFont = _get(theme, 'room.template.inheritFont', true);
        var fontFamily = inheritFont ? _get(theme, 'room.fontFamily') : undefined;
        var shouldShowFileSize = messagePart.data.fileSize && messagePart.data.fileSize > 0;
        return (React.createElement("div", {
                "data-hook": "filebubble-wrapper",
                className: classNames(styles.wrapper, styles[appMode], (_a = {},
                    _a[styles.loading] = isPending,
                    _a)),
                style: {
                    fontFamily: fontFamily
                }
            },
            React.createElement("div", {
                className: styles.fileIcon + " " + styles[fileType],
                "data-hook": "file-type",
                "data-file-type": fileType
            }),
            React.createElement("div", {
                    className: styles.fileDetails
                },
                React.createElement("span", {
                    onClick: this.handleFileDownload,
                    className: styles.fileName,
                    "data-hook": "file-name"
                }, messagePart.data.fileName),
                shouldShowFileSize && (React.createElement("span", {
                    className: styles.fileSize,
                    "data-hook": "file-size"
                }, this.formattedFileSize(messagePart.data.fileSize)))),
            isPending ? (React.createElement("div", {
                    "data-hook": "uploading-indicator",
                    className: styles.pending
                },
                React.createElement("div", {
                    className: styles.loader
                }))) : (React.createElement("button", {
                    className: styles.downloadFile,
                    "data-hook": "download-icon",
                    onClick: this.handleFileDownload,
                    "aria-label": t('messages.file-bubble.download-button.aria-label', {
                        fileName: messagePart.data.fileName,
                    })
                },
                React.createElement(DownloadFileIcon, {
                    width: "15px",
                    height: "16px"
                })))));
    };
    return FileBubble;
}(React.Component));
export default translate()(withAppMode(withTheme(FileBubble)));
//# sourceMappingURL=FileBubble.js.map