import {
    __assign
} from "tslib";
import React from 'react';
import WidgetInputV2 from '../WidgetInputV2/WidgetInput';
import WidgetInput from '../InputWidget/WidgetInput';
import InputFullApp from '../InputFullApp/InputFullApp';
import {
    chatSdk,
} from '@wix/chat-sdk';
import withAppMode from '../../providers/appMode/withAppMode';
import {
    AppMode,
} from '../..';
import {
    Experiments
} from '../../constants/experiments';
var InputSplitter = function(props) {
    var renderWidgetComponent = function() {
        var isWidgetRedesign = chatSdk.isExperimentOn(Experiments.WidgetRedesignPhase1);
        return isWidgetRedesign ? (React.createElement(WidgetInputV2, __assign({}, props))) : (React.createElement(WidgetInput, __assign({}, props)));
    };
    return props.appMode === AppMode.FullApp ? (React.createElement(InputFullApp, {
        isVisible: props.isVisible,
        disabled: props.disabled,
        handleChange: props.handleChange,
        message: props.message,
        eventHooks: props.eventHooks,
        sendOnEnter: props.sendOnEnter,
        getInputSendViaIndication: props.getInputSendViaIndication,
        offlineChannels: props.offlineChannels,
        messages: props.messages,
        placeholder: props.placeholder,
        maxRows: props.maxRows,
        inputKeyboards: props.inputKeyboards,
        inputButtons: props.inputButtons,
        chatroomId: props.chatroomId,
        userId: props.userId,
        onSendMessage: props.onSendMessage,
        onAddMessage: props.onAddMessage,
        onUploadFile: props.onUploadFile,
        onClearUnreadDisplay: props.onClearUnreadDisplay,
        compactView: props.compactView,
        otherParticipantId: props.otherParticipantId,
        deliveryMethods: props.deliveryMethods,
        subjectStrategy: props.subjectStrategy,
        instanceId: props.instanceId,
        appMode: props.appMode
    })) : (renderWidgetComponent());
};
export default withAppMode(InputSplitter);
//# sourceMappingURL=InputSplitter.js.map