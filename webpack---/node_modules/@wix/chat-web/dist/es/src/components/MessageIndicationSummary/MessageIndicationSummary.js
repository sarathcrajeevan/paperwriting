import {
    __assign
} from "tslib";
import React from 'react';
import s from './MessageIndicationSummary.scss';
import {
    MessageIndicationsService,
    Constants,
} from '@wix/chat-sdk';
import Check from 'wix-ui-icons-common/Check';
import withTheme from '../../providers/theme/withTheme';
import withAppMode from '../../providers/appMode/withAppMode';
import {
    AppMode
} from '../..';
import {
    translate
} from 'react-i18next';
import _get from 'lodash/get';
import classNames from 'classnames';
import {
    Tooltip
} from 'wix-style-react';
import {
    ErrorIndicationStatus
} from './ErrorIndicationStatus';
var getStatusStyleFromTheme = function(theme, isFullApp) {
    var inheritFont = _get(theme, 'room.message.status.inheritFont', true);
    var fontFamily = _get(theme, 'room.fontFamily');
    var fontFamilyStyle = !isFullApp && inheritFont ? {
        fontFamily: fontFamily
    } : {};
    return __assign({}, fontFamilyStyle);
};
var MessageStatus = function(_a) {
    var _b;
    var t = _a.t,
        theme = _a.theme,
        isFullApp = _a.isFullApp,
        onSendAgain = _a.onSendAgain,
        rawMessage = _a.rawMessage,
        transit = _a.transit,
        isOutgoingMessage = _a.isOutgoingMessage,
        isLastMessage = _a.isLastMessage;
    var statusStyle = getStatusStyleFromTheme(theme, isFullApp);
    var look = _get(theme, 'room.message.status.look');
    var handleSendAgain = function() {
        onSendAgain && onSendAgain(rawMessage);
    };
    var notDeliveredIndicationClasses = classNames((_b = {},
        _b[s.notDeliveredWrapper] = true,
        _b));
    var resendButton = (React.createElement("span", {
        "data-hook": "send-again",
        className: s.resend,
        onClick: handleSendAgain
    }, t('message.resend')));
    var errorTooltipContentKey = function(error) {
        if (!error || !error.isHttpError) {
            return 'message.failed.to.send';
        }
        var httpError = error.httpError;
        if (httpError) {
            switch (httpError.status) {
                case 0:
                    return 'message.indication.error.network';
                case 401:
                    return 'message.indication.error.authentication';
                case 403:
                    return 'message.indication.error.permission';
                default:
                    return 'message.failed.to.send';
            }
        }
        return 'message.failed.to.send';
    };
    return isLastMessage ? (transit.sendStatus === Constants.MessageSendStatus.FAILED ? (React.createElement("div", {
            "data-hook": "not-delivered-indication",
            className: classNames(notDeliveredIndicationClasses, s[look])
        },
        React.createElement(Tooltip, {
                content: t(errorTooltipContentKey(transit.sendError)),
                placement: "top",
                dataHook: "errorTooltip",
                moveBy: {
                    x: -52
                }
            },
            React.createElement("div", {
                "data-hook": "not-delivered-icon",
                className: s.notDeliveredIcon
            })),
        resendButton)) : (React.createElement("div", {
            "data-hook": "indication-warpper",
            className: classNames(s.indicationWrapper, s[look])
        },
        React.createElement("span", {
            "data-hook": "indication-text",
            className: classNames(s.indicationText, s.outside),
            style: __assign({}, statusStyle)
        }, t('message.indication.sending'))))) : null;
};
var ComposedMessageStatus = withTheme(translate()(MessageStatus));
var MessageIndicationSummaryInternal = function(_a) {
    var t = _a.t,
        theme = _a.theme,
        isFullApp = _a.isFullApp,
        isLastMessage = _a.isLastMessage,
        indications = _a.indications,
        transit = _a.transit,
        isOutgoingMessage = _a.isOutgoingMessage;
    var statusStyle = getStatusStyleFromTheme(theme, isFullApp);
    var look = _get(theme, 'room.message.status.look');
    var indicationDetailsToTranslatedKey = function(event, method) {
        if (event === 'Seen') {
            if (method === 'Chat') {
                return 'message.indication.seen.chat';
            }
            if (method === 'Email') {
                return 'message.indication.seen.email';
            }
            if (method === 'Facebook') {
                return 'message.indication.seen.facebook';
            }
            if (method === 'Instagram') {
                return 'message.indication.seen.instagram';
            }
        }
        return null;
    };
    var shouldShowMessageIndicationSummary = isLastMessage && isOutgoingMessage;
    var summarizedIndication = MessageIndicationsService.getSummarizedIndicationsForPrivateChat(indications && indications[0]);
    var indicationTranslationKey;
    if (summarizedIndication) {
        indicationTranslationKey = indicationDetailsToTranslatedKey(summarizedIndication.event, summarizedIndication.method);
    } else {
        indicationTranslationKey =
            transit &&
            transit.sendStatus === Constants.MessageSendStatus.SENT &&
            'message.indication.sent';
    }
    if (!shouldShowMessageIndicationSummary || !indicationTranslationKey) {
        return null;
    }
    if (!indications) {
        return (React.createElement("div", {
                "data-hook": "indication-placeholder",
                className: s.indicationWrapper
            },
            React.createElement("div", {
                className: s.indicationPlaceholder
            })));
    }
    return (React.createElement("div", {
            "data-hook": "indication-warpper",
            className: classNames(s.indicationWrapper, s[look])
        },
        summarizedIndication && (React.createElement(Check, {
            "data-hook": "indication-icon",
            size: "22px",
            className: s.indicationIcon
        })),
        React.createElement("span", {
            "data-hook": "indication-text",
            className: classNames(s.indicationText),
            style: __assign({}, statusStyle)
        }, indicationTranslationKey && t(indicationTranslationKey))));
};
var ComposedMessageIndicationSummaryInternal = withTheme(translate()(MessageIndicationSummaryInternal));
var MessageIndicationSummary = function(_a) {
    var rawMessage = _a.rawMessage,
        onSendAgain = _a.onSendAgain,
        isLastMessage = _a.isLastMessage,
        indications = _a.indications,
        appMode = _a.appMode,
        transit = _a.transit,
        isOutgoingMessage = _a.isOutgoingMessage,
        getIndicationData = _a.getIndicationData,
        compactView = _a.compactView;
    var isFullApp = appMode === AppMode.FullApp;
    var isMessageStatusRelevantMoreThanIndication = function() {
        return (transit &&
            (transit.sendStatus === Constants.MessageSendStatus.FAILED ||
                transit.sendStatus === Constants.MessageSendStatus.SENDING));
    };
    var indicationData = getIndicationData === null || getIndicationData === void 0 ? void 0 : getIndicationData(indications, rawMessage);
    return isMessageStatusRelevantMoreThanIndication() ? (React.createElement(ComposedMessageStatus, {
        isFullApp: isFullApp,
        rawMessage: rawMessage,
        onSendAgain: onSendAgain,
        transit: transit,
        isOutgoingMessage: isOutgoingMessage,
        isLastMessage: isLastMessage
    })) : (indicationData === null || indicationData === void 0 ? void 0 : indicationData.type) === 'error' ? (React.createElement(ErrorIndicationStatus, __assign({}, indicationData, {
        compactView: compactView
    }))) : (React.createElement(ComposedMessageIndicationSummaryInternal, {
        isFullApp: isFullApp,
        isLastMessage: isLastMessage,
        isOutgoingMessage: isOutgoingMessage,
        indications: indications,
        transit: transit
    }));
};
export default withAppMode(withTheme(translate()(MessageIndicationSummary)));
//# sourceMappingURL=MessageIndicationSummary.js.map