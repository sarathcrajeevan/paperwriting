import {
    __awaiter,
    __extends,
    __generator
} from "tslib";
import React from 'react';
import classnames from 'classnames';
import styles from './ImageBubble.scss';
import {
    Box,
    IconButton
} from 'wix-style-react';
import {
    attachments
} from '@wix/inbox-common';
import withAppMode from '../../../providers/appMode/withAppMode';
import withOnImageMessageClick from '../../../providers/ChatConfiguration/withOnImageMessageClick';
import Download from 'wix-ui-icons-common/Download';
import StatusAlert from 'wix-ui-icons-common/StatusAlert';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import {
    translate
} from 'react-i18next';
import {
    getFileSecureUrl
} from '../../../services/media-utils';
var ImageBubble = /** @class */ (function(_super) {
    __extends(ImageBubble, _super);

    function ImageBubble(props) {
        var _this = _super.call(this, props) || this;
        _this.handleDownloadClick = function(e) {
            return __awaiter(_this, void 0, void 0, function() {
                var _a, filename, url, mediaProvider, instanceId, downloadImageData;
                return __generator(this, function(_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.props.messagePart.data, filename = _a.fileName, url = _a.uri, mediaProvider = _a.mediaProvider;
                            instanceId = this.props.instanceId;
                            e.stopPropagation();
                            return [4 /*yield*/ , attachments.getAttachmentUrl({
                                filename: filename,
                                url: url,
                                mediaProvider: mediaProvider,
                                instance: instanceId,
                            })];
                        case 1:
                            downloadImageData = _b.sent();
                            window.open(getFileSecureUrl(downloadImageData.url));
                            return [2 /*return*/ ];
                    }
                });
            });
        };
        _this.handleImageClick = function(onClick) {
            return function() {
                return __awaiter(_this, void 0, void 0, function() {
                    var _a, filename, url, mediaProvider, width, height, fileSize, instanceId, downloadImageData;
                    return __generator(this, function(_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this.props.messagePart.data, filename = _a.fileName, url = _a.uri, mediaProvider = _a.mediaProvider, width = _a.width, height = _a.height, fileSize = _a.fileSize;
                                instanceId = this.props.instanceId;
                                return [4 /*yield*/ , attachments.getAttachmentUrl({
                                    filename: filename,
                                    url: url,
                                    mediaProvider: mediaProvider,
                                    instance: instanceId,
                                })];
                            case 1:
                                downloadImageData = _b.sent();
                                onClick({
                                    url: downloadImageData.url,
                                    width: width,
                                    height: height,
                                    fileName: filename,
                                    fileSize: fileSize,
                                });
                                return [2 /*return*/ ];
                        }
                    });
                });
            };
        };
        _this.handleImageLoad = function() {
            _this.setState({
                isLoading: false
            });
        };
        _this.handleImageError = function() {
            _this.setState({
                hasError: true
            });
        };
        _this.state = {
            isLoading: true,
            hasError: false,
        };
        return _this;
    }
    ImageBubble.prototype.render = function() {
        var _a;
        var _b = this.props,
            messagePart = _b.messagePart,
            transit = _b.transit,
            onImageMessageClick = _b.onImageMessageClick,
            theme = _b.theme,
            t = _b.t;
        var _c = this.state,
            isLoading = _c.isLoading,
            hasError = _c.hasError;
        var opacity = isLoading ? 0 : 1;
        var isPending = transit && transit.isPending;
        var imageLook = _get(theme, 'room.image.look');
        var maxWidth = _get(theme, 'room.message.maxWidth');
        var src = messagePart.data.uri;
        return hasError ? (React.createElement(Box, {
                direction: "vertical",
                verticalAlign: "middle",
                className: styles.imageError,
                dataHook: "image-error-container"
            },
            React.createElement(StatusAlert, null),
            React.createElement("span", {
                className: styles.errorText
            }, t('this.content.is.unavailable')))) : (React.createElement("div", {
                onClick: this.handleImageClick(onImageMessageClick),
                className: classnames((_a = {},
                    _a[styles.imageWrapper] = true,
                    _a[styles[imageLook]] = true,
                    _a[styles.imagePending] = isPending,
                    _a)),
                "data-hook": "image-container",
                "aria-label": t('messages.image-bubble.open.aria-label'),
                role: "button",
                tabIndex: -1
            },
            React.createElement("img", {
                onLoad: this.handleImageLoad,
                style: {
                    opacity: opacity,
                    maxWidth: maxWidth
                },
                className: styles.image,
                src: src,
                alt: messagePart.data.fileName,
                onError: this.handleImageError
            }), !isPending && !hasError ? (React.createElement("div", {
                    className: styles.iconsWrapper
                },
                React.createElement(IconButton, {
                        as: "button",
                        onClick: this.handleDownloadClick,
                        skin: "light",
                        dataHook: "download-icon",
                        "aria-label": t('messages.image-bubble.download-button.aria-label', {
                            fileName: messagePart.data.fileName,
                        })
                    },
                    React.createElement(Download, null)))) : null,
            (isPending || isLoading) && !hasError ? (React.createElement("div", {
                    "data-hook": "loader",
                    className: styles.pending
                },
                React.createElement("div", {
                    className: styles.loader
                }))) : null));
    };
    return ImageBubble;
}(React.Component));
export default withOnImageMessageClick(withAppMode(withTheme(translate()(ImageBubble))));
//# sourceMappingURL=ImageBubble.js.map