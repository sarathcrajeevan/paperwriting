import {
    __extends
} from "tslib";
import React from 'react';
import styles from './FormTemplateBubble.scss';
import withAppMode from '../../../providers/appMode/withAppMode';
import {
    urlify
} from '../../../services/urlify';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
var FormTemplateBubble = /** @class */ (function(_super) {
    __extends(FormTemplateBubble, _super);

    function FormTemplateBubble() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormTemplateBubble.prototype.render = function() {
        var _a = this.props,
            message = _a.message,
            appMode = _a.appMode,
            theme = _a.theme;
        var _b = message.templateData,
            title = _b.title,
            text = _b.text,
            fields = _b.fields;
        var inheritFont = _get(theme, 'room.template.inheritFont', true);
        var fontFamily = inheritFont ? _get(theme, 'room.fontFamily') : undefined;
        var fieldsComp = fields &&
            fields.map(function(field, index) {
                return (React.createElement("div", {
                        className: styles.formTemplateField,
                        "data-hook": "form-template-field",
                        key: index
                    },
                    React.createElement("div", {
                        className: styles.formTemplateFieldName,
                        "data-hook": "form-template-field-name",
                        style: {
                            fontFamily: fontFamily
                        }
                    }, field.name),
                    React.createElement("div", {
                        className: styles.formTemplateFieldValue,
                        "data-hook": "form-template-field-value",
                        style: {
                            fontFamily: fontFamily
                        }
                    }, urlify(field.value))));
            });
        return (React.createElement("div", {
                className: styles.formWrapper + " " + styles[appMode]
            },
            title && (React.createElement("div", {
                className: styles.formTemplateTitle,
                "data-hook": "form-template-title",
                style: {
                    fontFamily: fontFamily
                }
            }, title)),
            text && (React.createElement("div", {
                className: styles.formTemplateText,
                "data-hook": "form-template-text",
                style: {
                    fontFamily: fontFamily
                }
            }, text)),
            fieldsComp));
    };
    return FormTemplateBubble;
}(React.PureComponent));
export default withTheme(withAppMode(FormTemplateBubble));
//# sourceMappingURL=FormTemplateBubble.js.map