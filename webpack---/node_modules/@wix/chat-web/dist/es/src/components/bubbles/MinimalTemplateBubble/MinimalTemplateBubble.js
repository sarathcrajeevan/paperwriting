import {
    __extends
} from "tslib";
import React from 'react';
import styles from './MinimalTemplateBubble.scss';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import classNames from 'classnames';
import {
    Text
} from 'wix-style-react';
var MinimalTemplateBubble = /** @class */ (function(_super) {
    __extends(MinimalTemplateBubble, _super);

    function MinimalTemplateBubble() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinimalTemplateBubble.prototype.render = function() {
        var _a;
        var _b = this.props,
            message = _b.message,
            theme = _b.theme,
            eventHooks = _b.eventHooks;
        var templateData = message.templateData;
        var _c = templateData,
            text = _c.text,
            image = _c.image,
            link = _c.link,
            icon = _c.icon;
        var fontFamily = _get(theme, 'room.fontFamily');
        var handleCallToActionClick = function(url) {
            if (eventHooks.onCallToActionClick) {
                eventHooks.onCallToActionClick(url);
            }
        };
        var textWrapperClasses = classNames((_a = {},
            _a[styles.textWrapper] = true,
            _a[styles.texthover] = !!link,
            _a));
        var iconUrl = _get(theme, ['room', 'icons', icon], image);
        return (React.createElement("div", {
                "data-hook": "root",
                className: styles.root
            },
            React.createElement("div", {
                className: styles.iconWrapper
            }, iconUrl && (React.createElement("div", {
                "data-hook": "minimal-template-icon",
                style: {
                    backgroundImage: "url(" + iconUrl + ")",
                },
                className: styles.image
            }))),
            React.createElement("div", {
                    "data-hook": "minimal-template-text-wrapper",
                    className: textWrapperClasses,
                    style: {
                        fontFamily: fontFamily
                    },
                    onClick: link ? function() {
                        return handleCallToActionClick(link);
                    } : undefined
                },
                React.createElement(Text, {
                    weight: "normal",
                    size: "tiny",
                    secondary: false,
                    light: false,
                    className: styles.text,
                    dataHook: "minimal-template-text"
                }, text))));
    };
    return MinimalTemplateBubble;
}(React.PureComponent));
export default withTheme(MinimalTemplateBubble);
//# sourceMappingURL=MinimalTemplateBubble.js.map