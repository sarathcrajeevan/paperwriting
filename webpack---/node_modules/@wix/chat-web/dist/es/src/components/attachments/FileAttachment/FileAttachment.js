import {
    __awaiter,
    __generator
} from "tslib";
import React from 'react';
import styles from './FileAttachment.scss';
import {
    attachments
} from '@wix/inbox-common';
import {
    translate
} from 'react-i18next';
import {
    getFileSecureUrl
} from '../../../services/media-utils';
import {
    Box
} from 'wix-style-react';
import Attachment from '../Attachment/Attachment';
var FileAttachment = function(_a) {
    var messagePart = _a.messagePart,
        instanceId = _a.instanceId,
        transit = _a.transit,
        onRemove = _a.onRemove,
        maxWidth = _a.maxWidth;
    var handleFileDownload = function() {
        return __awaiter(void 0, void 0, void 0, function() {
            var _a, filename, url, mediaProvider, instance, downloadFileData;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        _a = messagePart.data, filename = _a.fileName, url = _a.uri, mediaProvider = _a.mediaProvider;
                        instance = instanceId;
                        if (!url) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , attachments.getAttachmentUrl({
                            filename: filename,
                            url: url,
                            mediaProvider: mediaProvider,
                            instance: instance,
                        })];
                    case 1:
                        downloadFileData = _b.sent();
                        window.open(getFileSecureUrl(downloadFileData.url));
                        _b.label = 2;
                    case 2:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    var type = messagePart.data.type;
    var fileType = type ?
        attachments.getAttachmentType(type) :
        attachments.attachmentTypes.UNKNOWN;
    var isPending = !!(transit === null || transit === void 0 ? void 0 : transit.isPending);
    return (React.createElement(Attachment, {
        name: messagePart.data.fileName,
        size: messagePart.data.fileSize,
        image: React.createElement(Box, {
            className: styles.fileIcon + " " + styles[fileType],
            "data-hook": "file-type-" + fileType
        }),
        onClickImage: handleFileDownload,
        onClickName: handleFileDownload,
        onRemove: onRemove,
        pending: isPending,
        maxWidth: maxWidth
    }));
};
export default translate()(FileAttachment);
//# sourceMappingURL=FileAttachment.js.map