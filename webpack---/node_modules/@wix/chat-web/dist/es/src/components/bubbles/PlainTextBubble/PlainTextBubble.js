import {
    __assign
} from "tslib";
import React from 'react';
import styles from './PlainTextBubble.scss';
import withAppMode from '../../../providers/appMode/withAppMode';
import {
    urlify
} from '../../../services/urlify';
import withTheme from '../../../providers/theme/withTheme';
import _get from 'lodash/get';
import {
    AppMode
} from '../../../constants/app-mode';
import classNames from 'classnames';
import direction from 'direction';
import {
    isOnlyEmojis,
    countEmojis,
    emojiFontSize,
} from '../../../services/emoji-utils';
var PlainTextBubble = function(_a) {
    var _b;
    var messagePart = _a.messagePart,
        appMode = _a.appMode,
        theme = _a.theme,
        fullWidth = _a.fullWidth;
    var _c;
    var fontFamily = _get(theme, 'room.fontFamily');
    var padding = _get(theme, 'room.message.padding');
    var paddingStyle = padding ? {
        padding: padding
    } : {};
    var maxWidth = fullWidth ? 'unset' : _get(theme, 'room.message.maxWidth');
    var maxWidthStyle = {
        maxWidth: maxWidth
    };
    var rawText = (_c = messagePart === null || messagePart === void 0 ? void 0 : messagePart.data) === null || _c === void 0 ? void 0 : _c.text;
    var enlargeSingleEmojis = _get(theme, 'room.message.enlargeSingleEmojis');
    var isEmojiMessage = enlargeSingleEmojis &&
        rawText &&
        countEmojis(rawText) < 4 &&
        isOnlyEmojis(rawText);
    var emojiStyle = isEmojiMessage ?
        {
            fontSize: emojiFontSize(rawText),
            lineHeight: 'normal',
            textAlign: 'center',
            fontFamily: 'initial',
            paddingTop: '4px',
            paddingBottom: '0',
        } :
        {};
    var text = urlify(rawText);
    var dir = direction(text);
    return (React.createElement("div", {
        "data-hook": "plain-text-bubble-wrapper",
        className: classNames(styles.wrapper, (_b = {},
            _b[styles.widget] = appMode === AppMode.Widget,
            _b)),
        style: __assign(__assign(__assign({
            fontFamily: fontFamily,
            direction: dir !== 'neutral' ? dir : undefined
        }, paddingStyle), maxWidthStyle), emojiStyle)
    }, text));
};
export default withTheme(withAppMode(PlainTextBubble));
//# sourceMappingURL=PlainTextBubble.js.map