"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ClickOutside = void 0;
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
/**
 * Click outside behavior
 */
var ClickOutside = /** @class */ (function(_super) {
    tslib_1.__extends(ClickOutside, _super);

    function ClickOutside(props) {
        var _this = _super.call(this, props) || this;
        /**
         * Check whether the click is inside the element or excluded
         * @param event - Click event
         */
        _this._isInsideClick = function(event) {
            var _a = _this.props,
                rootRef = _a.rootRef,
                excludeClass = _a.excludeClass;
            var target = event.target;
            while (target) {
                // Same node
                if (rootRef.current === target) {
                    return true;
                }
                // Contains an excluded class
                if (target.classList) {
                    if (typeof excludeClass === 'string' &&
                        target.classList.contains(excludeClass)) {
                        return true;
                    }
                    if (typeof excludeClass === 'object' &&
                        target.classList
                        .toString()
                        .split(' ')
                        .some(function(c) {
                            return excludeClass.includes(c);
                        })) {
                        return true;
                    }
                }
                target = target.parentElement;
            }
        };
        /**
         * Triggers onClickOutside callback when clicked outside child
         * @param event - Click event
         */
        _this._onClickOutside = function(event) {
            var onClickOutside = _this.props.onClickOutside;
            if (typeof onClickOutside === 'function' && !_this._isInsideClick(event)) {
                onClickOutside(event);
            }
        };
        _this._boundEvents = [];
        return _this;
    }
    /**
     * Register ClickOutside events
     */
    ClickOutside.prototype._registerEvents = function() {
        var _this = this;
        var options = this.props.options;
        ['mouseup', 'touchend'].forEach(function(eventName) {
            document.addEventListener(eventName, _this._onClickOutside, options);
            _this._boundEvents.push(eventName);
        });
    };
    /**
     * Unregister ClickOutside events
     */
    ClickOutside.prototype._unregisterEvents = function() {
        var options = this.props.options;
        while (this._boundEvents.length > 0) {
            var eventName = this._boundEvents.pop();
            document.removeEventListener(eventName, this._onClickOutside, options);
        }
    };
    ClickOutside.prototype.componentDidMount = function() {
        if (this.props.onClickOutside) {
            this._registerEvents();
        }
    };
    ClickOutside.prototype.componentDidUpdate = function(prevProps) {
        if (this.props.onClickOutside !== prevProps.onClickOutside) {
            if (this.props.onClickOutside) {
                this._registerEvents();
            } else {
                this._unregisterEvents();
            }
        }
    };
    ClickOutside.prototype.componentWillUnmount = function() {
        this._unregisterEvents();
    };
    ClickOutside.prototype.render = function() {
        return this.props.children;
    };
    return ClickOutside;
}(React.PureComponent));
exports.ClickOutside = ClickOutside;
//# sourceMappingURL=ClickOutside.js.map