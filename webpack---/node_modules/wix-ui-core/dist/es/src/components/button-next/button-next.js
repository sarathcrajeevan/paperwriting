import {
    __assign,
    __extends,
    __rest
} from "tslib";
import * as React from 'react';
import classNames from 'classnames';
import {
    st,
    classes
} from './button-next.st.css';
import {
    dataHooks
} from './constants';
import {
    isStatelessComponent
} from '../../utils';
var _addAffix = function(Affix, styleClass, dataHook) {
    return Affix &&
        React.cloneElement(Affix, {
            className: classNames(classes[styleClass], Affix.props.className),
            'data-hook': Affix.props['data-hook'] || Affix.props.dataHook || dataHook,
        });
};
/**
 * ButtonNext
 */
var ButtonNextComponent = /** @class */ (function(_super) {
    __extends(ButtonNextComponent, _super);

    function ButtonNextComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonNextComponent.prototype.focus = function() {
        if (this.innerComponentRef && this.innerComponentRef.focus) {
            this.innerComponentRef.focus();
        }
    };
    ButtonNextComponent.prototype.render = function() {
        var _this = this;
        var _a = this.props,
            Component = _a.as,
            suffixIcon = _a.suffixIcon,
            prefixIcon = _a.prefixIcon,
            children = _a.children,
            disabled = _a.disabled,
            focusableOnFocus = _a.focusableOnFocus,
            focusableOnBlur = _a.focusableOnBlur,
            href = _a.href,
            contentClassName = _a.contentClassName,
            contentRef = _a.contentRef,
            rest = __rest(_a, ["as", "suffixIcon", "prefixIcon", "children", "disabled", "focusableOnFocus", "focusableOnBlur", "href", "contentClassName", "contentRef"]);
        var htmlTabIndex = disabled ? -1 : rest.tabIndex || 0;
        var htmlHref = disabled ? undefined : href;
        var reference = isStatelessComponent(Component) && typeof Component !== 'string' ?
            undefined :
            function(ref) {
                return (_this.innerComponentRef = ref);
            };
        return (React.createElement(Component, __assign({}, rest, {
                onFocus: focusableOnFocus,
                onBlur: focusableOnBlur,
                disabled: href ? undefined : disabled,
                href: htmlHref,
                ref: reference,
                tabIndex: htmlTabIndex,
                "aria-disabled": disabled,
                className: st(classes.root, {
                    disabled: disabled
                }, this.props.className)
            }),
            _addAffix(prefixIcon, 'prefix', dataHooks.prefixIcon),
            React.createElement("span", {
                className: st(classes.content, contentClassName),
                ref: contentRef
            }, children),
            _addAffix(suffixIcon, 'suffix', dataHooks.suffixIcon)));
    };
    ButtonNextComponent.defaultProps = {
        as: 'button',
        type: 'button'
    };
    ButtonNextComponent.displayName = 'ButtonNext';
    return ButtonNextComponent;
}(React.Component));
export var ButtonNext = ButtonNextComponent;
//# sourceMappingURL=button-next.js.map