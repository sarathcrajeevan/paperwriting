import {
    __assign,
    __extends
} from "tslib";
import * as React from 'react';
import {
    st,
    classes
} from './Tooltip.st.css';
import {
    Popover
} from '../popover';
import {
    filterDataProps
} from '../../utils/filter-data-props';
/**
 * Tooltip
 */
var Tooltip = /** @class */ (function(_super) {
    __extends(Tooltip, _super);

    function Tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false
        };
        _this._handleClickOutside = function() {
            var _a = _this.props,
                onClickOutside = _a.onClickOutside,
                shouldCloseOnClickOutside = _a.shouldCloseOnClickOutside;
            if (shouldCloseOnClickOutside) {
                _this.props.onHide();
                _this.setState({
                    isOpen: false
                });
            }
            return onClickOutside ? onClickOutside() : null;
        };
        _this._renderElement = function() {
            var _a = _this.props,
                children = _a.children,
                disabled = _a.disabled,
                ariaDescribedBy = _a["aria-describedby"];
            if (typeof children === 'string' || !children) {
                return children || '';
            }
            return React.cloneElement(children, {
                onFocus: disabled ? undefined : _this._onFocus,
                onBlur: disabled ? undefined : _this._onBlur,
                'aria-describedby': ariaDescribedBy,
            });
        };
        _this.open = function() {
            _this.props.onShow();
            _this.setState({
                isOpen: true
            });
        };
        _this.close = function() {
            var shouldCloseOnClickOutside = _this.props.shouldCloseOnClickOutside;
            if (!shouldCloseOnClickOutside) {
                _this.props.onHide();
                _this.setState({
                    isOpen: false
                });
            }
        };
        _this._onFocus = function(event, handlers) {
            var focusableHOC = handlers && handlers.focus;
            _this.open();
            return focusableHOC ? handlers.focus() : null;
        };
        _this._onBlur = function(event, handlers) {
            var focusableHOC = handlers && handlers.blur;
            _this.close();
            return focusableHOC ? handlers.blur() : null;
        };
        _this.isShown = function() {
            var _a = _this.props,
                disabled = _a.disabled,
                shown = _a.shown;
            if (shown) {
                return shown;
            }
            return disabled ? false : _this.state.isOpen;
        };
        return _this;
    }
    Tooltip.prototype.render = function() {
        var _a = this.props,
            placement = _a.placement,
            content = _a.content,
            moveBy = _a.moveBy,
            timeout = _a.timeout,
            showArrow = _a.showArrow,
            moveArrowTo = _a.moveArrowTo,
            appendTo = _a.appendTo,
            flip = _a.flip,
            fixed = _a.fixed,
            hideDelay = _a.hideDelay,
            showDelay = _a.showDelay,
            disabled = _a.disabled,
            customArrow = _a.customArrow,
            zIndex = _a.zIndex,
            minWidth = _a.minWidth,
            maxWidth = _a.maxWidth,
            ariaDescribedBy = _a["aria-describedby"],
            className = _a.className,
            contentClassName = _a.contentClassName,
            disableClickOutsideWhenClosed = _a.disableClickOutsideWhenClosed,
            fluid = _a.fluid;
        return (React.createElement(Popover, __assign({
                className: st(classes.root, className),
                placement: placement,
                shown: this.isShown(),
                showArrow: showArrow,
                onMouseEnter: disabled ? undefined : this.open,
                onMouseLeave: disabled ? undefined : this.close,
                timeout: timeout,
                hideDelay: hideDelay,
                showDelay: showDelay,
                moveBy: moveBy,
                moveArrowTo: moveArrowTo,
                appendTo: appendTo,
                flip: flip,
                fixed: fixed,
                onClickOutside: this._handleClickOutside,
                customArrow: customArrow,
                id: ariaDescribedBy,
                role: "tooltip",
                zIndex: zIndex,
                minWidth: minWidth,
                maxWidth: maxWidth,
                contentClassName: contentClassName,
                disableClickOutsideWhenClosed: disableClickOutsideWhenClosed,
                fluid: fluid
            }, filterDataProps(this.props)),
            React.createElement(Popover.Element, null, this._renderElement()),
            React.createElement(Popover.Content, null, content)));
    };
    Tooltip.displayName = 'Tooltip';
    Tooltip.defaultProps = {
        placement: 'top',
        appendTo: 'parent',
        onShow: function() {
            return ({});
        },
        onHide: function() {
            return ({});
        },
        timeout: 150,
        showDelay: 0,
        hideDelay: 0,
        showArrow: true,
    };
    return Tooltip;
}(React.PureComponent));
export {
    Tooltip
};
//# sourceMappingURL=Tooltip.js.map