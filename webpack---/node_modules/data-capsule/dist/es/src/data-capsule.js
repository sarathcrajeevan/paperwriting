import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);

            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }

            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}

import BaseStorage from './base-storage';
import {
    verifyConsentPolicyCategoryIfExists
} from './consent-policy';

function validateNamespace(options) {
    if (!options.namespace) {
        throw new Error('namespace is required');
    } else if (typeof options.namespace !== 'string') {
        throw new Error('namespace should be a string');
    }

    verifyConsentPolicyCategoryIfExists(options.category);
}

var DataCapsule = /*#__PURE__*/ function(_BaseStorage) {
    _inheritsLoose(DataCapsule, _BaseStorage);

    function DataCapsule(_ref) {
        var _this;

        var strategy = _ref.strategy,
            namespace = _ref.namespace,
            scope = _ref.scope;
        _this = _BaseStorage.call(this) || this;
        _this.storageStrategy = BaseStorage.verify(strategy);
        _this._options = {
            namespace: namespace,
            scope: scope
        };
        return _this;
    }

    var _proto = DataCapsule.prototype;

    _proto._buildValidateOptions = function _buildValidateOptions(capsuleOptions, options) {
        options = Object.assign({}, capsuleOptions, options);
        options.scope = this.storageStrategy.extendScope(options.scope);
        validateNamespace(options);
        return options;
    };

    _proto.setItem = /*#__PURE__*/ function() {
        var _setItem = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(key, value, options) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            options = this._buildValidateOptions(this._options, options);
                            return _context.abrupt("return", this.storageStrategy.setItem(key, value, options));

                        case 2:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function setItem(_x, _x2, _x3) {
            return _setItem.apply(this, arguments);
        }

        return setItem;
    }();

    _proto.getItem = function getItem(key, options) {
        options = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.getItem(key, options);
    };

    _proto.removeItem = function removeItem(key, options) {
        options = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.removeItem(key, options);
    };

    _proto.getAllItems = function getAllItems(options) {
        options = this._buildValidateOptions(this._options, options);
        return this.storageStrategy.getAllItems(options);
    };

    return DataCapsule;
}(BaseStorage);

export {
    DataCapsule as
    default
};