function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}

import greedySplit from 'greedy-split';
import connectMessageChannel from 'message-channel/connect';
import BaseStorage from '../base-storage';
import {
    CONNECTION_MAX_TIMEOUT,
    MESSAGE_MAX_TIMEOUT,
    toError
} from '../utils/constants';

var FrameStorageStrategy = /*#__PURE__*/ function(_BaseStorage) {
    _inheritsLoose(FrameStorageStrategy, _BaseStorage);

    function FrameStorageStrategy(target, origin, token, opts) {
        var _this;

        if (opts === void 0) {
            opts = {};
        }

        _this = _BaseStorage.call(this) || this;
        _this.target = target;
        _this.origin = origin;
        _this.token = token;
        _this.channel = undefined;
        _this.opts = opts;
        var _this$opts = _this.opts,
            _this$opts$connection = _this$opts.connectionMaxTimeout,
            connectionMaxTimeout = _this$opts$connection === void 0 ? CONNECTION_MAX_TIMEOUT : _this$opts$connection,
            _this$opts$messageMax = _this$opts.messageMaxTimeout,
            messageMaxTimeout = _this$opts$messageMax === void 0 ? MESSAGE_MAX_TIMEOUT : _this$opts$messageMax;
        _this.connectionMaxTimeout = connectionMaxTimeout;
        _this.messageMaxTimeout = messageMaxTimeout;
        return _this;
    }

    var _proto = FrameStorageStrategy.prototype;

    _proto.getChannel = function getChannel() {
        var _this2 = this;

        if (this.channel) {
            return Promise.resolve(this.channel);
        }

        return connectMessageChannel('data-capsule', {
            target: this.target,
            origin: this.origin,
            connectionMaxTimeout: this.connectionMaxTimeout,
            messageMaxTimeout: this.messageMaxTimeout
        }).then(function(channel) {
            _this2.channel = channel;
            return channel;
        });
    };

    _proto.sendCommand = function sendCommand(method, params) {
        var _this3 = this;

        var payload = {
            data: params
        };
        return this.getChannel().then(function(sendToChannel) {
            var message = [_this3.token, method, JSON.stringify(payload)].join('|');
            return sendToChannel(message).then(function(e) {
                var _greedySplit = greedySplit(e.data, '|', 2),
                    status = _greedySplit[0],
                    eventPayload = _greedySplit[1];

                if (status === 'reject') {
                    throw toError(eventPayload);
                }

                return JSON.parse(eventPayload).data;
            });
        });
    };

    _proto.setItem = function setItem() {
        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
            params[_key] = arguments[_key];
        }

        return this.sendCommand('setItem', params);
    };

    _proto.getItem = function getItem() {
        for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
        }

        return this.sendCommand('getItem', params);
    };

    _proto.removeItem = function removeItem() {
        for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            params[_key3] = arguments[_key3];
        }

        return this.sendCommand('removeItem', params);
    };

    _proto.getAllItems = function getAllItems() {
        for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            params[_key4] = arguments[_key4];
        }

        return this.sendCommand('getAllItems', params);
    };

    return FrameStorageStrategy;
}(BaseStorage);

export {
    FrameStorageStrategy as
    default
};