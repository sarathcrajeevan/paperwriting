import {
    range,
    includes,
    isEqual
} from 'lodash';
export var QuantityCalculator = {
    defaultQuantitiesRange: range(1, 100000),
    getQuantitiesRange: function(product, userSelections) {
        if (userSelections === void 0) {
            userSelections = [];
        }
        return product.isManageProductItems ?
            QuantityCalculator.getFromUserSelections(product, userSelections) :
            QuantityCalculator.getFromProduct(product);
    },
    getFromProduct: function(product) {
        var quantities = QuantityCalculator.defaultQuantitiesRange;
        if (product.isTrackingInventory) {
            quantities = range(1, product.inventory.quantity + 1);
        } else if (product.inventory.status === 'out_of_stock') {
            quantities = [];
        }
        return quantities;
    },
    getFromUserSelections: function(product, userSelections) {
        var quantities = QuantityCalculator.defaultQuantitiesRange;
        var selectedVariance = QuantityCalculator.getVariantsRepresentation(product, userSelections);
        if (selectedVariance) {
            if (product.isTrackingInventory) {
                quantities = range(1, selectedVariance.inventory.quantity + 1);
            } else if (selectedVariance.inventory.status === 'out_of_stock') {
                quantities = [];
            }
        }
        return quantities;
    },
    getVariantsRepresentation: function(product, userSelections) {
        var res;
        if (product.isManageProductItems && product.productItems && !includes(userSelections, null)) {
            var selectionsIds_1 = userSelections.map(function(x) {
                return x.id;
            });
            res = product.productItems.filter(function(item) {
                return isEqual(item.optionsSelections, selectionsIds_1);
            })[0];
        }
        return res;
    },
};
//# sourceMappingURL=quantityCalculator.js.map